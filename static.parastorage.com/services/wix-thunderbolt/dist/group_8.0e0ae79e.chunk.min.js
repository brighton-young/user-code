"use strict";
(self.webpackJsonp__wix_thunderbolt_app =
  self.webpackJsonp__wix_thunderbolt_app || []).push([
  [5625],
  {
    52868: function (e, t, i) {
      i.r(t),
        i.d(t, {
          SiteMapSymbol: function () {
            return l.iQ;
          },
          TpaEventsListenerManagerSymbol: function () {
            return l.oJ;
          },
          TpaFullScreenModeSymbol: function () {
            return l.g_;
          },
          TpaModalSymbol: function () {
            return a.tY;
          },
          TpaPopupSymbol: function () {
            return a.ir;
          },
          TpaSymbol: function () {
            return l.Uj;
          },
          name: function () {
            return l.UU;
          },
          page: function () {
            return Gt;
          },
        });
      var n = i(16537),
        a = i(60950),
        o = i(18922),
        r = i(77748),
        s = i(20590),
        p = i(87711),
        d = i(32166),
        l = i(86227),
        g = i(48556),
        c = i(62472),
        u = i(59427),
        m = i(5164),
        h = i(2897);
      const I = (0, r.Og)(
          [
            (0, r.KT)(s.YG, g.UU),
            (0, r.KT)(s.Gp, l.UU),
            (0, r.m3)(a.dQ),
            p.Ji,
            d.RV,
            d.TQ,
            (0, r.lq)(m.Q),
            (0, r.lq)(u.IY),
          ],
          (e, t, i, n, a, { mode: { debug: o } }, r, s) => {
            const { appsClientSpecMapData: p } = e,
              d = ({
                tpa: e,
                origin: i,
                callId: n,
                status: a,
                res: o,
                compId: r,
              }) => {
                const p = {
                  callId: n,
                  intent: "TPA_RESPONSE",
                  status: a,
                  res: o,
                };
                s &&
                  s.tpa.addMessage({
                    message: p,
                    compId: r,
                    contextId: t.pageId,
                    origin: i,
                  }),
                  e.postMessage(JSON.stringify(p), "*");
              },
              l = Object.assign({}, ...i.map((e) => e.getTpaHandlers()));
            return {
              async handleMessage({ source: i, origin: a, message: s }) {
                const {
                    type: g,
                    callId: u,
                    compId: m,
                    data: I,
                    deviceType: f,
                    originFrame: T,
                  } = s,
                  w = ((e) => {
                    const t = n.get(e)?.src || n.get(e)?.url;
                    return t ? new URL(t) : null;
                  })(m);
                if (
                  "https://static.parastorage.com" !== a &&
                  !((e, t) => e?.origin === t)(w, a) &&
                  !((e) =>
                    "https://editor.wix.com" === e ||
                    "https://create.editorx.com" === e ||
                    "https://blocks.wix.com" === e)(a)
                )
                  return void (
                    o &&
                    console.warn("discarded tpa message: untrusted origin", {
                      origin: a,
                      message: s,
                    })
                  );
                const y = l[g];
                if (!y)
                  return void (
                    o &&
                    console.warn(
                      `TpaHandlerError: ${g} handler is not implemented`
                    )
                  );
                const P = c.l.getOriginCompId(m),
                  U = t.widgets[P],
                  C = r?.isTpaWorker(m),
                  D = C ? r.getWorkerDetails(m) : null,
                  S = C ? D.appDefinitionId : U?.appDefinitionId,
                  O = y(m, I, {
                    callId: u,
                    tpa: i,
                    appDefinitionId: S,
                    tpaCompData: U,
                    appClientSpecMapData: { appDefinitionId: S, ...p[S] },
                    originCompId: P,
                    viewMode: e.viewMode,
                  });
                if (void 0 !== O)
                  try {
                    const e = await O;
                    if (e === h.Zq) return;
                    d({
                      tpa: i,
                      origin: a,
                      callId: u,
                      compId: m,
                      status: !0,
                      res: e,
                    });
                  } catch (e) {
                    const { message: t, name: n, stack: o } = e;
                    d({
                      tpa: i,
                      origin: a,
                      callId: u,
                      compId: m,
                      status: !1,
                      res: { error: { message: t, name: n, stack: o } },
                    });
                  }
              },
            };
          }
        ),
        f = (0, r.Og)([(0, r.KT)(s.Gp, l.UU), s.$0, l.oJ], (e, t, i) => {
          const n = (t) => {
            Object.entries(e.widgets).forEach((e) => {
              i.dispatch("CONSENT_POLICY_UPDATE", () => t, { compId: e[0] });
            });
          };
          return {
            pageDidMount() {
              return t.registerToChanges(n);
            },
          };
        }),
        T = ({
          tpaModal: e,
          tpaPopup: t,
          compId: i = "",
          onCloseMessage: n,
        }) => {
          t.isPopup(i) ? t.closePopup(i, n) : e.closeModal(n);
        },
        w = (0, r.Og)([a.tY, a.ir], (e, t) => ({
          getTpaHandlers() {
            return {
              onEscapeClicked: (i) => {
                T({ tpaModal: e, tpaPopup: t, compId: i });
              },
            };
          },
        }));
      var y = i(25083);
      const P = (0, r.Og)(
          [(0, r.KT)(s.YG, g.UU), (0, r.lq)(y.a)],
          ({ externalBaseUrl: e }, t) => ({
            getTpaHandlers() {
              return {
                async getCustomizedUrlSegments(n, a) {
                  const { url: o, options: r } = a,
                    s = t?.urlMappings,
                    { getCustomizedUrlSegments: p } = await Promise.all([
                      i.e(671),
                      i.e(6510),
                    ]).then(i.bind(i, 4669));
                  return p(s, o, { baseUrl: e, ...r });
                },
              };
            },
          })
        ),
        U = (0, r.Og)(
          [(0, r.KT)(s.YG, g.UU), (0, r.lq)(y.a)],
          ({ externalBaseUrl: e }, t) => ({
            getTpaHandlers() {
              return {
                async buildCustomizedUrl(n, a) {
                  const { key: o, itemData: r, options: s } = a,
                    p = t?.urlMappings,
                    { buildCustomizedUrl: d } = await Promise.all([
                      i.e(671),
                      i.e(6510),
                    ]).then(i.bind(i, 4669));
                  return d(p, o, r, { baseUrl: e, ...s });
                },
              };
            },
          })
        );
      var C = i(62155),
        D = i.n(C),
        S = i(10553),
        O = i(88574),
        M = i(71085),
        E = i(45117),
        v = i(93425);
      const b = (0, r.Og)(
          [
            (0, r.KT)(s.YG, g.UU),
            (0, r.KT)(s.Gp, l.UU),
            (0, r.KT)(s._K, l.UU),
            M.wy,
            S.n,
            (0, r.lq)(E.By),
            (0, r.lq)(v.tX),
          ],
          (e, t, i, n, a, o, r) => ({
            getTpaHandlers() {
              return {
                getStateUrl(s, p, { originCompId: d }) {
                  const {
                      metaSiteId: l,
                      userFileDomainUrl: g,
                      routersConfig: c,
                      appsClientSpecMapByApplicationId: u,
                      appsClientSpecMapData: m,
                      externalBaseUrl: h,
                      isMobileView: I,
                      isPremiumDomain: f,
                    } = e,
                    T = (0, O.W)({
                      routingInfo: n.getLinkUtilsRoutingInfo(),
                      metaSiteId: l,
                      userFileDomainUrl: g,
                      routersConfig: c,
                      popupPages: o?.getLightboxPages(),
                      multilingualInfo: r?.getMultilingualInfo(),
                      isMobileView: I,
                      isPremiumDomain: f,
                      experiments: a,
                    }),
                    w = a["specs.thunderbolt.deprecateAppId"],
                    y = D()(i.pagesData)
                      .groupBy("tpaApplicationId")
                      .mapValues((e) => e.map((e) => e.id))
                      .value(),
                    P = D()(i.pagesData)
                      .groupBy("appDefinitionId")
                      .mapValues((e) => e.map((e) => e.id))
                      .value(),
                    U = Object.entries(i.pagesData)
                      .map(([e, t]) => ({ [t.tpaPageId]: e }))
                      .reduce(D().assign),
                    { state: C, sectionId: S } = p,
                    { appData: M, appPages: E } = w
                      ? ((e) => {
                          const i = t.widgets[e].appDefinitionId;
                          return { appData: m[i], appPages: P[i] };
                        })(d)
                      : ((e) => {
                          const i = t.widgets[e].applicationId;
                          return { appData: u[i], appPages: y[i] };
                        })(d);
                  if (!E || 0 === E.length)
                    return {
                      error: {
                        message: `Page with app "${M.appDefinitionName}" was not found.`,
                      },
                    };
                  const v = {
                    type: "TpaPageLink",
                    pageId: U[S] || E[0],
                    path: C,
                  };
                  return { url: `${h}${T.getLinkUrlFromDataItem(v)}` };
                },
              };
            },
          })
        ),
        x = (0, r.Og)([(0, r.KT)(s.Gp, l.UU)], ({ widgets: e }) => ({
          getTpaHandlers() {
            return {
              getStyleParamsByStyleId(t, i) {
                const n = Object.values(e).find((e) => e.styleId === i.styleId),
                  a = n?.style;
                return a
                  ? { ...a }
                  : {
                      error: {
                        message: `Style id "${i.styleId}" was not found.`,
                      },
                    };
              },
            };
          },
        }));
      var A = i(32777),
        L = i(63386),
        R = i(17840);
      const N = (0, r.Og)(
          [d.TQ, (0, r.KT)(s.YG, g.UU), L.i$, d.RV, A.F],
          (e, { externalBaseUrl: t }, i, n, a) => {
            const o = (e) => ({
                activityDetails: { additionalInfoUrl: null, summary: "" },
                activityInfo: "activityInfo",
                activityType: "activityType",
                contactUpdate: {},
                activityLocationUrl: n.location.href,
                createdAt: new Date().toISOString(),
                ...e,
              }),
              r = ((e, t) => (i) => {
                const n = new URL(t);
                return (
                  Object.entries(i.params).forEach(([e, t]) => {
                    t && n.searchParams.append(e, t);
                  }),
                  e.envFetch(n.href, {
                    method: "POST",
                    body: JSON.stringify(i.payload),
                    headers: { "Content-Type": "application/json" },
                  })
                );
              })(a, `${t}/_api/app-integration-bus-web/v1/activities`);
            return {
              getTpaHandlers() {
                return {
                  postActivity: (0, R.V)(
                    ["site"],
                    (t, { activity: n }, { appDefinitionId: a }) => {
                      var s;
                      return (async (e) => {
                        const t = await r(e);
                        if (!t.ok)
                          return {
                            status: !1,
                            response: {
                              status: t.status,
                              statusText: t.statusText,
                              responseText: await t.text(),
                            },
                          };
                        const {
                          userSessionToken: n,
                          activityId: a,
                          contactId: o,
                        } = await t.json();
                        return (
                          n && i.setUserSession(n),
                          {
                            status: !0,
                            response: { activityId: a, contactId: o },
                          }
                        );
                      })({
                        params:
                          ((s = {
                            "application-id": a || "TPA",
                            instance: i.getAppInstanceByAppDefId(a),
                          }),
                          {
                            hs: i.getHubSecurityToken(),
                            "activity-id": "xxxxxxxx".replace(/x/g, () =>
                              ((16 * Math.random()) | 0).toString(16)
                            ),
                            "metasite-id": e.site.metaSiteId,
                            svSession: i.getUserSession(),
                            version: "1.0.0",
                            ...s,
                          }),
                        payload: o({
                          contactUpdate: n.contactUpdate || {},
                          activityInfo: n.info || {},
                          activityType: n.type || "TPA",
                          activityDetails: n.details || {},
                        }),
                      });
                    }
                  ),
                };
              },
            };
          }
        ),
        _ = (0, r.Og)([L.i$], (e) => ({
          getTpaHandlers() {
            return {
              getCtToken() {
                return e.getCtToken();
              },
              getUserSession() {
                return e.getUserSession();
              },
            };
          },
        }));
      var H = i(75396);
      const k = (0, r.Og)(
          [M.$1, H.t7, (0, r.KT)(s.YG, g.UU)],
          (e, t, { routerByPrefix: i }) => ({
            getTpaHandlers() {
              return {
                getCurrentPageNavigationInfo() {
                  const n = e.getRelativeUrl(),
                    { type: a, pageId: o } = t.getCurrentRouteInfo();
                  if ("Static" === a) return { type: "PageLink", pageId: o };
                  const [, r, ...s] = n.split("/");
                  return {
                    type: "DynamicPageLink",
                    routerId: i[r],
                    innerRoute: s.join("/") || "/",
                  };
                },
              };
            },
          })
        ),
        K = (0, r.Og)([d.RV], (e) => ({
          getTpaHandlers() {
            return {
              getAdsOnPage() {
                const t = e.document.getElementById("WIX_ADS");
                if (!t) return {};
                const {
                  height: i,
                  width: n,
                  x: a,
                  y: o,
                } = t.getBoundingClientRect();
                return { top: { height: i, width: n, top: o, left: a } };
              },
            };
          },
        }));
      var G = i(49152),
        $ = i(25874),
        B = i(77739);
      const F = (0, r.Og)(
        [
          (0, r.KT)(s.YG, g.UU),
          (0, r.KT)(s.Gp, l.UU),
          d.TQ,
          H.t7,
          p.Ji,
          $.f,
          l.oJ,
          M.wy,
          S.n,
          (0, r.lq)(E.By),
          (0, r.lq)(B.nU),
          (0, r.lq)(v.tX),
        ],
        (e, t, i, n, a, o, r, s, p, d, l, g) => ({
          getTpaHandlers() {
            const i = (t = s.getLinkUtilsRoutingInfo()) => {
                const {
                  metaSiteId: i,
                  userFileDomainUrl: n,
                  routersConfig: a,
                  isMobileView: o,
                  isPremiumDomain: r,
                } = e;
                return (0, O.W)({
                  routingInfo: t,
                  metaSiteId: i,
                  userFileDomainUrl: n,
                  routersConfig: a,
                  popupPages: d?.getLightboxPages(),
                  multilingualInfo: g?.getMultilingualInfo(),
                  isMobileView: o,
                  isPremiumDomain: r,
                  experiments: p,
                });
              },
              n = async ({
                compId: e,
                state: n,
                skipHistory: a,
                queryParams: r = {},
                disableScrollToTop: p = !0,
              }) => {
                const d = s.getLinkUtilsRoutingInfo(),
                  l = i(d),
                  { widgets: g } = t,
                  c = g[e]?.isSection;
                if (!c) return;
                const u = { type: "TpaPageLink", pageId: d.pageId, path: n },
                  m = `${l.getLinkUrlFromDataItem(u)}${
                    D().isEmpty(r)
                      ? ""
                      : `?appSectionParams=${encodeURIComponent(
                          JSON.stringify(r)
                        )}`
                  }`,
                  h = l.getLinkProps(m);
                await o.navigateTo(h, {
                  skipHistory: a,
                  disableScrollToTop: p,
                });
              };
            return {
              async replaceSectionState(e, { state: t, queryParams: i }) {
                return n({
                  compId: e,
                  skipHistory: !0,
                  state: t,
                  queryParams: i,
                });
              },
              async appStateChanged(e, { state: t }) {
                let r;
                try {
                  r = JSON.parse(t);
                } catch (e) {
                  r = null;
                }
                const p = (t, ...i) => {
                    t[G.s] ? t({ args: i, compId: e }) : t(...i);
                  },
                  d = (t) => {
                    const i = a.get(e).onItemClicked;
                    i &&
                      p(i, {
                        type: "itemClicked",
                        itemIndex: t,
                        item: a.get(e).images[t],
                      });
                  };
                if (!r) return n({ compId: e, skipHistory: !1, state: t });
                {
                  const t = {
                    zoom: () => {
                      const [t] = r.args,
                        { id: i } = a.get(e).images[t];
                      l.openImageZoom(e, i), d(t);
                    },
                    itemClicked: () => {
                      const [e] = r.args;
                      d(e);
                    },
                    itemChanged: () => {
                      const [t] = r.args,
                        i = a.get(e).onCurrentItemChanged;
                      i &&
                        p(i, {
                          type: "imageChanged",
                          itemIndex: t,
                          item: a.get(e).images[t],
                        });
                    },
                    componentReady: () => {
                      a.update({ [e]: { componentReady: !0 } });
                    },
                    navigateToDynamicPage: () => {
                      const [e] = r.args,
                        t = i(),
                        n = (0, O.d)(e)
                          ? e
                          : t.getLinkProps(t.getLinkUrlFromDataItem(e));
                      o.navigateTo(n);
                    },
                    navigateToAnchor: () => {
                      const [e, t] = r.args,
                        n = {
                          type: "PageLink",
                          pageId:
                            "masterPage" === e
                              ? s.getLinkUtilsRoutingInfo().pageId
                              : e,
                          target: "_self",
                        },
                        a = i(),
                        p = a.getLinkUrlFromDataItem(n),
                        d = a.getLinkProps(p),
                        l = Object.assign(d, t);
                      o.navigateTo(l);
                    },
                  }[r.cmd];
                  t && t();
                }
              },
            };
          },
        })
      );
      var V = i(9492),
        z = i(6623);
      const Y = (0, r.Og)(
          [(0, r.KT)(s.YG, g.UU), V.O$, H.t7, (0, r.lq)(M.xt), (0, r.lq)(z.F)],
          ({ debug: e }, t, i, n, a) => ({
            getTpaHandlers() {
              return {
                applicationLoadingStep(
                  t,
                  o,
                  { appDefinitionId: r, tpaCompData: { widgetId: s } = {} }
                ) {
                  if (c.l.isRuntimeCompId(t))
                    return void (
                      e &&
                      console.warn(
                        `applicationLoadingStep is ignored in runtime component ${t}`
                      )
                    );
                  const p = i.getCurrentRouteInfo(),
                    d = Math.round(performance.now()),
                    { stage: l, stageNum: g } = o;
                  a?.logger.log(
                    {
                      appId: r,
                      widget_id: s,
                      instance_id: t,
                      src: 42,
                      evid: 644,
                      tts: d,
                      pid: p ? p.pageId : null,
                      stage: l,
                      stageNum: g,
                      pn: n.getPageNumber(),
                    },
                    { endpoint: "ugc-viewer" }
                  );
                },
              };
            },
          })
        ),
        q = (0, r.Og)(
          [(0, r.KT)(s.YG, g.UU), V.O$, H.t7, (0, r.lq)(M.xt), (0, r.lq)(z.F)],
          ({ debug: e }, t, i, n, a) => ({
            getTpaHandlers() {
              return {
                applicationLoaded(
                  t,
                  o,
                  { appDefinitionId: r, tpaCompData: { widgetId: s } = {} }
                ) {
                  if (c.l.isRuntimeCompId(t))
                    return void (
                      e &&
                      console.warn(
                        `applicationLoaded is ignored in runtime component ${t}`
                      )
                    );
                  const p = i.getCurrentRouteInfo(),
                    d = Math.round(performance.now());
                  a?.logger.log(
                    {
                      appId: r,
                      widget_id: s,
                      instance_id: t,
                      src: 42,
                      evid: 643,
                      tts: d,
                      pid: p ? p.pageId : null,
                      pn: n.getPageNumber(),
                    },
                    { endpoint: "ugc-viewer" }
                  );
                },
              };
            },
          })
        );
      var W = i(19889);
      const j = (0, r.Og)([W.Np, l.oJ], (e, t) => ({
          getTpaHandlers() {
            return {
              async refreshCurrentMember() {
                const i = await e.getMemberDetails(!0);
                i && t.dispatch("MEMBER_DETAILS_UPDATED", () => i);
              },
            };
          },
        })),
        J = (0, r.Og)([a.ir, a.tY], ({ openPopup: e }, t) => {
          const i = (e) => {
            if (t.isModal(e)) {
              const e = new Error("An app can not open a popup from a modal.");
              return (e.name = "Operation not supported"), e;
            }
            return null;
          };
          return {
            getTpaHandlers() {
              return {
                openPopup: (0, R.V)(
                  ["site", "preview"],
                  (t, { url: n, ...a }, { originCompId: o }) => {
                    const r = i(t);
                    return r ? Promise.reject(r) : e(n, a, o);
                  }
                ),
                openPersistentPopup: (0, R.V)(
                  ["site", "preview"],
                  (t, { url: n, ...a }, { originCompId: o }) => {
                    const r = i(t);
                    return r
                      ? Promise.reject(r)
                      : e(n, { ...a, persistent: !0 }, o);
                  }
                ),
              };
            },
          };
        }),
        Q = (0, r.Og)([L.i$], (e) => ({
          getTpaHandlers() {
            return {
              getAppVendorProductId(t, { appDefinitionId: i }) {
                const n = e.getAppInstanceByAppDefId(i)?.replace(/^[^.]+./, "");
                if (!n) return null;
                const a = JSON.parse(atob(n))?.vendorProductId;
                return a || null;
              },
            };
          },
        }));
      var X = i(82658);
      const Z = (e) => (D().isNumber(e) ? e : NaN),
        ee = (e) => D().parseInt((e || "").toString().split("px")[0]),
        te = (e) => {
          const t = { size: 0, unit: "" };
          return (
            D().isNumber(e)
              ? (t.size = e)
              : D().isString(e) &&
                ((t.unit = ((e) => {
                  const t = /(%)$/.exec(e);
                  return t && t[1] ? t[1] : "";
                })(e)),
                (t.size = ((e) => {
                  const t = /^([0-9]+)/.exec(e);
                  return t && t[1] ? parseInt(t[1], 10) : 0;
                })(e))),
            t
          );
        },
        ie = ({ width: e, height: t }, i) =>
          "100%" === t && ("100%" === e || Number(ee(e)) >= i.innerWidth),
        ne = (e, t, i) => {
          const n = (0, X.fU)(t) ? null : t.document.getElementById(i),
            a = n ? n.getBoundingClientRect() : null,
            o = ((e) => {
              let t = 0,
                i = 0;
              if (e && e.offsetParent) {
                let n = e;
                do {
                  (t += n.offsetLeft), (i += n.offsetTop);
                } while ((n = n.offsetParent));
              }
              return { top: i, left: t };
            })(n),
            r = {
              left: o.left,
              top: o.top,
              width: a ? Math.round(a.width) : 0,
              height: a ? Math.round(a.height) : 0,
              actualTop: a ? a.top : 0,
              actualLeft: a ? a.left : 0,
            },
            s = D().defaults(e.position, {
              x: 0,
              y: 0,
              origin: "FIXED",
              placement: "CENTER",
            }),
            p = D().pick(e, "height", "width"),
            d = {
              width: (0, X.fU)(t) ? 0 : t.innerWidth,
              height: (0, X.fU)(t) ? 0 : t.innerHeight,
            },
            l = {
              RELATIVE: () =>
                ((e, t, i, n) => {
                  const a = function (e, t, i) {
                      return e + t / 2 - i / 2;
                    },
                    o = function (e, t, i) {
                      return e - (t + i);
                    },
                    r = function (e, t, i) {
                      return e - (t + i);
                    },
                    s = function (e, t, i) {
                      return e + t / 2 - i / 2;
                    },
                    p = Z(n.height),
                    d = Z(n.width),
                    l = {
                      CENTER: () => ({
                        height: D().min([p, i.height]),
                        width: D().min([d, i.width]),
                        top: s(t.top, t.height, p),
                        left: a(t.left, t.width, d),
                      }),
                      TOP_LEFT: () => ({
                        height: D().min([p, t.top]),
                        width: D().min([d, t.left]),
                        top: t.top - p,
                        left: t.left - d,
                      }),
                      TOP_RIGHT: () => ({
                        height: D().min([p, t.top]),
                        width: D().min([d, r(i.width, t.width, t.left)]),
                        top: t.top - p,
                        left: t.width + t.left,
                      }),
                      TOP_CENTER: () => ({
                        height: D().min([p, t.top]),
                        width: D().min([d, i.width]),
                        top: t.top - p,
                        left: a(t.left, t.width, d),
                      }),
                      CENTER_RIGHT: () => ({
                        height: D().min([p, i.height]),
                        width: D().min([d, r(i.width, t.width, t.left)]),
                        top: s(t.top, t.height, p),
                        left: t.width + t.left,
                      }),
                      CENTER_LEFT: () => ({
                        height: D().min([p, i.height]),
                        width: D().min([d, t.left]),
                        top: s(t.top, t.height, p),
                        left: t.left - d,
                      }),
                      BOTTOM_LEFT: () => ({
                        height: D().min([p, o(i.height, t.top, t.height)]),
                        width: D().min([d, t.left]),
                        top: t.top + t.height,
                        left: t.left - d,
                      }),
                      BOTTOM_RIGHT: () => ({
                        height: D().min([p, o(i.height, t.top, t.height)]),
                        width: D().min([d, r(i.width, t.width, t.left)]),
                        top: t.top + t.height,
                        left: t.width + t.left,
                      }),
                      BOTTOM_CENTER: () => ({
                        height: D().min([p, o(i.height, t.top, t.height)]),
                        width: D().min([d, i.width]),
                        top: t.top + t.height,
                        left: a(t.left, t.width, d),
                      }),
                    }[e.placement](),
                    g = D().max([0, l.top]),
                    c = D().max([0, l.left]);
                  return {
                    position: "absolute",
                    display: "block",
                    width: 0,
                    height: 0,
                    ...l,
                    top: g,
                    left: c,
                  };
                })(s, r, d, p),
              ABSOLUTE: () =>
                ((e, t, i, n) => {
                  const a = Z(n.height),
                    o = Z(n.width),
                    r = {
                      CENTER: () => {
                        const n = D().min([
                            t.actualTop + e.y,
                            i.height - (t.actualTop + e.y),
                          ]),
                          r = D().min([
                            t.actualLeft + e.x,
                            i.width - (t.actualLeft + e.x),
                          ]);
                        return {
                          height: D().min([a, 2 * n]),
                          width: D().min([o, 2 * r]),
                          top: t.top + e.y - a / 2,
                          left: t.left + e.x - o / 2,
                        };
                      },
                      TOP_LEFT: () => ({
                        height: D().min([a, t.actualTop + e.y]),
                        width: D().min([o, t.actualLeft + e.x]),
                        top: t.top + e.y - a,
                        left: t.left + e.x - o,
                      }),
                      TOP_RIGHT: () => ({
                        height: D().min([a, t.actualTop + e.y]),
                        width: D().min([o, i.width - (t.actualLeft + e.x)]),
                        top: t.top + e.y - a,
                        left: t.left + e.x,
                      }),
                      TOP_CENTER: () => {
                        const n = D().min([
                          t.actualLeft + e.x,
                          i.width - (t.actualLeft + e.x),
                        ]);
                        return {
                          height: D().min([a, t.actualTop + e.y]),
                          width: D().min([o, 2 * n]),
                          top: t.top + e.y - a,
                          left: t.left + e.x - o / 2,
                        };
                      },
                      CENTER_RIGHT: () => {
                        const n = D().min([
                          t.actualTop + e.y,
                          i.height - (t.actualTop + e.y),
                        ]);
                        return {
                          height: D().min([a, 2 * n]),
                          width: D().min([o, i.width - (t.actualLeft + e.x)]),
                          top: t.top + e.y - a / 2,
                          left: t.left + e.x,
                        };
                      },
                      CENTER_LEFT: () => {
                        const n = D().min([
                          t.actualTop + e.y,
                          i.height - (t.actualTop + e.y),
                        ]);
                        return {
                          height: D().min([a, 2 * n]),
                          width: D().min([o, t.actualLeft + e.x]),
                          top: t.top + e.y - a / 2,
                          left: t.left + e.x - o,
                        };
                      },
                      BOTTOM_LEFT: () => ({
                        height: D().min([a, i.height - e.y]),
                        width: D().min([o, t.actualLeft + e.x]),
                        top: t.top + e.y,
                        left: t.left + e.x - o,
                      }),
                      BOTTOM_RIGHT: () => ({
                        height: D().min([a, i.height - (t.actualTop + e.y)]),
                        width: D().min([o, i.width - (t.actualLeft + e.x)]),
                        top: t.top + e.y,
                        left: t.left + e.x,
                      }),
                      BOTTOM_CENTER: () => {
                        const n = D().min([
                          t.actualLeft + e.x,
                          i.width - (t.actualLeft + e.x),
                        ]);
                        return {
                          height: D().min([a, i.height - (t.actualTop + e.y)]),
                          width: D().min([o, 2 * n]),
                          top: t.top + e.y,
                          left: t.left + e.x - o / 2,
                        };
                      },
                    }[e.placement](),
                    s = D().max([0, r.top]),
                    p = D().max([0, r.left]);
                  return {
                    position: "absolute",
                    display: "block",
                    width: 0,
                    height: 0,
                    ...r,
                    top: s,
                    left: p,
                  };
                })(s, r, d, p),
              FIXED: () =>
                ((e, t, i) => {
                  const n = {
                      position: "fixed",
                      display: "block",
                      width: i.width,
                      height: i.height,
                    },
                    a = te(i.height);
                  "%" === a.unit
                    ? (a.size = D().min([a.size, 100]))
                    : a.size > t.height && ((a.unit = "%"), (a.size = 100));
                  const o = te(i.width);
                  o.size =
                    "%" === o.unit
                      ? D().min([o.size, 100])
                      : D().min([o.size, t.width]);
                  const r = {
                    CENTER: () => ({
                      marginLeft: o.size / -2 + (o.unit || "px"),
                      marginTop:
                        "%" === a.unit ? 0 : a.size / -2 + (a.unit || "px"),
                      left: "50%",
                      top: "%" === a.unit ? 0 : "50%",
                    }),
                    TOP_LEFT: () => ({ left: "0px", top: "0px" }),
                    TOP_RIGHT: () => ({ right: "0px", top: "0px" }),
                    TOP_CENTER: () => ({
                      marginLeft: o.size / -2 + (o.unit || "px"),
                      top: "0px",
                      left: "50%",
                    }),
                    CENTER_RIGHT: () => ({
                      marginTop:
                        "%" === a.unit ? 0 : a.size / -2 + (a.unit || "px"),
                      top: "%" === a.unit ? 0 : "50%",
                      right: "0px",
                    }),
                    CENTER_LEFT: () => ({
                      marginTop:
                        "%" === a.unit ? 0 : a.size / -2 + (a.unit || "px"),
                      top: "%" === a.unit ? 0 : "50%",
                      left: "0px",
                    }),
                    BOTTOM_LEFT: () => ({ bottom: "0px", left: "0px" }),
                    BOTTOM_RIGHT: () => ({ bottom: "0px", right: "0px" }),
                    BOTTOM_CENTER: () => ({
                      marginLeft: o.size / -2 + (o.unit || "px"),
                      left: "50%",
                      bottom: "0px",
                    }),
                  };
                  return (
                    (n.width = o.size + (o.unit || "px")),
                    (n.height = a.size + (a.unit || "px")),
                    { ...n, ...r[e.placement]() }
                  );
                })(s, d, p),
            };
          return ((e, t, i) => {
            if (ee(e.width) < 10 || ee(e.height) < 10) {
              const e = te(i.height);
              e.size =
                "%" === e.unit
                  ? D().min([e.size, 100])
                  : D().min([e.size, t.height]);
              const n = te(i.width);
              return (
                (n.size =
                  "%" === n.unit
                    ? D().min([n.size, 100])
                    : D().min([n.size, t.height])),
                {
                  position: "fixed",
                  display: "block",
                  width: `${n.size}${n.unit || "px"}`,
                  height: `${e.size}${e.unit || "px"}`,
                  marginLeft: `${n.size / -2}${n.unit || "px"}`,
                  marginTop: `${e.size / -2}${e.unit || "px"}`,
                  left: "50%",
                  top: "50%",
                }
              );
            }
            return e;
          })(l[s.origin](), d, p);
        };
      var ae = i(73896);
      const oe = (0, r.Og)(
          [p.Ji, d.RV, ae.j, (0, r.KT)(s.YG, g.UU), a.tY],
          (e, t, i, n, a) => {
            const o = (o, r) => {
              const { options: s, originCompId: p } = e.get(o),
                d = { ...s, ...r },
                l = a.isModal(o)
                  ? ((e) =>
                      ["height", "width"].reduce((t, i) => {
                        const n = e[i];
                        if (!D().isNil(n)) {
                          const { unit: e, size: a } = te(n);
                          e || (t[i] = a);
                        }
                        return t;
                      }, {}))(r)
                  : ne(d, t, p);
              e.update({ [o]: { styleOverrides: l } }),
                i.setSiteScrollingBlocked(n.isMobileView && ie(l, t), o);
            };
            return {
              getTpaHandlers() {
                return {
                  async resizeWindow(t, i, { tpaCompData: n }) {
                    if (c.l.isRuntimeCompId(t)) o(t, i);
                    else if (n?.isPinned) {
                      const n = {
                        width: D().isNumber(i.width) ? `${i.width}px` : i.width,
                        height: D().isNumber(i.height)
                          ? `${i.height}px`
                          : i.height,
                      };
                      D().isEqual(n, e.get(t).styleOverrides) ||
                        e.update({ [t]: { styleOverrides: n } });
                    }
                  },
                  heightChanged(t, i, { tpaCompData: n }) {
                    if (c.l.isRuntimeCompId(t)) o(t, { height: i.height });
                    else {
                      if (0 === i.height && !n?.isPinned) return;
                      e.update({
                        [t]: {
                          heightOverride: Math.round(i.height),
                          heightOverflow: Boolean(i.overflow),
                        },
                      });
                    }
                  },
                };
              },
            };
          }
        ),
        re = (0, r.Og)([], () => ({
          getTpaHandlers() {
            return {
              onReady() {
                return Promise.resolve();
              },
            };
          },
        }));
      var se = i(86046);
      class pe extends Error {
        constructor(e) {
          super(e), (this.name = "HandlerError");
        }
      }
      const de = (0, r.Og)(
          [
            (0, r.KT)(s.YG, g.UU),
            (0, r.KT)(s._K, l.UU),
            $.f,
            M.wy,
            g.V5,
            S.n,
            (0, r.lq)(E.By),
            (0, r.lq)(v.tX),
            (0, r.lq)(se.e$),
            (0, r.lq)(y.a),
          ],
          (
            e,
            t,
            n,
            a,
            { getTpaSectionByAppDefinitionId: o },
            r,
            s,
            p,
            d,
            l
          ) => {
            const g = Object.entries(t.pagesData);
            return {
              getTpaHandlers: () => ({
                async navigateToSectionPage(c, u, { appDefinitionId: m }) {
                  const {
                      metaSiteId: I,
                      userFileDomainUrl: f,
                      routersConfig: T,
                      isMobileView: w,
                      isPremiumDomain: y,
                    } = e,
                    P = (0, O.W)({
                      routingInfo: a.getLinkUtilsRoutingInfo(),
                      metaSiteId: I,
                      userFileDomainUrl: f,
                      routersConfig: T,
                      popupPages: s?.getLightboxPages(),
                      multilingualInfo: p?.getMultilingualInfo(),
                      isMobileView: w,
                      isPremiumDomain: y,
                      experiments: r,
                    }),
                    {
                      sectionIdentifier: {
                        sectionId: U,
                        noTransition: C = !1,
                        queryParams: S = {},
                        appDefinitionId: M,
                        state: E,
                      } = {},
                      state: v,
                    } = u,
                    b = M || m;
                  if (!b) throw new pe("Component was not found.");
                  const x = v || E;
                  let A = "";
                  try {
                    A = (({ appDefinitionId: i, sectionId: n }) => {
                      const a = g.reduce(
                          (e, [t, i]) => (
                            i.appDefinitionId &&
                              (e[i.appDefinitionId] ||
                                (e[i.appDefinitionId] = {}),
                              (e[i.appDefinitionId][i.tpaPageId] = t)),
                            e
                          ),
                          {}
                        ),
                        o = D()(t.pagesData)
                          .filter((e) => !!e.appDefinitionId)
                          .groupBy("appDefinitionId")
                          .mapValues((e) => e.map((e) => e.id))
                          .value(),
                        r = e.appsClientSpecMapData[i];
                      if (!r)
                        throw new pe(
                          `Application with appDefinitionId "${i}" was not found on the site.`
                        );
                      const s = o[i];
                      if (!s || 0 === s.length)
                        throw new pe(
                          `Page with app "${r.appDefinitionName}" was not found.`
                        );
                      const p = n ? a[i][n] : null;
                      if (n && !p)
                        throw new pe(
                          `App page with sectionId "${n}" was not found.`
                        );
                      return p || s[0];
                    })({ appDefinitionId: b, sectionId: U });
                  } catch (e) {
                    if (e instanceof pe)
                      return { error: { message: e.message } };
                    throw e;
                  }
                  const L = { type: "TpaPageLink", pageId: A, path: x },
                    R =
                      (await (async (e) => {
                        const t = l?.urlMappings;
                        if (t) {
                          const { buildCustomizedUrl: n } = await Promise.all([
                              i.e(671),
                              i.e(6510),
                            ]).then(i.bind(i, 4669)),
                            {
                              key: a,
                              variables: o,
                              options: r,
                            } = e?.sectionIdentifier?.customizeTarget
                              ?.customUrlData || {};
                          if (a && o) return n(t, a, o, r);
                        }
                      })(u)) || P.getLinkUrlFromDataItem(L),
                    N = `${R}${
                      D().isEmpty(S)
                        ? ""
                        : `?appSectionParams=${encodeURIComponent(
                            JSON.stringify(S)
                          )}`
                    }`,
                    _ = P.getLinkProps(N);
                  C && d && d.disableNextTransition();
                  if (!(await n.navigateTo(_))) {
                    if (
                      (console.warn(
                        "You have invoked the navigateToSectionPage() API but you are already on the section page. Please use the pushState() API instead."
                      ),
                      !1 === u.sectionIdentifier?.shouldRefreshIframe)
                    )
                      return h.Zq;
                    const e = o(b);
                    e && e.rebuildSrc();
                  }
                  return h.Zq;
                },
              }),
            };
          }
        ),
        le = (0, r.Og)([d.RV, (0, r.KT)(s.Gp, l.UU)], (e, t) => ({
          getTpaHandlers() {
            return {
              boundingRectAndOffsets(i) {
                const n = {
                    offsets: { x: 0, y: 0 },
                    rect: {
                      left: 0,
                      right: 0,
                      top: 0,
                      bottom: 0,
                      height: 0,
                      width: 0,
                    },
                    scale: t.siteScale,
                  },
                  a = e.document.getElementById(i);
                if (!a) return n;
                const o = (() => {
                    if (!t.isFixedHeader) return 0;
                    const i = e.document.getElementById("SITE_HEADER");
                    return (i && i.getBoundingClientRect().height) || 0;
                  })(),
                  r = a.getBoundingClientRect();
                return (
                  (n.offsets = {
                    x: r.left + e.scrollX,
                    y: r.top + e.scrollY - o,
                  }),
                  (n.rect = D()(r)
                    .pick(["left", "right", "top", "bottom", "height", "width"])
                    .mapValues((e) => Math.floor(e))
                    .value()),
                  (n.rect.top -= o),
                  n
                );
              },
            };
          },
        }));
      var ge = i(12457);
      const ce = (0, r.Og)(
          [(0, r.KT)(s.Gp, l.UU), ge.Tf, d.Ht],
          ({ widgets: e }, t, i) => ({
            getTpaHandlers() {
              return {
                setPageMetadata: (0, R.V)(
                  ["site"],
                  async (n, a, { originCompId: o }) => {
                    if (!e[o] || !e[o].isSection) {
                      const e =
                        "Setting a page meta data is possible only to TPA Sections and MultiSections";
                      return (
                        i.captureError(new Error(e), {
                          tags: { feature: "tpa" },
                        }),
                        { error: { message: e } }
                      );
                    }
                    return (
                      await t.setTPAOverrides(a), await t.renderSEO(), null
                    );
                  }
                ),
              };
            },
          })
        ),
        ue = (0, r.Og)([a.tY], (e) => ({
          getTpaHandlers() {
            return {
              openModal: (0, R.V)(
                ["site", "preview"],
                (t, { url: i, theme: n, height: a, width: o }) =>
                  e.openModal(i, { width: o, height: a, theme: n }, t)
              ),
            };
          },
        })),
        me = (0, r.Og)(
          [
            (0, r.KT)(s.YG, g.UU),
            $.f,
            M.wy,
            p.eZ,
            S.n,
            (0, r.lq)(E.By),
            (0, r.lq)(v.tX),
            (0, r.lq)(se.e$),
          ],
          (e, t, i, n, a, o, r, s) => {
            const p = (t) => {
                const {
                    metaSiteId: n,
                    userFileDomainUrl: s,
                    routersConfig: p,
                    isMobileView: d,
                    isPremiumDomain: l,
                  } = e,
                  g = (0, O.W)({
                    routingInfo: i.getLinkUtilsRoutingInfo(),
                    metaSiteId: n,
                    userFileDomainUrl: s,
                    routersConfig: p,
                    popupPages: o?.getLightboxPages(),
                    multilingualInfo: r?.getMultilingualInfo(),
                    isMobileView: d,
                    isPremiumDomain: l,
                    experiments: a,
                  }),
                  c = g.getLinkUrlFromDataItem(t);
                return g.getLinkProps(c);
              },
              d = ({ pageId: e, anchorId: n, noTransition: a }) => {
                const o = (({ pageId: e, anchorId: t }) => {
                  const n = p({ type: "PageLink", pageId: e, target: "_self" });
                  return (
                    t &&
                      (i.getLinkUtilsRoutingInfo().pageId === e
                        ? (n.anchorCompId = t)
                        : (n.anchorDataId = t)),
                    n
                  );
                })({ pageId: e, anchorId: n });
                return a && s && s.disableNextTransition(), t.navigateTo(o);
              };
            return {
              getTpaHandlers() {
                return {
                  navigateToPage(
                    e,
                    { pageId: t, anchorId: i, noTransition: n }
                  ) {
                    d({ pageId: t, anchorId: i, noTransition: n });
                  },
                  navigateTo(e, { link: i }) {
                    if (i.type === h.rm.EXTERNAL_LINK) return;
                    const n = p(i);
                    t.navigateTo(n);
                  },
                  async navigateToAnchor(e, { anchorId: t }) {
                    if (
                      !(await d({
                        pageId: i.getLinkUtilsRoutingInfo().pageId,
                        anchorId: t,
                      }))
                    )
                      throw new Error(
                        `anchor with id "${t}" was not found on the current page.`
                      );
                    return h.Zq;
                  },
                  async navigateToComponent(
                    e,
                    { compId: t, pageId: n, noPageTransition: a }
                  ) {
                    const o = n || i.getLinkUtilsRoutingInfo().pageId;
                    if (!(await d({ pageId: o, anchorId: t, noTransition: a })))
                      throw new Error(
                        `Page id "${o}" does not contain the component id "${t}".`
                      );
                    return h.Zq;
                  },
                };
              },
            };
          }
        ),
        he = (0, r.Og)(
          [(0, r.KT)(s.YG, g.UU)],
          ({ appsClientSpecMapData: e }) => ({
            getTpaHandlers() {
              return {
                getApplicationFields(t, { appDefinitionId: i }) {
                  return e[i].appFields;
                },
              };
            },
          })
        );
      var Ie = i(95017),
        fe = i(64537);
      const Te = (0, r.Og)([Ie.j, l.oJ], (e, t) => ({
          getTpaHandlers() {
            return {
              removeEventListener(i, { eventKey: n }, { appDefinitionId: a }) {
                n.startsWith(fe.iZ)
                  ? e.unsubscribe(a, i, n)
                  : t.unregister(n, i);
              },
            };
          },
        })),
        we = (0, r.Og)([Ie.j], (e) => ({
          getTpaHandlers() {
            return {
              publish(t, i, { appDefinitionId: n }) {
                e.publish(n, t, i);
              },
            };
          },
        })),
        ye = (0, r.Og)([L.i$, l.oJ], (e, t) => ({
          getTpaHandlers() {
            return {
              async revalidateSession(i, n, { appDefinitionId: a }) {
                await e.loadNewSession();
                const o = { instance: e.getAppInstanceByAppDefId(a) };
                return (
                  t.dispatch("INSTANCE_CHANGED", () => o, {
                    appDefinitionId: a,
                  }),
                  o
                );
              },
            };
          },
        }));
      var Pe = i(66340),
        Ue = i(16638);
      const Ce = (0, r.Og)(
          [
            (0, r.KT)(s._K, l.UU),
            (0, r.KT)(s.Gp, l.UU),
            l._w,
            Ue.A,
            p.Ji,
            Pe.aR,
          ],
          (e, { widgets: t }, i, n, a, { getFontsConfig: o }) => ({
            getTpaHandlers() {
              return {
                appIsAlive(r, s, { originCompId: p }) {
                  const {
                    siteColors: d,
                    isVisualFocusEnabled: l,
                    siteTextPresets: g,
                  } = e;
                  a.update({ [r]: { sentAppIsAlive: !0 } }),
                    i.reportTpaLoadEnd(r);
                  const c = t[p] || {
                    style: {
                      colors: {},
                      numbers: {},
                      booleans: {},
                      fonts: {},
                      googleFontsCssUrl: "",
                      uploadFontFaces: "",
                    },
                  };
                  return {
                    fonts: o(),
                    commonConfig: n.getCommonConfig(),
                    isVisualFocusEnabled: l,
                    siteColors: d,
                    siteTextPresets: g,
                    ...c,
                  };
                },
              };
            },
          })
        ),
        De = (0, r.Og)([l.oJ, Ie.j], (e, t) => ({
          getTpaHandlers() {
            return {
              registerEventListener(
                i,
                { eventKey: n, receivePastEvents: a = !1 },
                {
                  callId: o,
                  tpa: r,
                  tpaCompData: { widgetId: s = "" } = {},
                  appDefinitionId: p,
                }
              ) {
                if (n.startsWith(fe.iZ))
                  t.handleIframeSubscribe(p, i, {
                    eventKey: n,
                    isPersistent: a,
                    callId: o,
                  });
                else {
                  const t = (e, t) => {
                    r.postMessage(
                      JSON.stringify({
                        intent: "addEventListener",
                        eventType: e,
                        params: t,
                      }),
                      "*"
                    );
                  };
                  e.register(n, i, t, { widgetId: s, appDefinitionId: p });
                }
              },
            };
          },
        })),
        Se = (0, r.Og)([a.tY, a.ir], (e, t) => ({
          getTpaHandlers() {
            return {
              closeWindow: (i, n) =>
                T({ tpaModal: e, tpaPopup: t, compId: i, onCloseMessage: n }),
            };
          },
        })),
        Oe = (0, r.Og)([H.t7], (e) => ({
          getTpaHandlers() {
            return {
              getCurrentPageId() {
                return e.getCurrentRouteInfo().pageId;
              },
            };
          },
        }));
      var Me = i(54157),
        Ee = i(83407);
      const ve = (0, r.Og)(
          [d.RV, S.n, Me.n, (0, r.lq)(Ee.Qw)],
          (e, t, i, n) => ({
            getTpaHandlers() {
              return {
                async scrollTo(a, { x: o, y: r, scrollAnimation: s }) {
                  if (!n) return;
                  const p = s && !i,
                    d = t && t["specs.thunderbolt.useNativeScrollTo"];
                  if (p)
                    if (d) e.scrollTo({ left: o, top: r, behavior: "smooth" });
                    else {
                      const t = 1,
                        i = 0;
                      (await n.getInstance()).runAnimationOnElements(
                        "BaseScroll",
                        [e],
                        t,
                        i,
                        {
                          y: r,
                          x: o,
                          callbacks: { onComplete: () => Promise.resolve() },
                        }
                      );
                    }
                  else e.scrollTo(o, r);
                },
              };
            },
          })
        ),
        be = (0, r.Og)([d.RV], (e) => ({
          getTpaHandlers() {
            return {
              scrollBy(t, { x: i, y: n }) {
                e.scrollBy(i, n);
              },
            };
          },
        })),
        xe = (0, r.Og)([(0, r.KT)(s.Gp, l.UU)], ({ widgets: e }) => ({
          getTpaHandlers() {
            return {
              getExternalId(t, i, { originCompId: n }) {
                return Promise.resolve(e[n].externalId);
              },
            };
          },
        })),
        Ae = (0, r.Og)([(0, r.KT)(s.Gp, l.UU), S.n], (e, t) => ({
          getTpaHandlers() {
            const i = t["specs.thunderbolt.deprecateAppId"];
            return {
              getValue(t, { key: n, scope: a }, { originCompId: o }) {
                const { widgets: r, appPublicData: s } = e,
                  { appDefinitionId: p, applicationId: d } = r[o],
                  l = "APP" === a ? s[i ? p : d] : r[o].componentPublicData;
                return l && l[n]
                  ? { [n]: l[n] }
                  : { error: { message: `key ${n} not found in ${a} scope` } };
              },
            };
          },
        })),
        Le = (0, r.Og)([(0, r.KT)(s.Gp, l.UU), S.n], (e, t) => {
          const i = t["specs.thunderbolt.deprecateAppId"];
          return {
            getTpaHandlers() {
              function t(t) {
                const { widgets: n, appPublicData: a } = e,
                  { appDefinitionId: o, applicationId: r } = n[t];
                return {
                  APP: a[i ? o : r],
                  COMPONENT: n[t].componentPublicData,
                };
              }
              return {
                getPublicData(e, i, { originCompId: n }) {
                  return t(n);
                },
                getValues(e, i, { originCompId: n }) {
                  const { scope: a, keys: o } = i,
                    r = t(n);
                  return D().pickBy(r[a], (e, t) => o.includes(t));
                },
              };
            },
          };
        }),
        Re = (0, r.Og)([(0, r.KT)(s.Gp, l.UU)], (e) => ({
          getTpaHandlers() {
            return {
              getStyleId(t, i, { originCompId: n }) {
                return e.widgets[n].styleId;
              },
            };
          },
        })),
        Ne = (0, r.Og)([(0, r.KT)(s.YG, g.UU)], (e) => ({
          getTpaHandlers() {
            return {
              getViewMode() {
                return { editMode: e.viewMode };
              },
            };
          },
        })),
        _e = (0, r.Og)(
          [(0, r.KT)(s.YG, g.UU), (0, r.KT)(s.Gp, l.UU)],
          ({ widgetsClientSpecMapData: e }, { pageId: t }) => ({
            getTpaHandlers() {
              return {
                getComponentInfo(
                  i,
                  n,
                  { tpaCompData: { widgetId: a = "" } = {} }
                ) {
                  const o = "masterPage" === t;
                  return {
                    compId: i,
                    showOnAllPages: o,
                    pageId: o ? "" : t,
                    tpaWidgetId: e[a]?.tpaWidgetId,
                    appPageId: e[a]?.appPage?.id || "",
                  };
                },
              };
            },
          })
        ),
        He = (0, r.Og)([(0, r.KT)(s._K, l.UU)], ({ pagesData: e }) => ({
          getTpaHandlers: () => ({
            isAppSectionInstalled(
              t,
              { sectionId: i, appDefinitionId: n },
              { appDefinitionId: a }
            ) {
              const o = D().filter(e, { appDefinitionId: n || a });
              return D().some(o, { tpaPageId: i });
            },
          }),
        })),
        ke = (0, r.Og)([l.iQ], ({ getSiteMap: e }) => ({
          getTpaHandlers() {
            return {
              async getSitePages(t, { includePagesUrl: i }) {
                return (await e()).map((e) => ({
                  hide: e.hidden,
                  id: D().isString(e.pageId) && e.pageId.replace("#", ""),
                  isHomepage: e.isHomePage || !1,
                  title: e.title,
                  ...(i && { url: e.url }),
                }));
              },
              getSiteMap: e,
            };
          },
        })),
        Ke = (0, r.Og)(
          [M.$1, H.t7, (0, r.KT)(s._K, l.UU), (0, r.KT)(s.YG, g.UU), d.RV],
          (e, t, { pagesData: i }, { externalBaseUrl: n }, a) => ({
            getTpaHandlers() {
              return {
                siteInfo() {
                  const { pageId: o } = t.getCurrentRouteInfo(),
                    { href: r } = e.getParsedUrl(),
                    { siteDescription: s, siteKeywords: p, title: d } = i[o];
                  return {
                    siteDescription: s,
                    siteKeywords: p,
                    baseUrl: n,
                    pageTitle: a.document.title,
                    pageTitleOnly: d,
                    referer: a.document.referrer,
                    url: r,
                  };
                },
              };
            },
          })
        ),
        Ge = (0, r.Og)(
          [(0, r.KT)(s.YG, g.UU), (0, r.KT)(s._K, l.UU)],
          ({ externalBaseUrl: e, pageIdToPrefix: t }, { pagesData: i }) => ({
            getTpaHandlers() {
              return {
                getSectionUrl(
                  n,
                  { sectionIdentifier: a },
                  { appClientSpecMapData: o }
                ) {
                  const r = D().find(i, { tpaPageId: a });
                  if (r?.id) {
                    const i = t[r.id],
                      n = i ? `${i}/${r.pageUriSEO}` : r.pageUriSEO;
                    return {
                      url: `${e}/${n}`,
                      prefix: i || "",
                      relativeUrl: n,
                    };
                  }
                  return {
                    error: {
                      message: `Page with app "${o?.appDefinitionName}" was not found.`,
                    },
                  };
                },
              };
            },
          })
        ),
        $e = (0, r.Og)([l.g_], (e) => ({
          getTpaHandlers() {
            return {
              async setFullScreenMobile(t, { isFullScreen: i }) {
                e.setFullScreenMobile(t, i);
              },
            };
          },
        })),
        Be = () => {},
        Fe = (0, r.Og)([], () => ({
          getTpaHandlers() {
            return {
              getSiteRevision: Be,
              getDeviceType: Be,
              toWixDate: Be,
              getCompId: Be,
              getOrigCompId: Be,
              getWidth: Be,
              isInModal: Be,
              getLocale: Be,
              getCacheKiller: Be,
              getTarget: Be,
              getInstanceId: Be,
              getSignDate: Be,
              getUid: Be,
              getPermissions: Be,
              getIpAndPort: Be,
              getDemoMode: Be,
              getInstanceValue: Be,
              getSiteOwnerId: Be,
              getImageUrl: Be,
              getResizedImageUrl: Be,
              getAudioUrl: Be,
              getDocumentUrl: Be,
              getSwfUrl: Be,
              getPreviewSecureMusicUrl: Be,
              getStyleParams: Be,
              getStyleColorByKey: Be,
              getColorByreference: Be,
              getSiteTextPresets: Be,
              getFontsSpriteUrl: Be,
              getStyleFontByKey: Be,
              getStyleFontByReference: Be,
              getSiteColors: Be,
              getViewModeInternal: Be,
              postMessage: Be,
              getEditorFonts: Be,
              setUILIBParamValue: Be,
              removeAppMetadata: Be,
              setAppMetadata: Be,
              setColorParam: Be,
              setStyleParam: Be,
              resizeComponent: Be,
              setValue: Be,
              isSupported: Be,
              appEngaged: Be,
              getInstalledInstance: Be,
              isApplicationInstalled: Be,
              isCustomApplicationPermissionsGranted: Be,
              isGroupApplicationPermissionsGranted: Be,
              setFullWidth: Be,
            };
          },
        }));
      var Ve = i(8145);
      const ze = (0, r.Og)([(0, r.lq)(Ve.U)], (e) => ({
          getTpaHandlers() {
            return { reportVisitorActivity: e ? e.reportActivity : () => {} };
          },
        })),
        Ye = (0, r.Og)([p.eZ, p.Ji], (e, t) => ({
          getTpaHandlers() {
            return {
              getCurrentPageAnchors() {
                return D()(e.getEntireStore())
                  .pickBy(({ componentType: e }) => "Anchor" === e)
                  .mapValues((e, i) => ({ id: i, title: t.get(i).name }))
                  .values()
                  .sortBy(({ id: e }) => {
                    switch (e) {
                      case "SCROLL_TO_TOP":
                        return 0;
                      case "SCROLL_TO_BOTTOM":
                        return 1;
                      default:
                        return 2;
                    }
                  })
                  .value();
              },
            };
          },
        }));
      var qe = i(21344);
      const We = (e, t, i) => ({
          error: { errorCode: e, message: t, error: i },
        }),
        je = "BAD_REQUEST_ERROR",
        Je = "WIX_ERROR",
        Qe =
          (e) =>
          (...t) =>
            window.ApplePaySession
              ? "function" == typeof e
                ? e(...t)
                : void 0
              : { error: { errorCode: "APPLE_PAY_IS_NOT_AVAILABLE_ERROR" } },
        Xe = (0, r.Og)([d.TQ], ({ siteAssets: e }) => ({
          getTpaHandlers() {
            return {
              applePayInvokeMethod: Qe(async (e, t) => {
                if (!t.methodName) return We(je);
                switch (t.methodName) {
                  case "canMakePayments":
                    try {
                      return {
                        result: window.ApplePaySession.canMakePayments(),
                      };
                    } catch (e) {
                      return We(
                        Je,
                        "ApplePaySession.canMakePayments() failed",
                        e
                      );
                    }
                  case "supportsVersion":
                    try {
                      return {
                        result: window.ApplePaySession.supportsVersion(
                          t.payload.version
                        ),
                      };
                    } catch (e) {
                      return We(
                        Je,
                        `ApplePaySession.supportsVersion(${t.payload.version}) failed`,
                        e
                      );
                    }
                  default:
                    return We(je);
                }
              }),
              applePayStartSession: Qe(
                async (
                  t,
                  { paymentRequest: i, applePayVersion: n, callbackApiId: a },
                  o
                ) => {
                  try {
                    const t = new window.ApplePaySession(n, i),
                      r = await (0, qe.pQ)(e.clientTopology.moduleRepoUrl),
                      s = window.document.querySelector(
                        `#${o.originCompId} > iframe`
                      );
                    if (!s)
                      return We(
                        Je,
                        `Can not find a TPA iframe with id: ${o.originCompId}`
                      );
                    const p = await r.api.request(a, { target: s });
                    (t.onvalidatemerchant = async (e) => {
                      const i = await p.onValidateMerchant({
                        validationURL: e.validationURL,
                      });
                      return t.completeMerchantValidation(i);
                    }),
                      (t.onshippingcontactselected = async (e) => {
                        const i = await p.onShippingContactSelected({
                          shippingContact: e.shippingContact,
                        });
                        return (
                          Array.isArray(i.errors) &&
                            (i.errors = i.errors.map((e) => {
                              return (
                                (t = e),
                                new window.ApplePayError(
                                  t.code,
                                  t.contactField,
                                  t.message
                                )
                              );
                              var t;
                            })),
                          t.completeShippingContactSelection(i)
                        );
                      }),
                      (t.onshippingmethodselected = async (e) => {
                        const i = await p.onShippingMethodSelected({
                          shippingMethod: e.shippingMethod,
                        });
                        return t.completeShippingMethodSelection(i);
                      }),
                      (t.onpaymentauthorized = async (e) => {
                        const i = await p.onPaymentAuthorized({
                          payment: e.payment,
                        });
                        return t.completePayment(i);
                      }),
                      (t.oncancel = async () => await p.onCancel());
                    const { canceled: d } = await p.onClick();
                    if (d) return;
                    t.begin();
                  } catch (e) {
                    return We(Je, e?.message, e);
                  }
                }
              ),
            };
          },
        })),
        Ze = [
          Fe,
          Ce,
          De,
          Se,
          Oe,
          ve,
          be,
          xe,
          Ae,
          Le,
          ce,
          ye,
          Ne,
          Re,
          _e,
          He,
          Ke,
          we,
          Te,
          ke,
          (0, r.Og)([H.t7], (e) => ({
            getTpaHandlers() {
              return {
                getRouterPublicData() {
                  return (
                    e.getCurrentRouteInfo()?.dynamicRouteData?.publicData ?? {}
                  );
                },
              };
            },
          })),
          he,
          ue,
          me,
          j,
          Ge,
          le,
          Q,
          oe,
          re,
          de,
          J,
          $e,
          ze,
          F,
          q,
          Y,
          K,
          _,
          k,
          x,
          N,
          b,
          Ye,
          U,
          P,
          w,
          Xe,
        ],
        et = {
          STATE_CHANGED: "STATE_CHANGED",
          INSTANCE_CHANGED: "INSTANCE_CHANGED",
          PAGE_NAVIGATION: "PAGE_NAVIGATION",
          MEMBER_DETAILS_UPDATED: "MEMBER_DETAILS_UPDATED",
          CONSENT_POLICY_UPDATE: "CONSENT_POLICY_UPDATE",
          SCROLL: "SCROLL",
          QUICK_ACTION_TRIGGERED: "QUICK_ACTION_TRIGGERED",
          COMMON_CONFIG_UPDATE: "COMMON_CONFIG_UPDATE",
        },
        tt = (0, r.Og)(
          [(0, r.KT)(s.wk, l.UU), (0, r.KT)(s.Gp, l.UU), L.i$],
          (e, t, i) => {
            const n = (t, i, n = () => !0) => {
              D().forEach(e.get().registry[t], (e, a) => {
                if (!e) return;
                const { listener: o, ...r } = e,
                  s =
                    ((p = n),
                    D().isFunction(p)
                      ? p
                      : (e) => {
                          const [t] = Object.keys(p);
                          return e[t] === p[t];
                        });
                var p;
                const d = { compId: a, ...r };
                s(d) && o(t, i(d));
              });
            };
            return (
              ((e) => {
                e.update((e) => D().merge({}, e, { registry: {} }));
              })(e),
              {
                pageDidMount() {
                  return i.addLoadNewSessionCallback(
                    ({ results: { instances: e }, reason: t }) => {
                      "expiry" === t &&
                        n("INSTANCE_CHANGED", ({ appDefinitionId: t }) => ({
                          instance: e[t],
                        }));
                    }
                  );
                },
                register(i, n, a, o) {
                  ((e) => e in et)(i) &&
                    e.update((e) =>
                      D().merge({}, e, {
                        registry: {
                          [i]: { [n]: { ...o, pageId: t.pageId, listener: a } },
                        },
                      })
                    );
                },
                unregister(t, i) {
                  e.update((e) => D().set(e, ["registry", t, i], null));
                },
                dispatch: n,
              }
            );
          }
        );
      var it = i(19110);
      const nt = (0, r.Og)([l.sy, L.i$, d.RV, it.M, d.HW], (e, t, i, n, a) => {
        const o = t.addLoadNewSessionCallback(e.refreshAllPopups),
          r = () => {
            o(), e.closeNonPersistentPopups();
          };
        return {
          ...e,
          init() {
            n.registerToPageDidUnmount(r);
          },
          pageDidMount() {
            return r;
          },
          async openPopup(...t) {
            if (!(0, X.fU)(i)) return await a, e.openPopup(...t);
          },
        };
      });
      var at = i(39218);
      const ot = "tpapopup",
        rt = (0, r.Og)(
          [
            p.Ji,
            p.eZ,
            (0, r.KT)(s.wk, l.UU),
            (0, r.KT)(s.YG, g.UU),
            (0, r.KT)(s._K, l.UU),
            (0, r.KT)(s.Gp, l.UU),
            L.i$,
            d.RV,
            ae.j,
            at.DR,
            g.FG,
            g.XM,
            Ie.j,
          ],
          (e, t, i, n, a, o, r, s, p, d, l, g, u) => {
            const m = {},
              h = (e) => {
                i.update((t) => ({
                  ...t,
                  tpaPopup: {
                    persistentPopups: e,
                    popups: t?.tpaPopup?.popups || {},
                  },
                }));
              },
              I = (e) => {
                i.update((t) => ({
                  ...t,
                  tpaPopup: {
                    popups: e,
                    persistentPopups: t?.tpaPopup?.persistentPopups || {},
                  },
                }));
              },
              f = () => D().get(i.get(), ["tpaPopup", "popups"], {}),
              T = () => D().get(i.get(), ["tpaPopup", "persistentPopups"], {}),
              w = new RegExp(c.l.buildRuntimeCompId(`${ot}-[0-9]+`, ".+"));
            return {
              isPopup(e) {
                return w.test(e);
              },
              refreshAllPopups: () => {
                Object.values(T()).forEach(({ refreshPopUp: e }) => e()),
                  Object.values(m).forEach(({ refreshPopUp: e }) => e());
              },
              closeNonPersistentPopups: () =>
                Object.values(m).forEach(({ closePopup: e }) => {
                  e();
                }),
              openPopup(i, r, w) {
                const {
                    isMobileView: y,
                    isMobileDevice: P,
                    previewMode: U,
                    viewMode: C,
                  } = n,
                  { masterPageTpaComps: S, isResponsive: O } = a,
                  { widgets: M, pageId: E } = o;
                return new Promise(async (n) => {
                  const a = c.l.buildRuntimeCompId(
                      `${ot}-${Date.now()}`,
                      c.l.getOriginCompId(w)
                    ),
                    o = (w && t.getContextIdOfCompId(w)) || d;
                  g.registerTpasForContext({ contextId: o, pageId: E }, [a]);
                  const v = (e) => {
                      if (r.persistent) {
                        const e = T();
                        delete e[a], h(e);
                      } else delete m[a], I(D().omit(f(), a));
                      t.removeComponentFromDynamicStructure(a),
                        p.setSiteScrollingBlocked(!1, a),
                        r.persistent || u.clearListenersByCompId(a),
                        n(e);
                    },
                    b = (e) => /^0(?:px|%)?$/.test(`${e}`),
                    x =
                      P && U && !b(r.width) && !b(r.height)
                        ? {
                            position: "fixed",
                            width: `${O ? s.innerWidth : 319}px`,
                            height: `${s.innerHeight}px`,
                            marginLeft: 0,
                            marginTop: 0,
                            boxShadow: "none",
                            left: "50%",
                            transform: "translateX(-50%)",
                            top: 0,
                          }
                        : {},
                    A = { ...ne(r, s, w), ...x },
                    L = () => {
                      const e = M[w] || S[w];
                      return l.buildSrc(a, E, e, i, {
                        extraQueryParams: {
                          isInPopup: "true",
                          origCompId: w,
                          viewMode: C,
                        },
                      });
                    },
                    R = {
                      options: r,
                      originCompId: w,
                      src: L(),
                      styleOverrides: A,
                      isBareTheme: "BARE" === r.theme,
                      closePopup: v,
                    };
                  e.update({ [a]: R }),
                    p.setSiteScrollingBlocked(y && ie(A, s), a),
                    await t.addComponentToDynamicStructure(a, {
                      components: [],
                      componentType: "TPAPopup",
                    });
                  const N = {
                    isPersistent: r.persistent,
                    closePopup: v,
                    refreshPopUp: () => {
                      (M[w] || S[w]) && e.update({ [a]: { src: L() } });
                    },
                  };
                  N.isPersistent
                    ? h({ ...T(), [a]: N })
                    : ((m[a] = N), I({ ...f(), [a]: N }));
                });
              },
              closePopup(e, t) {
                const i = T()[e] || f()[e];
                i && i.closePopup(t);
              },
              getOpenedPopups() {
                return { ...T(), ...m };
              },
            };
          }
        ),
        st = (0, r.Og)([g.mV], (e) => ({
          getTpaHandlers() {
            return {
              waitForWixCodeWorkerToBeReady: async () => (
                await e.waitForPublicApiReady(), {}
              ),
            };
          },
        }));
      var pt = i(98323);
      const dt = (e, t) => {
          if ((0, X.fU)(e)) return;
          const i = document.getElementById("site-root");
          i &&
            (t
              ? (i.style.setProperty("overflow-y", "hidden"),
                i.style.setProperty("height", "0"))
              : (i.style.removeProperty("overflow-y"),
                i.style.removeProperty("height")));
        },
        lt = "tpaModal",
        gt = (0, r.Og)(
          [
            (0, r.KT)(s.YG, g.UU),
            (0, r.KT)(s._K, l.UU),
            (0, r.KT)(s.Gp, l.UU),
            (0, r.KT)(s.wk, l.UU),
            p.Ji,
            d.RV,
            ae.j,
            p.eZ,
            L.i$,
            at.DR,
            g.FG,
            g.XM,
            H.t7,
            pt.j,
            it.M,
            d.HW,
            (0, r.lq)(E.By),
          ],
          (
            e,
            { masterPageTpaComps: t },
            i,
            n,
            a,
            o,
            r,
            s,
            p,
            d,
            l,
            g,
            u,
            m,
            h,
            I,
            f
          ) => {
            let T = () => {};
            const w = (e) => {
                n.update((t) => ({
                  ...t,
                  tpaModal: { ...(t?.tpaModal || {}), closeModalImpl: e },
                }));
              },
              y = (e) => {
                n.update((t) => ({
                  ...t,
                  tpaModal: { ...(t?.tpaModal || {}), currentModalId: e },
                }));
              },
              P = () =>
                D().get(n.get(), ["tpaModal", "closeModalImpl"], () => {}),
              U = (e, t, i) => {
                const n = { width: o.innerWidth, height: o.innerHeight };
                if (
                  ((e = Math.min(e, n.width)), (t = Math.min(t, n.height)), !i)
                ) {
                  const i = n.width - 50,
                    a = n.height - 50;
                  e >= i && t >= a && ((e = i), (t = a));
                }
                return { width: e, height: t };
              };
            return {
              init(e) {
                h.registerToPageDidUnmount(P());
              },
              pageWillUnmount() {
                P()();
              },
              isModal(e) {
                return e.startsWith(lt);
              },
              openModal(n, { width: p, height: h, title: C, theme: D }, S) {
                if ((0, X.fU)(o)) return new Promise(() => {});
                let O;
                const {
                    tpaModalConfig: M,
                    isMobileDevice: E,
                    previewMode: v,
                    viewMode: b,
                  } = e,
                  { pageId: x, widgets: A } = i,
                  { wixTPAs: L } = M,
                  R = c.l.buildRuntimeCompId(lt, c.l.getOriginCompId(S || x)),
                  N = (S && s.getContextIdOfCompId(S)) || d;
                g.registerTpasForContext({ contextId: N, pageId: x }, [R]),
                  P()(),
                  m.enableCyclicTabbing(R);
                const _ = S ? a.get(S) : null,
                  H = L[_ ? _.appDefinitionId : null],
                  k = () => {
                    const e = U(p, h, H);
                    a.update({ [R]: { width: e.width, height: e.height } });
                  };
                return (
                  o.addEventListener("resize", k),
                  E && r.setSiteScrollingBlocked(!0, R),
                  new Promise(async (i) => {
                    await I;
                    const g = f?.getCurrentLightboxId(),
                      c = u.getCurrentRouteInfo()?.contextId;
                    if (d !== c && "masterPage" !== d && d !== g)
                      return void (
                        e.debug &&
                        console.warn(
                          `Tried to open modal but the current context ID: ${c} doesn't equal the modal context ID: ${d}`
                        )
                      );
                    y(R),
                      w((e) => {
                        w(() => {}),
                          o.removeEventListener("resize", k),
                          m.disableCyclicTabbing(R),
                          T(),
                          E && (r.setSiteScrollingBlocked(!1, R), dt(o, !1)),
                          s.removeComponentFromDynamicStructure(R),
                          a.update({
                            [R]: { src: null, closeModal: () => {} },
                          }),
                          O?.focus(),
                          (O = null),
                          y(null),
                          i(e);
                      }),
                      (T = ((e) => {
                        if ((0, X.fU)(o)) return () => {};
                        const t = (t) => {
                          "Escape" === t.key && e();
                        };
                        return (
                          o.addEventListener("keydown", t),
                          () => o.removeEventListener("keydown", t)
                        );
                      })(P())),
                      E && "LIGHT_BOX" === D && dt(o, !0);
                    const M = U(p, h, H),
                      L = (S && (A[S] || t[S])) || {},
                      N = l.buildSrc(R, x, L, n, {
                        extraQueryParams: {
                          isInModal: "true",
                          origCompId: S,
                          viewMode: b,
                        },
                      });
                    a.update({
                      [R]: {
                        src: N,
                        width: M.width,
                        height: M.height,
                        closeModal: P(),
                        isMobileDevice: E,
                        isPreviewMode: v,
                        title: C,
                        theme: D,
                      },
                    }),
                      (O = document.activeElement),
                      await s.addComponentToDynamicStructure(R, {
                        components: [],
                        componentType: "TPAModal",
                      });
                  })
                );
              },
              closeModal(e) {
                P()(e);
              },
              getCurrentModalId: () =>
                D().get(n.get(), ["tpaModal", "currentModalId"], null),
            };
          }
        );
      var ct = i(45024),
        ut = i(17709),
        mt = i.n(ut);
      const ht = (0, r.Og)(
        [ct.O, l.oJ, at.Is],
        ({ registerToThrottledScroll: e }, t, i) => ({
          name: "siteScrollDispatch",
          pageWillMount() {
            e((e) => {
              mt().measure(() => {
                t.dispatch(
                  "SCROLL",
                  ({ compId: t }) =>
                    ((e, t) => {
                      const i = window.document.getElementById(t);
                      if (!i) return {};
                      const n = i.getBoundingClientRect();
                      return {
                        x: e.x + n.left,
                        y: e.y + n.top,
                        width: n.width,
                        height: n.height,
                        scrollTop: e.y,
                        scrollLeft: e.x,
                        documentHeight: document.documentElement.clientHeight,
                        documentWidth: document.documentElement.clientWidth,
                      };
                    })(e, t),
                  { pageId: i }
                );
              });
            });
          },
        })
      );
      var It = i(478),
        ft = i(2730);
      const Tt = (0, r.Og)(
          [(0, r.KT)(s.YG, g.UU), (0, r.KT)(s.Gp, l.UU), p.Ji, d.RV, It.e],
          (
            { widgetsClientSpecMapData: e, isMobileView: t },
            { widgets: i },
            n,
            a,
            o
          ) => {
            const r = (e) => {
                ((e) => {
                  if ((0, X.fU)(e)) return;
                  ["fullScreenMode"].forEach((e) =>
                    document.body.classList.add(e)
                  );
                })(a),
                  dt(a, !0),
                  o.set({
                    [`${e}-pinned-layer`]: {
                      "z-index": "var(--above-all-z-index) !important",
                    },
                  }),
                  n.update({
                    [e]: {
                      iOSVersion: (0, ft.O)(a),
                      isMobileFullScreenMode: !0,
                    },
                  });
              },
              s = (e) => {
                ((e) => {
                  (0, X.fU)(e) ||
                    document.body.classList.remove("fullScreenMode");
                })(a),
                  dt(a, !1);
                const t = `${e}-pinned-layer`,
                  i = o.getCompStyle(t);
                var r, s;
                o.set({
                  [t]:
                    ((r = i),
                    (s = "z-index"),
                    Object.keys(r).reduce(
                      (e, t) => (t !== s && (e[t] = r[t]), e),
                      {}
                    )),
                }),
                  n.update({ [e]: { isMobileFullScreenMode: !1 } });
              };
            return {
              setFullScreenMobile(n, a) {
                if (!t)
                  throw new Error(
                    "show full screen is only available in Mobile view"
                  );
                ((t) => {
                  const n = i[t] || {},
                    { appDefinitionId: a } = e[n.widgetId] || {};
                  return Object.values(h._p).includes(a);
                })(n) && (a ? r(n) : s(n));
              },
            };
          }
        ),
        wt = (0, r.Og)([Ue.A, l.oJ], (e, t) => ({
          pageDidMount: () =>
            e.registerToCommonConfigChange((e) =>
              t.dispatch("COMMON_CONFIG_UPDATE", () => e)
            ),
        })),
        yt = (0, r.Og)([l.oJ, H.t7], (e, t) => ({
          pageDidLoad({ pageId: i }) {
            const n = t.getPreviousRouterInfo()?.pageId;
            if (!n || n === i) return;
            const a = { fromPage: n, toPage: i },
              o = t.getCurrentRouteInfo().dynamicRouteData?.publicData;
            o && (a.routerPublicData = o),
              e.dispatch("PAGE_NAVIGATION", () => a);
          },
        })),
        Pt = (e, t) => (Ut(t) && t.templateId) || e,
        Ut = ({ isResponsive: e, widgetId: t }) =>
          e && "14517f3f-ffc5-eced-f592-980aaa0bbb5c" === t,
        Ct = (0, r.Og)(
          [
            p.Ji,
            (0, r.KT)(s.YG, g.UU),
            (0, r.KT)(s.Gp, l.UU),
            L.i$,
            at.DR,
            g.XM,
            l.VY,
          ],
          (e, { widgetsClientSpecMapData: t }, i, n, a, o, r) => {
            const { widgets: s, tpaInnerRouteConfig: p, pageId: d } = i,
              l = Object.entries(s).map(([e, t]) => {
                const i = Pt(e, t);
                return e !== i && o.registerTpaTemplateId(i, e), i;
              });
            o.registerTpasForContext({ contextId: a, pageId: d }, l);
            const g = (t) => {
                const n = r.buildSrc({
                  compId: t,
                  tpaCompData: s[t],
                  pageId: i.pageId,
                  tpaInnerRouteConfig: p,
                });
                e.update({ [t]: { src: n } });
              },
              c = () => {
                const e = D().pickBy(
                  s,
                  ({ widgetId: e, isOOI: i }) => !i && t[e]
                );
                Object.keys(e).forEach(g);
              };
            return {
              pageDidMount() {
                return n.addLoadNewSessionCallback(({ reason: e }) => {
                  "memberLogin" === e && c();
                });
              },
              rebuildTpasSrc: c,
              rebuildTpaSrc: g,
            };
          }
        );
      var Dt = i(17856);
      const St = (0, r.Og)(
          [l.oJ, M.$1, (0, r.KT)(s.Gp, l.UU), at.Is],
          (e, t, { tpaInnerRouteConfig: i }, n) => ({
            async onUrlChange() {
              const a = t.getRelativeUrl(),
                o = (0, Dt.h)(a.replace(/^\./, ""), i.tpaPageUri),
                r = o ? o.join("/") : "";
              e.dispatch("STATE_CHANGED", () => ({ newState: r }), {
                pageId: n,
              });
            },
          })
        ),
        Ot = (0, r.Og)(
          [p.Ji, p.eZ, l.oJ, H.t7, d.RV, at.Is, a.ir, l.Uj],
          (e, t, i, n, a, o, { getOpenedPopups: r }, { rebuildTpasSrc: s }) => {
            const p = { previousCurrency: null };
            return {
              onUrlChange(e) {
                if (!n.getCurrentRouteInfo()) return;
                const t = e.searchParams.get("currency");
                t !== p.previousCurrency &&
                  (s(),
                  Object.values(r()).forEach((e) => e.refreshPopUp()),
                  (p.previousCurrency = t));
              },
            };
          }
        ),
        Mt = (0, r.Og)([(0, r.KT)(s.YG, g.UU), g.FG], (e, t) => ({
          buildSrc({
            compId: i,
            tpaCompData: n,
            pageId: a,
            tpaInnerRouteConfig: o,
          }) {
            const { widgetsClientSpecMapData: r, deviceType: s } = e,
              p = Pt(i, n),
              { widgetId: d } = n,
              { widgetUrl: l, mobileUrl: g } = r[d],
              c = ("mobile" === s && g) || l,
              u = Ut(n) ? "masterPage" : a,
              m = {};
            return (
              n.isSection && (m.tpaInnerRouteConfig = o),
              t.buildSrc(p, u, n, c, m)
            );
          },
          getDefaultProps(t, i, n) {
            const { widgetsClientSpecMapData: a, isMobileView: o } = e,
              {
                appDefinitionName: r,
                appDefinitionId: s,
                appPage: p,
                allowScrolling: d,
              } = a[t];
            return {
              title: p.name ?? r,
              appDefinitionName: r,
              appDefinitionId: s,
              isMobileView: o,
              allowScrolling: d,
              reportIframeStartedLoading: i,
              reportWidgetUnresponsive: n,
            };
          },
        }));
      var Et = i(20636),
        vt = i(789),
        bt = i(51759);
      const xt = (0, r.Og)(
          [
            (0, r.KT)(s.YG, g.UU),
            (0, r.KT)(s.Gp, l.UU),
            l._w,
            l.VY,
            g.V5,
            g.$O,
            d.Ht,
            d.TQ,
            (0, r.lq)(l.LE),
            (0, r.lq)(g.D0),
          ],
          (
            { widgetsClientSpecMapData: e },
            t,
            i,
            n,
            { registerTpaSection: a, unregisterTpaSection: o },
            r,
            s,
            { requestUrl: p },
            d,
            l
          ) => {
            const g = ({
              appDefinitionId: e = "UNKNOWN",
              widgetId: t = "UNKNOWN",
              compId: i,
              reason: n,
            }) => {
              const a = "IframeTpaDataIntegrityError",
                o = new Error(a);
              (o.name = a),
                s.captureError(o, {
                  tags: {
                    appDefinitionId: e,
                    widgetId: t,
                    feature: "tpa",
                    methodName: "componentWillMount",
                    reason: n,
                  },
                  extra: { compId: i },
                });
            };
            return {
              componentTypes: bt.p,
              componentWillMount(c) {
                const { widgets: u, tpaInnerRouteConfig: m, pageId: h } = t,
                  I = u[c.id] || u[(0, vt.vC)(c.id)];
                if (!I)
                  return void g({ compId: c.id, reason: "MISSING_DATA_ITEM" });
                const {
                  widgetId: f,
                  isSection: T,
                  appDefinitionId: w,
                  templateId: y,
                } = I;
                if (!e[f])
                  return void g({
                    appDefinitionId: w,
                    widgetId: f,
                    compId: c.id,
                    reason: "MISSING_FROM_CSM",
                  });
                l && l.registerToDataCapsule(y || c.id, w);
                const P = () =>
                  n.buildSrc({
                    compId: c.id,
                    tpaCompData: I,
                    pageId: h,
                    tpaInnerRouteConfig: m,
                  });
                if (T) {
                  const e = {
                    appDefinitionId: w,
                    rebuildSrc: () => {
                      const e = P();
                      i.reportTpaLoadStart(c.id, e), c.updateProps({ src: e });
                    },
                  };
                  a(c.id, e);
                }
                const U = D().once(() => {
                    d && d.reportIframeStartedLoading(c.id);
                  }),
                  C = P(),
                  S = D().once(() => {
                    const { appDefinitionName: t, isWixTPA: i } = e[f];
                    if (i) {
                      const e = new Error("TPA did not send appIsAlive");
                      (e.name = "IframeTpaUnresponsive"),
                        s.captureError(e, {
                          tags: {
                            appDefinitionId: w,
                            widgetId: f,
                            invalidSrc: !C,
                            feature: "tpa",
                            methodName: "componentWillMount",
                          },
                          extra: { appDefinitionName: t, src: C },
                        });
                    }
                  }),
                  O = n.getDefaultProps(f, U, S),
                  M = Pt(c.id, I),
                  E = r ? r.getCachedProps(M) : {};
                i.reportTpaLoadStart(c.id, C);
                const v = p.includes("disableAllPlatformApps");
                return (
                  c.updateProps({
                    ...O,
                    src: C,
                    disableAllPlatformApps: v,
                    ...E,
                  }),
                  () => {
                    r &&
                      ("masterPage" === h
                        ? r.cacheProps(c.id)
                        : Ut(I) && r.cacheProps(M, c.getProps())),
                      o(c.id),
                      l && l.unregister(y || c.id);
                  }
                );
              },
            };
          }
        ),
        At = (0, r.Og)(
          [(0, r.KT)(s.YG, g.UU), (0, r.KT)(s.Gp, l.UU), H.t7, V.O$, z.F, M.xt],
          ({ widgetsClientSpecMapData: e }, { widgets: t }, i, n, a, o) => ({
            reportIframeStartedLoading(n) {
              const { widgetId: r, templateId: s } = t[n] || t[(0, vt.vC)(n)],
                p = i.getCurrentRouteInfo(),
                d = Math.round(performance.now());
              a.logger.log(
                {
                  appId: e[r].appDefinitionId,
                  widget_id: r,
                  instance_id: s ?? n,
                  src: 42,
                  evid: 642,
                  tts: d,
                  pid: p ? p.pageId : null,
                  pn: o.getPageNumber(),
                },
                { endpoint: "ugc-viewer" }
              );
            },
          })
        ),
        Lt = "$TPA$",
        Rt = {
          [h.rm.PAGE_LINK]: ["type", "pageId"],
          [h.rm.EXTERNAL_LINK]: ["type", "target", "url"],
          [h.rm.ANCHOR_LINK]: ["type", "anchorName", "anchorDataId", "pageId"],
          [h.rm.EMAIL_LINK]: ["type", "recipient", "subject"],
          [h.rm.PHONE_LINK]: ["type", "phoneNumber"],
          [h.rm.WHATSAPP_LINK]: ["type", "phoneNumber"],
          [h.rm.DOCUMENT_LINK]: ["type", "docId", "name"],
          [h.rm.DYNAMIC_PAGE_LINK]: [
            "type",
            "routerId",
            "innerRoute",
            "anchorDataId",
          ],
          [h.rm.ADDRESS_LINK]: ["type", "address"],
        };
      function Nt(e, t, i, n) {
        const a = e.label || "",
          o = !e.isVisible || !1,
          r = e.link
            ? (function (e) {
                const t = D().pick(e.link, Rt[e.link.type]);
                if (
                  (D().isObject(t.pageId) &&
                    (t.pageId = `#${D().get(t, "pageId.id")}`),
                  t.anchorDataId)
                ) {
                  const e = D().get(t, "anchorDataId.id", t.anchorDataId);
                  t.anchorDataId =
                    "SCROLL_TO_TOP" === e || "SCROLL_TO_BOTTOM" === e
                      ? e
                      : `#${e}`;
                }
                return t;
              })(e)
            : {},
          s = D().merge(r, { title: a, hidden: o });
        if (!s.type)
          return {
            type: h.rm.MENU_HEADER,
            hidden: o,
            title: a,
            subPages: s.subPages,
          };
        switch (s.type) {
          default:
          case h.rm.PAGE_LINK:
          case h.rm.ANCHOR_LINK:
            D().merge(s, _t(e, t, i));
            break;
          case h.rm.DOCUMENT_LINK:
            const a = n.getLinkUrlFromDataItem(s),
              o = n.getLinkProps(a);
            s.url = o.href;
        }
        return s;
      }
      function _t(e, t, i) {
        const n = e.link?.pageId?.pageUriSEO,
          a = { isHomePage: e.link?.pageId?.id === t };
        return n && D().assign(a, { url: i + "/" + n }), a;
      }
      function Ht(e, t, i, n, a, o) {
        const {
            externalBaseUrl: r,
            appsClientSpecMapData: s,
            appsClientSpecMapByApplicationId: p,
            metaSiteId: d,
            userFileDomainUrl: l,
            routersConfig: g,
            isMobileView: c,
            isPremiumDomain: u,
          } = t,
          m = i.getLinkUtilsRoutingInfo(),
          I = (0, O.W)({
            routingInfo: m,
            metaSiteId: d,
            userFileDomainUrl: l,
            routersConfig: g,
            popupPages: n?.getLightboxPages(),
            multilingualInfo: o?.getMultilingualInfo(),
            isMobileView: c,
            isPremiumDomain: u,
            experiments: a,
          });
        return (function ({
          menuItems: e,
          mainPageId: t,
          baseUrl: i,
          linkUtils: n,
        }) {
          return D().map(e, (e) => {
            const a = Nt(e, t, i, n);
            if (a.type === h.rm.PAGE_LINK || a.type === h.rm.MENU_HEADER) {
              const o = D().map(e.items, (e) => Nt(e, t, i, n));
              D().size(o) > 0 && D().assign(a, { subPages: o });
            }
            return a;
          });
        })({
          menuItems: D().filter(
            e,
            ({ link: e }) =>
              !(function (e, t, i, n) {
                if (!n) return !1;
                if (n.type === h.rm.PAGE_LINK) {
                  const a = i["specs.thunderbolt.deprecateAppId"],
                    o = () => {
                      const e = n.pageId?.tpaApplicationId;
                      return t[e];
                    },
                    r = () => {
                      const t = n.pageId?.appDefinitionId;
                      return e[t];
                    };
                  let s = n.pageId?.tpaPageId;
                  const p = a ? r() : o();
                  if (p && s) {
                    D().includes(s, Lt) && (s = s.substr(0, s.indexOf(Lt)));
                    const e = D().find(p.widgets, (e) => e.appPage?.id === s);
                    return e?.appPage.hideFromMenu;
                  }
                }
                return !1;
              })(s, p, a, e)
          ),
          mainPageId: m.mainPageId,
          baseUrl: r,
          linkUtils: I,
        });
      }
      const kt = (0, r.Og)(
          [
            (0, r.KT)(s.YG, g.UU),
            M.wy,
            at.rl,
            S.n,
            (0, r.lq)(E.By),
            (0, r.lq)(v.tX),
          ],
          (e, t, i, n, a, o) => ({
            getSiteMap: async () =>
              Ht(await i.fetchResource("masterPage", "siteMap"), e, t, a, n, o),
          })
        ),
        Kt = (0, r.Og)(
          [(0, r.KT)(s.YG, g.UU), (0, r.KT)(s.Gp, l.UU), p.Ji, d.Ht],
          ({ widgetsClientSpecMapData: e }, t, i, n) => {
            const a = {};
            return {
              reportTpaLoadStart: (o, r) => {
                const { widgets: s } = t,
                  p = s[o] || s[(0, vt.vC)(o)],
                  { widgetId: d, appDefinitionId: l } = p;
                if (!e[d]) return;
                if (!(e[d].isWixTPA && r && i.get(o)?.src !== r)) return;
                const g = "tpa_iframe_load",
                  c = Date.now();
                n.interactionStarted(g, {
                  customParams: { appDefinitionId: l, widgetId: d },
                }),
                  (a[o] = {
                    src: r,
                    reportLoadFinished: D().once(() =>
                      n.interactionEnded(g, {
                        customParams: {
                          appDefinitionId: l,
                          widgetId: d,
                          duration: Date.now() - c,
                        },
                      })
                    ),
                  });
              },
              reportTpaLoadEnd: (e) => {
                const t = a[e];
                t?.src && i.get(e)?.src === t.src && t.reportLoadFinished();
              },
            };
          }
        ),
        Gt = (e) => {
          e(l.VY).to(Mt),
            e(l.LE).to(At),
            e(n.$.PageDidMountHandler, l.Uj).to(Ct),
            e(Et.ls).to(xt),
            e(g.eM).to(I),
            e(a.dQ).to(st),
            e(n.$.PageDidMountHandler, l.oJ).to(tt),
            e(n.$.PageDidLoadHandler).to(yt),
            e(l.sy).to(rt),
            e(n.$.PageDidMountHandler, a.ir).to(nt),
            e(l.iQ).to(kt),
            Ze.forEach((t) => {
              e(a.dQ).to(t);
            }),
            e(n.$.PageDidMountHandler).to(f),
            e(n.$.PageWillUnmountHandler, a.tY).to(gt),
            e(n.$.PageWillMountHandler).to(ht),
            e(l.g_).to(Tt),
            e(n.$.PageDidMountHandler).to(wt),
            e(M.Qc).to(St),
            e(M.Qc).to(Ot),
            e(l._w).to(Kt),
            e(o.j).to(nt).whenTargetNamed("tpa"),
            e(o.j).to(gt).whenTargetNamed("tpa");
        };
    },
  },
]);
//# sourceMappingURL=https://static.parastorage.com/services/wix-thunderbolt/dist/group_8.0e0ae79e.chunk.min.js.map
