"use strict";
(self.webpackJsonp__wix_thunderbolt_app =
  self.webpackJsonp__wix_thunderbolt_app || []).push([
  [2646, 3169, 5445, 569],
  {
    33615: function (e, t, a) {
      a.r(t),
        a.d(t, {
          ProtectedPagesApiSymbol: function () {
            return k;
          },
          page: function () {
            return N;
          },
          site: function () {
            return y;
          },
        });
      var r,
        s = a(77748),
        o = a(20590),
        n = a(54563);
      !(function (e) {
        (e.SM = "SM"), (e.Pass = "PASS"), (e.NONE = "NONE");
      })(r || (r = {}));
      const i = (0, s.Og)(
        [(0, s.KT)(o._K, n.U), (0, s.KT)(o.YG, n.U), (0, s.KT)(o.wk, n.U)],
        (e, t, a) => {
          const s = (a) => {
            const s = e.pagesSecurity[a];
            return s && s.requireLogin
              ? r.SM
              : t.passwordProtected[a] || (s && s.passwordDigest)
              ? r.Pass
              : r.NONE;
          };
          return {
            async handle(t) {
              if (t.pageJsonFileName) return t;
              const o = t.pageId,
                {
                  pagesMap: n,
                  loginAndNavigate: i,
                  authenticateUsingSitePassword: p,
                  completedSitePasswordAuth: c,
                } = a.get();
              if (n[o]) return { ...t, pageJsonFileName: n[o] };
              if (s("masterPage") === r.Pass && !c) return p(t), null;
              const u = s(o);
              return (
                u === r.NONE &&
                  ((e, t) => {
                    throw new Error(
                      `we do not have authentication info for protected page ${e} page security: ${t}`
                    );
                  })(o, e.pagesSecurity[o]),
                i(t, u),
                null
              );
            },
          };
        }
      );
      var p = a(71085),
        c = a(66397),
        u = a(19889),
        g = a(91994),
        d = a(12457),
        l = a(75396),
        P = a(32166),
        f = a(10553);
      const m = (0, s.Og)(
        [
          (0, s.KT)(o.wk, n.U),
          (0, s.KT)(o.YG, n.U),
          (0, s.KT)(o._K, n.U),
          p.Ix,
          l.t7,
          (0, s.lq)(u.Np),
          (0, s.lq)(g.De),
          d.Tf,
          P.Ht,
          f.n,
        ],
        (
          e,
          { publicPageIds: t, pageUriSeoToRouterPrefix: a },
          { customNoPermissionsPageUriSeo: s, customNoPermissionsPageId: o },
          n,
          i,
          p,
          u,
          g,
          d,
          l
        ) => {
          const P = async (e, t) =>
              e === r.SM
                ? (async () => {
                    let e;
                    if (p)
                      if (l["specs.thunderbolt.newAuthorizedPagesFlow"]) {
                        if (((e = await p.requestAuthorizedPages()), e.success))
                          return {
                            authorizedPagesMap: e.pages,
                            onProtectedPageNavigationComplete: async () => {
                              window.document.title = await g.getPageTitle();
                            },
                          };
                      } else if (
                        ((e = await p.requestAuthentication({})), e.success)
                      )
                        return {
                          authorizedPagesMap:
                            await p.authorizeMemberPagesByToken(e.token),
                        };
                    return { authorizedPagesMap: {}, authenticationResult: e };
                  })()
                : (async (e) =>
                    u
                      ? u.promptPagePasswordDialog(e)
                      : { authorizedPagesMap: {} })(t),
            f = async (e, t, r = !1) => {
              if (s && r) {
                const t = `${a[s] ? `./${a[s]}/` : "./"}${s}`;
                return n.navigate(
                  `${t}?appSectionParams=${JSON.stringify({
                    restrictedPageId: e.pageId,
                    restrictedPagePath: (e.relativeEncodedUrl ?? "").replace(
                      "./",
                      "/"
                    ),
                  })}`
                );
              }
              if (p && "SM" === t) {
                const e = () => {
                  i.isLandingOnProtectedPage() && n.navigate("./");
                };
                return p.showNoPermissionsToPageDialog(e), !1;
              }
              return !!i.isLandingOnProtectedPage() && n.navigate("./");
            };
          async function m(t) {
            if (!u) return;
            const { authorizedPagesMap: a, onComplete: r } =
              await u.promptSitePasswordDialog();
            e.update((e) => ({
              ...e,
              pagesMap: Object.assign(e.pagesMap, a),
              completedSitePasswordAuth: !0,
            })),
              await n.navigate(t.parsedUrl.href),
              r?.();
          }
          const h = async (a, r) => {
            const s = a.pageId;
            try {
              const {
                authorizedPagesMap: p,
                authenticationResult: u,
                onProtectedPageNavigationComplete: g,
              } = await P(r, s);
              if (
                (e.update((e) => ({
                  ...e,
                  pagesMap: Object.assign(e.pagesMap, p),
                })),
                u?.reason === c.qd.CANCELED)
              )
                return !!i.isLandingOnProtectedPage() && n.navigate("./");
              if (p[s]) {
                const e = await n.navigate(a.parsedUrl.href);
                return g?.(), e;
              }
              {
                const s = t.includes(o),
                  n = Boolean(e.get().pagesMap[o]);
                return f(a, r, s || n);
              }
            } catch (e) {
              return (
                d.captureError(e, { tags: { feature: "protectedPage" } }),
                f(a, r)
              );
            }
          };
          return (
            e.update(() => ({
              loginAndNavigate: h,
              authenticateUsingSitePassword: m,
              completedSitePasswordAuth: !1,
              pagesMap: {},
            })),
            { appWillMount: async () => {} }
          );
        }
      );
      var h = a(16537),
        w = a(60950);
      const S = (0, s.Og)([(0, s.KT)(o.wk, n.U), u.Np], (e, t) => ({
        getTpaHandlers() {
          return {
            authorizeMemberPages: async () => {
              const a = await t.authorizeMemberPagesByCookie();
              e.update((e) => ({ ...e, pagesMap: { ...e.pagesMap, ...a } }));
            },
          };
        },
      }));
      const M = (0, s.Og)([(0, s.KT)(o.wk, n.U)], function (e) {
          return {
            getPageJsonFileName(t) {
              return e.get()?.pagesMap[t] ?? null;
            },
            getProtectedPages() {
              return { ...(e.get()?.pagesMap ?? {}) };
            },
          };
        }),
        k = Symbol("ProtectedPagesApiSymbol"),
        y = (e) => {
          e(p.po.Protected).to(i), e(h.$.AppWillMountHandler).to(m), e(k).to(M);
        },
        N = (e) => {
          e(w.dQ).to(S);
        };
    },
    11682: function (e, t, a) {
      a.r(t),
        a.d(t, {
          platformWorkerPromise: function () {
            return p;
          },
        });
      const {
          siteAssets: { clientTopology: r },
          siteFeatures: s,
          siteFeaturesConfigs: { platform: o },
          site: { externalBaseUrl: n },
        } = window.viewerModel,
        i = Worker && s.includes("platform"),
        p = i
          ? (async () => {
              const e = "platform_create-worker started";
              performance.mark(e);
              const t = o.clientWorkerUrl,
                a =
                  t.startsWith("http://localhost:") ||
                  t.startsWith("https://bo.wix.com/suricate/") ||
                  document.baseURI !== location.href
                    ? ((e) => {
                        const t = new Blob([`importScripts('${e}');`], {
                          type: "application/javascript",
                        });
                        return URL.createObjectURL(t);
                      })(o.clientWorkerUrl)
                    : t.replace(r.fileRepoUrl, `${n}/_partials`),
                s = new Worker(a),
                i = Object.keys(o.appsScripts.urls)
                  .filter(
                    (e) => !o.bootstrapData.appsSpecData[e]?.isModuleFederated
                  )
                  .reduce((e, t) => ((e[t] = o.appsScripts.urls[t]), e), {});
              o.sdksStaticPaths &&
                o.sdksStaticPaths.mainSdks &&
                o.sdksStaticPaths.nonMainSdks &&
                s.postMessage({
                  type: "preloadNamespaces",
                  sdksStaticPaths: o.sdksStaticPaths,
                }),
                s.postMessage({
                  type: "platformScriptsToPreload",
                  appScriptsUrls: i,
                });
              const p = "platform_create-worker ended";
              return (
                performance.mark(p),
                performance.measure("Create Platform Web Worker", e, p),
                s
              );
            })()
          : Promise.resolve();
    },
  },
]);
//# sourceMappingURL=https://static.parastorage.com/services/wix-thunderbolt/dist/platform.34e40fe4.chunk.min.js.map
