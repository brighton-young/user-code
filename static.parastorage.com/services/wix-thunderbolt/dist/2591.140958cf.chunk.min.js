"use strict";
(self.webpackJsonp__wix_thunderbolt_app =
  self.webpackJsonp__wix_thunderbolt_app || []).push([
  [2591],
  {
    8242: function (t, e, i) {
      function o(t, e) {
        return Object.assign(Object.create(e), t);
      }
      function n(t, e) {
        return t
          ? /^-?\d+px$/.test(t)
            ? parseInt(t)
            : /^-?\d+vh$/.test(t)
            ? (parseInt(t) * e.viewportHeight) / 100
            : /^-?\d+vw$/.test(t)
            ? (parseInt(t) * e.viewportWidth) / 100
            : parseInt(t) || 0
          : 0;
      }
      function s(t, e, i) {
        const { name: o, offset: n = 0 } = t,
          { start: s, end: r } = i,
          c = r - s,
          f = n / 100;
        let h, d;
        return (
          "entry" === o
            ? ((h = s - e), (d = Math.min(e, c)))
            : "contain" === o
            ? ((h = Math.min(r - e, s)), (d = Math.abs(e - c)))
            : "exit" === o
            ? ((h = Math.max(s, r - e)), (d = Math.min(e, c)))
            : "cover" === o && ((h = s - e), (d = c + e)),
          (h + f * d) | 0
        );
      }
      function r(t) {
        return "sticky" === t.position;
      }
      function c(t, e, i) {
        i && (t.style.position = "static");
        const o = (e ? t.offsetLeft : t.offsetTop) || 0;
        return i && (t.style.position = null), o;
      }
      function f(t, e) {
        let i;
        const o = (function (t, e) {
            return parseInt(e ? t.left : t.top);
          })(t, e),
          n = (function (t, e) {
            return parseInt(e ? t.right : t.bottom);
          })(t, e),
          s = !isNaN(o),
          r = !isNaN(n);
        return (s || r) && ((i = {}), s && (i.start = o), r && (i.end = n)), i;
      }
      function h(t, e, i, o, h) {
        const d = t.viewSource,
          a = window.getComputedStyle(d),
          u = r(a),
          l = u ? f(a, o) : void 0;
        let w = d.offsetParent,
          p = 0,
          v = "fixed" === a.position;
        const g = c(d, o, u);
        (l && "end" in l) || (p += g);
        const m = (o ? d.offsetWidth : d.offsetHeight) || 0,
          x = [
            { element: d, offset: g, size: m, sticky: l, style: u ? a : null },
          ];
        for (; w; ) {
          if (w === e) {
            x.push({ element: w, offset: 0 });
            break;
          }
          const t = window.getComputedStyle(w),
            i = r(t),
            n = i ? f(t, o) : void 0,
            s = c(w, o, i);
          (n && "end" in n) || (p += s),
            x.push({ element: w, offset: s, sticky: n }),
            (w = w.offsetParent),
            w || (v = "fixed" === t.position);
        }
        x.reverse();
        const b = (function (t, e, i, o, r) {
          const { start: c, end: f, duration: h } = t;
          let d,
            a = c,
            u = f,
            l = t.startRange,
            w = t.endRange;
          if ("string" == typeof h)
            (l = { name: h, offset: 0 }),
              (w = { name: h, offset: 100 }),
              (a = s(l, i, e)),
              (u = s(w, i, e)),
              (d = u - a);
          else {
            if (l || c?.name) {
              l = l || c;
              const t = n(l.add, r);
              a = s(l, i, e) + t;
            }
            if (w || f?.name) {
              w = w || f;
              const t = n(w.add, r);
              u = s(w, i, e) + t;
            } else "number" == typeof h && (u = a + h);
          }
          return {
            ...t,
            start: a,
            end: u,
            startRange: l,
            endRange: w,
            duration: d || h,
          };
        })(t, { start: p, end: p + m }, i, 0, h);
        b.isFixed = v;
        let y = 0;
        return (
          x.forEach((t, e) => {
            y += t.offset;
            const n = t.sticky;
            if (n) {
              if ("end" in n) {
                const s = x[e - 1]?.element;
                if (s) {
                  const e =
                      ((o ? t.element.offsetWidth : t.element.offsetHeight) ||
                        0) +
                      n.end -
                      i,
                    s = y + e - t.offset,
                    r = s < b.start,
                    c = !r && s <= b.end;
                  let f = 0;
                  (r || c) && ((f = t.offset), (b.end += f)),
                    r && (b.start += f);
                }
              }
              if ("start" in n) {
                const i = y - n.start,
                  s = i < b.start,
                  r = !s && i <= b.end;
                let c = 0;
                const f = x[e - 1]?.element;
                if (f) {
                  if (s || r) {
                    (c =
                      ((o ? f.offsetWidth : f.offsetHeight) || 0) -
                      (t.offset +
                        ((o ? t.element.offsetWidth : t.element.offsetHeight) ||
                          0))),
                      (y += c),
                      (b.end += c);
                  }
                  s && (b.start += c);
                }
              }
            }
          }),
          b
        );
      }
      i.d(e, {
        O: function () {
          return p;
        },
      });
      const d = {
        horizontal: !1,
        observeViewportEntry: !0,
        viewportRootMargin: "7% 7%",
        observeViewportResize: !1,
        observeSourcesResize: !1,
      };
      function a(t, e, i, o) {
        let n = 0;
        return (
          t >= e && t <= i ? (n = o ? (t - e) / o : 1) : t > i && (n = 1), n
        );
      }
      function u(t, e) {
        return t === window
          ? window.visualViewport
            ? e
              ? window.visualViewport.width
              : window.visualViewport.height
            : e
            ? window.document.documentElement.clientWidth
            : window.document.documentElement.clientHeight
          : e
          ? t.clientWidth
          : t.clientHeight;
      }
      function l(t) {
        const e = o(t, d),
          i = e.root,
          n = e.horizontal,
          s = new WeakMap();
        let r,
          c,
          f,
          l,
          w,
          p = u(i, n);
        const v = [],
          g = {
            viewportWidth: window.visualViewport.width,
            viewportHeight: window.visualViewport.height,
          };
        if (
          ((e.scenes = t.scenes.map(
            (t, o) => (
              (t.index = o),
              t.viewSource && ("string" == typeof t.duration || t.start?.name)
                ? ((t = h(t, i, p, n, g)), e.observeSourcesResize && v.push(t))
                : null == t.end && (t.end = t.start + t.duration),
              null == t.duration && (t.duration = t.end - t.start),
              t
            )
          )),
          v.length)
        ) {
          if (window.ResizeObserver) {
            const t = new Map();
            (f = new window.ResizeObserver(function (o) {
              o.forEach((o) => {
                const s = t.get(o.target);
                (e.scenes[s.index] = h(s, i, p, n, g)),
                  v.splice(v.indexOf(s), 1, e.scenes[s.index]);
              });
            })),
              v.forEach((e) => {
                f.observe(e.viewSource, { box: "border-box" }),
                  t.set(e.viewSource, e);
              });
          }
          e.observeViewportResize &&
            ((l = (function (t, e) {
              let i = 0;
              return function () {
                i && window.clearTimeout(i),
                  (i = window.setTimeout(() => {
                    (i = 0), t();
                  }, e));
              };
            })(function () {
              p = u(i, n);
              const t = v.map((t) => {
                const o = h(t, i, p, n, g);
                return (e.scenes[t.index] = o), o;
              });
              (v.length = 0), v.push(...t);
            }, 100)),
            i === window
              ? (window.visualViewport || window).addEventListener("resize", l)
              : window.ResizeObserver &&
                ((w = new window.ResizeObserver(l)),
                w.observe(i, { box: "border-box" })));
        }
        return (
          e.observeViewportEntry &&
            window.IntersectionObserver &&
            ((c = new window.IntersectionObserver(
              function (t) {
                t.forEach((t) => {
                  (s.get(t.target) || []).forEach((e) => {
                    e.disabled = !t.isIntersecting;
                  });
                });
              },
              {
                root: i === window ? window.document : i,
                rootMargin: e.viewportRootMargin,
                threshold: 0,
              }
            )),
            e.scenes.forEach((t) => {
              if (t.viewSource) {
                let e = s.get(t.viewSource);
                e ||
                  ((e = []), s.set(t.viewSource, e), c.observe(t.viewSource)),
                  e.push(t);
              }
            })),
          {
            tick: function ({ p: t, vp: i }) {
              t = +t.toFixed(1);
              const o = +i.toFixed(4);
              if (t !== r) {
                for (let i of e.scenes)
                  if (!i.disabled) {
                    const { start: e, end: n, duration: s } = i,
                      r = a(t, e, n, s);
                    i.effect(i, r, o), i.isFixed && (i.disabled = !0);
                  }
                r = t;
              }
            },
            destroy: function () {
              e.scenes.forEach((t) => t.destroy?.()),
                c && (c.disconnect(), (c = null)),
                f && (f.disconnect(), (f = null)),
                l &&
                  (w
                    ? (w.disconnect(), (w = null))
                    : (window.visualViewport || window).removeEventListener(
                        "resize",
                        l
                      ));
            },
          }
        );
      }
      const w = {
        transitionActive: !1,
        transitionFriction: 0.9,
        transitionEpsilon: 1,
        velocityActive: !1,
        velocityMax: 1,
      };
      class p {
        constructor(t = {}) {
          (this.config = o(t, w)),
            (this.progress = { p: 0, prevP: 0, vp: 0 }),
            (this.currentProgress = { p: 0, prevP: 0, vp: 0 }),
            (this._lerpFrameId = 0),
            (this.effect = null),
            (this.config.root =
              this.config.root && this.config.root !== window.document.body
                ? this.config.root
                : window),
            (this.config.resetProgress =
              this.config.resetProgress || this.resetProgress.bind(this)),
            (this._measure =
              this.config.measure ||
              (() => {
                const t = this.config.root;
                this.progress.p = this.config.horizontal
                  ? t.scrollX || t.scrollLeft || 0
                  : t.scrollY || t.scrollTop || 0;
              })),
            (this._trigger = (function (t) {
              let e = !1;
              return function () {
                e ||
                  ((e = !0),
                  window.requestAnimationFrame(() => {
                    (e = !1), t();
                  }));
              };
            })(() => {
              this._measure?.(), this.tick(!0);
            }));
        }
        start() {
          this.setupEffect(),
            this.setupEvent(),
            this.resetProgress(),
            this.tick();
        }
        pause() {
          this.removeEvent();
        }
        resetProgress(t = {}) {
          const e = this.config.root,
            i = t.x || 0 === t.x ? t.x : e.scrollX || e.scrollLeft || 0,
            o = t.y || 0 === t.y ? t.y : e.scrollY || e.scrollTop || 0,
            n = this.config.horizontal ? i : o;
          (this.progress.p = n),
            (this.progress.prevP = n),
            (this.progress.vp = 0),
            this.config.transitionActive &&
              ((this.currentProgress.p = n),
              (this.currentProgress.prevP = n),
              (this.currentProgress.vp = 0)),
            t && this.config.root.scrollTo(i, o);
        }
        tick(t) {
          const e = this.config.transitionActive;
          e && this.lerp();
          const i = e ? this.currentProgress : this.progress;
          if (this.config.velocityActive) {
            const t = i.p - i.prevP,
              e = t < 0 ? -1 : 1;
            i.vp =
              (Math.min(this.config.velocityMax, Math.abs(t)) /
                this.config.velocityMax) *
              e;
          }
          this.effect.tick(i),
            e &&
              i.p !== this.progress.p &&
              (t &&
                this._lerpFrameId &&
                window.cancelAnimationFrame(this._lerpFrameId),
              (this._lerpFrameId = window.requestAnimationFrame(() =>
                this.tick()
              ))),
            (i.prevP = i.p);
        }
        lerp() {
          this.currentProgress.p = (function (t, e, i, o) {
            let n = t * (1 - i) + e * i;
            if (o) {
              const i = n - t;
              Math.abs(i) < o && (n = t + o * Math.sign(i));
              const s = e - n;
              if (Math.abs(s) < o) return e;
            }
            return n;
          })(
            this.currentProgress.p,
            this.progress.p,
            +(1 - this.config.transitionFriction).toFixed(3),
            this.config.transitionEpsilon
          );
        }
        destroy() {
          this.pause(), this.removeEffect();
        }
        setupEvent() {
          this.removeEvent(),
            this.config.root.addEventListener("scroll", this._trigger);
        }
        removeEvent() {
          this.config.root.removeEventListener("scroll", this._trigger);
        }
        setupEffect() {
          this.removeEffect(), (this.effect = l(this.config));
        }
        removeEffect() {
          this.effect && this.effect.destroy(), (this.effect = null);
        }
      }
    },
    3040: function (t, e, i) {
      function o(t, e, i) {
        return Math.min(Math.max(t, i), e);
      }
      i.d(e, {
        g: function () {
          return f;
        },
      });
      const n = { x: 0, y: 0 };
      function s(t, e) {
        (n.x = window.scrollX),
          (n.y = window.scrollY),
          requestAnimationFrame(() => t && t(e));
      }
      function r(t) {
        (t.rect.width = window.visualViewport.width),
          (t.rect.height = window.visualViewport.height);
      }
      function c(t) {
        let e,
          i,
          c,
          f,
          h = !1,
          d = { x: t.rect.width / 2, y: t.rect.height / 2, vx: 0, vy: 0 };
        return (
          t.scenes.forEach((e) => {
            var o, s;
            e.target &&
              e.centeredToTarget &&
              ((e.transform =
                ((o = (function (t) {
                  let e = t,
                    i = 0,
                    o = 0;
                  if (e.offsetParent)
                    do {
                      (i += e.offsetLeft),
                        (o += e.offsetTop),
                        (e = e.offsetParent);
                    } while (e);
                  return {
                    left: i,
                    top: o,
                    width: t.offsetWidth,
                    height: t.offsetHeight,
                  };
                })(e.target)),
                (s = t.rect),
                {
                  x(t) {
                    const e = o.left - n.x + o.width / 2,
                      i = e >= s.width / 2,
                      r = 2 * (i ? e : s.width - e);
                    return (t - (i ? 0 : e - r / 2)) / r;
                  },
                  y(t) {
                    const e = o.top - n.y + o.height / 2,
                      i = e >= s.height / 2,
                      r = 2 * (i ? e : s.height - e);
                    return (t - (i ? 0 : e - r / 2)) / r;
                  },
                })),
              (h = !0)),
              t.root
                ? (i = (function (t) {
                    const e = new ResizeObserver((e) => {
                      e.forEach((e) => {
                        (t.rect.width = e.borderBoxSize[0].inlineSize),
                          (t.rect.height = e.borderBoxSize[0].blockSize);
                      });
                    });
                    return e.observe(t.root, { box: "border-box" }), e;
                  })(t))
                : ((c = r.bind(null, t)), window.addEventListener("resize", c));
          }),
          (e = function (e) {
            for (let i of t.scenes)
              if (!i.disabled) {
                const n = +o(
                    0,
                    1,
                    i.transform?.x(e.x) || e.x / t.rect.width
                  ).toPrecision(4),
                  s = +o(
                    0,
                    1,
                    i.transform?.y(e.y) || e.y / t.rect.height
                  ).toPrecision(4),
                  r = { x: e.vx, y: e.vy };
                i.effect(i, { x: n, y: s }, r);
              }
            Object.assign(d, e);
          }),
          h &&
            ((f = s.bind(null, e, d)),
            document.addEventListener("scrollend", f)),
          {
            tick: e,
            destroy: function () {
              t.scenes.forEach((t) => t.destroy?.()),
                document.removeEventListener("scrollend", f),
                i
                  ? (i.disconnect(), (i = null))
                  : (window.removeEventListener("resize", c), (c = null)),
                (e = null),
                (d = null);
            },
          }
        );
      }
      class f {
        constructor(t = {}) {
          (this.config = { ...t }),
            (this.effect = null),
            (this._nextTick = null);
          const e = (function (t) {
            let e = !1;
            return function () {
              if (!e)
                return (
                  (e = !0),
                  window.requestAnimationFrame(() => {
                    (e = !1), t();
                  })
                );
            };
          })(() => {
            this.tick();
          });
          (this.config.rect = this.config.root
            ? {
                width: this.config.root.offsetWidth,
                height: this.config.root.offsetHeight,
              }
            : {
                width: window.visualViewport.width,
                height: window.visualViewport.height,
              }),
            (this.progress = {
              x: this.config.rect.width / 2,
              y: this.config.rect.height / 2,
              vx: 0,
              vy: 0,
            }),
            (this._measure = (t) => {
              (this.progress.x = this.config.root ? t.offsetX : t.x),
                (this.progress.y = this.config.root ? t.offsetY : t.y),
                (this.progress.vx = t.movementX),
                (this.progress.vy = t.movementY),
                (this._nextTick = e());
            });
        }
        start() {
          this.setupEffect(), this.setupEvent();
        }
        pause() {
          this.removeEvent();
        }
        tick() {
          this.effect.tick(this.progress);
        }
        destroy() {
          this.pause(),
            this.removeEffect(),
            this._nextTick && cancelAnimationFrame(this._nextTick);
        }
        setupEvent() {
          this.removeEvent();
          (this.config.root || window).addEventListener(
            "pointermove",
            this._measure,
            { passive: !0 }
          );
        }
        removeEvent() {
          (this.config.root || window).removeEventListener(
            "pointermove",
            this._measure
          );
        }
        setupEffect() {
          this.removeEffect(), (this.effect = c(this.config));
        }
        removeEffect() {
          this.effect && this.effect.destroy(), (this.effect = null);
        }
      }
    },
  },
]);
//# sourceMappingURL=https://static.parastorage.com/services/wix-thunderbolt/dist/2591.140958cf.chunk.min.js.map
