/**
 * A function to create a log object for the 'cpMembersAccountAddFieldAction' event (evid: 834)
 *
 * Event description: Custom Profile. Adding new or already existing field at Members Account screen
 *
 * @param {cpMembersAccountAddFieldActionParams} params - The parameters for this event
 * @property {string} action - add or create new field
 * @property {GUID} app_id - app_id
 * @property {string} appliesTo - if null - applies to all members, if guid - specific member, if not null - specific role (like writers)
 * @property {string} fieldName - name of the field that was added
 * @property {string} fieldType - field type
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} referralinfo - member list,...
 * @return {LogObject<cpMembersAccountAddFieldActionParams>} LogObject<cpMembersAccountAddFieldActionParams>
 */
export function cpMembersAccountAddFieldAction(params) {
  return { evid: 834, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'verticalTriggeredMaInstallSuccess' event (evid: 823)
 *
 * Event description: Sent when any vertical triggers MA install - SUCCESS
 *
 * @param {verticalTriggeredMaInstallSuccessParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {GUID} originAppId - Vertical that triggered MA install
 * @return {LogObject<verticalTriggeredMaInstallSuccessParams>} LogObject<verticalTriggeredMaInstallSuccessParams>
 */
export function verticalTriggeredMaInstallSuccess(params) {
  return { evid: 823, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'bmActionButtonClicked' event (evid: 856)
 *
 * Event description: Event is triggered when clicked on action button at Business Manager
 *
 * @param {bmActionButtonClickedParams} params - The parameters for this event
 * @property {string} action_type - report, delete, block, etc
 * @property {string} app_id - app_id
 * @property {string} formOrigin - where it was opened
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_social - 0 - no, 1 - yes
 * @property {string} member_chosen - the member_id the action was performed on
 * @property {GUID} biToken - msid
 * @property {string} referralInfo - referral_info
 * @property {string} role - member role (owner, writer, member)
 * @property {string} scope - who did the action
 * @return {LogObject<bmActionButtonClickedParams>} LogObject<bmActionButtonClickedParams>
 */
export function bmActionButtonClicked(params) {
  return { evid: 856, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'staffFlowStaffOpen' event (evid: 844)
 *
 * Event description: Fires when staff BM opens
 *
 * @param {staffFlowStaffOpenParams} params - The parameters for this event
 * @property {GUID} app_id - app_id
 * @property {GUID} instance_id
 * @property {boolean} maInstalled - Members Area installed or not
 * @property {number} membersCount - visible members count
 * @property {GUID} biToken
 * @property {string} referralInfo - identification where User came from
 * @return {LogObject<staffFlowStaffOpenParams>} LogObject<staffFlowStaffOpenParams>
 */
export function staffFlowStaffOpen(params) {
  return { evid: 844, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'membersAreaDesignChange' event (evid: 828)
 *
 * Event description: sent when User edits default settings for Members Profile widget
 *
 * @param {membersAreaDesignChangeParams} params - The parameters for this event
 * @property {boolean} colorChanged - indicates if default color is changed
 * @property {boolean} coverChanged - indicates if default cover is changed
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @return {LogObject<membersAreaDesignChangeParams>} LogObject<membersAreaDesignChangeParams>
 */
export function membersAreaDesignChange(params) {
  return { evid: 828, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'managePagesActionDelete' event (evid: 825)
 *
 * Event description: sent when user intends/confirms to delete a page from Member Pages panel
 *
 * @param {managePagesActionDeleteParams} params - The parameters for this event
 * @property {GUID} appId - originAppId whose pages are being managed
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} pageId - id of the page being managed (unique id)
 * @property {string} pageName - name of the page being deleted
 * @property {string} value - {intent\confirm}
 * @return {LogObject<managePagesActionDeleteParams>} LogObject<managePagesActionDeleteParams>
 */
export function managePagesActionDelete(params) {
  return { evid: 825, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'memberPagesSettingsOpen' event (evid: 908)
 *
 * Event description: sent when members pages settings is opened
 *
 * @param {memberPagesSettingsOpenParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} origin - dashboard/editor
 * @property {string} referralinfo - entry point to Settings page
 * @return {LogObject<memberPagesSettingsOpenParams>} LogObject<memberPagesSettingsOpenParams>
 */
export function memberPagesSettingsOpen(params) {
  return { evid: 908, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'cpMembersAccountManageFields' event (evid: 833)
 *
 * Event description: Custom Profile. Actions with fields at Members Account screen
 *
 * @param {cpMembersAccountManageFieldsParams} params - The parameters for this event
 * @property {string} action - action user did with the field
 * @property {GUID} app_id - app_id
 * @property {string} appliesTo - if null - applies to all members, if guid - specific member, if not null - specific role (like writers)
 * @property {string} fieldName - name of the field
 * @property {string} fieldType - field type
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} referralinfo - member list,...
 * @property {string} showTo - value of show to column
 * @return {LogObject<cpMembersAccountManageFieldsParams>} LogObject<cpMembersAccountManageFieldsParams>
 */
export function cpMembersAccountManageFields(params) {
  return { evid: 833, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'membersAreaProfilePictureLayoutChange' event (evid: 851)
 *
 * Event description: Sent when Users switch between picture layout (none/circle/square)
 *
 * @param {membersAreaProfilePictureLayoutChangeParams} params - The parameters for this event
 * @property {GUID} appId - app id
 * @property {GUID} instance_id
 * @property {boolean} is_social - 0 - no, 1 - yes
 * @property {string} layoutType - none/circle/square
 * @property {GUID} biToken - msid
 * @property {GUID} siteMemberId - site member id
 * @return {LogObject<membersAreaProfilePictureLayoutChangeParams>} LogObject<membersAreaProfilePictureLayoutChangeParams>
 */
export function membersAreaProfilePictureLayoutChange(params) {
  return { evid: 851, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'cpMembersAccountManageMembersInfo' event (evid: 839)
 *
 * Event description: Custom Profile. Members account page open from various places
 *
 * @param {cpMembersAccountManageMembersInfoParams} params - The parameters for this event
 * @property {GUID} app_id - app_id of vertical that initiate this bo open
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} referralInfo - places page was opened from
 * @return {LogObject<cpMembersAccountManageMembersInfoParams>} LogObject<cpMembersAccountManageMembersInfoParams>
 */
export function cpMembersAccountManageMembersInfo(params) {
  return { evid: 839, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'membersAreaProfileCardAlignment' event (evid: 854)
 *
 * Event description: The alignment option for the profile card (left/center/right)
 *
 * @param {membersAreaProfileCardAlignmentParams} params - The parameters for this event
 * @property {string} alignment - Corresponding to selection on settings (left/center/right)
 * @property {GUID} appId - app id
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_social - 0 - no, 1 - yes
 * @property {GUID} biToken - msid
 * @property {GUID} siteMemberId - site member id
 * @return {LogObject<membersAreaProfileCardAlignmentParams>} LogObject<membersAreaProfileCardAlignmentParams>
 */
export function membersAreaProfileCardAlignment(params) {
  return { evid: 854, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'managesPagesModalTabNavigation' event (evid: 827)
 *
 * Event description: sent when user navigates between tabs in manage pages modal
 *
 * @param {managesPagesModalTabNavigationParams} params - The parameters for this event
 * @property {string} context - Context of adding - Member pages or Member menu tabs.
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} tabName - target tab name
 * @return {LogObject<managesPagesModalTabNavigationParams>} LogObject<managesPagesModalTabNavigationParams>
 */
export function managesPagesModalTabNavigation(params) {
  return { evid: 827, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'memberPagesSettingsAction' event (evid: 909)
 *
 * Event description: Sent on click action in a Member Pages Settings
 *
 * @param {memberPagesSettingsActionParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} origin - dashboard/editor
 * @property {string} value - name of the button/action
 * @return {LogObject<memberPagesSettingsActionParams>} LogObject<memberPagesSettingsActionParams>
 */
export function memberPagesSettingsAction(params) {
  return { evid: 909, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'staffFlowMemberProfileSave' event (evid: 847)
 *
 * Event description: triggers on member profile save. In this screen you can create new member or adjust existing one
 *
 * @param {staffFlowMemberProfileSaveParams} params - The parameters for this event
 * @property {boolean} aboutChanged - about changed or not
 * @property {string} action - action User is doing: pre-save/save
 * @property {GUID} app_id - app_id
 * @property {string} contactsFieldsChanges - contact fields changed
 * @property {boolean} coverChanged - cover changed or not
 * @property {string} customFieldsChanged - list of custom fields changed
 * @property {string} formOrigin - place where this modal was opened
 * @property {GUID} instance_id - instance_id
 * @property {boolean} isFirst - first time saving or not. Used to identify new member creation
 * @property {boolean} maInstalled - Members Area Installed or not
 * @property {string} member - identification of member that being edited
 * @property {GUID} biToken - msid
 * @property {boolean} nameChanged - was name changed or not
 * @property {boolean} photo_changed - photo changed or not
 * @property {string} referralInfo - identification where User came from
 * @property {string} role - role of member that he belongs to: owner, blog writer, blog editor or custom
 * @property {string} roleId - role id
 * @property {string} socialFieldsChanged - social fields changed
 * @property {string} systemFieldsChanged - list of system fields changed
 * @property {number} totalFields - total fields that are visible to user
 * @property {boolean} urlChanged - was url changed or not
 * @return {LogObject<staffFlowMemberProfileSaveParams>} LogObject<staffFlowMemberProfileSaveParams>
 */
export function staffFlowMemberProfileSave(params) {
  return { evid: 847, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'membersAreaInstallationError' event (evid: 821)
 *
 * Event description: sent when members area install fails due to error
 *
 * @param {membersAreaInstallationErrorParams} params - The parameters for this event
 * @property {GUID} appInstanceId - app id
 * @property {string} errorMsg - error message due to which the installation failed
 * @property {GUID} instance_id - instance id
 * @property {GUID} biToken - msid
 * @property {string} originInfo - additional debugging information
 * @return {LogObject<membersAreaInstallationErrorParams>} LogObject<membersAreaInstallationErrorParams>
 */
export function membersAreaInstallationError(params) {
  return { evid: 821, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'membersAreaProfileImageSize' event (evid: 852)
 *
 * Event description: Sent when Users switch between profile image size (small/medium/large)
 *
 * @param {membersAreaProfileImageSizeParams} params - The parameters for this event
 * @property {GUID} appId - app id
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_social - 0 - no, 1 - yes
 * @property {GUID} biToken - msid
 * @property {GUID} siteMemberId - site member id
 * @property {string} size - Corresponding to selection on settings (Small/Medium/Large)
 * @return {LogObject<membersAreaProfileImageSizeParams>} LogObject<membersAreaProfileImageSizeParams>
 */
export function membersAreaProfileImageSize(params) {
  return { evid: 852, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'followersFollowingToggle' event (evid: 901)
 *
 * Event description: Event triggered when user chooses to show or not show followers/following on Editor. Will move to 69:855 for consistency at some point.
 *
 * @param {followersFollowingToggleParams} params - The parameters for this event
 * @property {GUID} app_id - app_id
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_social - 1- social, user choose to show followers/following, 0 - non social
 * @property {string} member_id - member_id
 * @property {GUID} biToken - msid
 * @property {string} origin - profile_widget, members_page
 * @property {GUID} site_member_id - site_member_id
 * @property {GUID} visitor_id - visitor_id
 * @return {LogObject<followersFollowingToggleParams>} LogObject<followersFollowingToggleParams>
 */
export function followersFollowingToggle(params) {
  return { evid: 901, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'membersAreaBlockUou' event (evid: 858)
 *
 * Event description: User blocks a member at Business Manager
 *
 * @param {membersAreaBlockUouParams} params - The parameters for this event
 * @property {string} actionName - click/confirm
 * @property {GUID} app_id - app_id
 * @property {GUID} instance_id - instance_id
 * @property {string} member_chosen - the member_id the action was performed on
 * @property {GUID} biToken
 * @property {string} referralInfo - identifier of a button location
 * @property {GUID} visitor_id
 * @return {LogObject<membersAreaBlockUouParams>} LogObject<membersAreaBlockUouParams>
 */
export function membersAreaBlockUou(params) {
  return { evid: 858, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'membersAreaLoginLayoutChange' event (evid: 861)
 *
 * Event description: sent when Users switch between login icon layout styles
 *
 * @param {membersAreaLoginLayoutChangeParams} params - The parameters for this event
 * @property {GUID} appId - app id
 * @property {GUID} instance_id
 * @property {GUID} instanceId - instance id
 * @property {string} layoutType - picture/picture_name/name/initials
 * @property {GUID} biToken - msid
 * @property {GUID} siteMemberId - site member id
 * @return {LogObject<membersAreaLoginLayoutChangeParams>} LogObject<membersAreaLoginLayoutChangeParams>
 */
export function membersAreaLoginLayoutChange(params) {
  return { evid: 861, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'staffFlowMemberProfileDiscard' event (evid: 848)
 *
 * Event description: triggers when member profile being discarded. In this screen you can create new member or adjust existing one
 *
 * @param {staffFlowMemberProfileDiscardParams} params - The parameters for this event
 * @property {string} action - action User is doing: pre-discard/discard
 * @property {GUID} app_id - app_id
 * @property {string} formOrigin - place where this modal was opened
 * @property {GUID} instance_id - instance_id
 * @property {boolean} isFirst - first time saving or not. Used to identify new member creation
 * @property {string} member - identification of member that being edited
 * @property {GUID} biToken - msid
 * @property {string} referralInfo - identification where User came from
 * @property {string} role - role of member that he belongs to: owner, blog writer, blog editor or custom
 * @property {string} roleId - role id
 * @return {LogObject<staffFlowMemberProfileDiscardParams>} LogObject<staffFlowMemberProfileDiscardParams>
 */
export function staffFlowMemberProfileDiscard(params) {
  return { evid: 848, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'profilePrivacySettingsSave' event (evid: 912)
 *
 * Event description: sent on Profile Privacy settings save
 *
 * @param {profilePrivacySettingsSaveParams} params - The parameters for this event
 * @property {string} action - save/save_confirm
 * @property {string} candidates - ‘all’/’no_one’
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} origin - dashboard/editor/one_app
 * @property {string} seeSetting - anyone’/’site_members’
 * @property {string} setSetting - ‘all’/’no_one’
 * @property {string} visibility - anyone’/’site_members’
 * @return {LogObject<profilePrivacySettingsSaveParams>} LogObject<profilePrivacySettingsSaveParams>
 */
export function profilePrivacySettingsSave(params) {
  return { evid: 912, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'membersAreaCoverImageSize' event (evid: 853)
 *
 * @param {membersAreaCoverImageSizeParams} params - The parameters for this event
 * @property {GUID} appId
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_social
 * @property {GUID} biToken - msid
 * @property {GUID} siteMemberId
 * @property {string} size - Corresponding to selection on settings (Small/Medium/Large)
 * @return {LogObject<membersAreaCoverImageSizeParams>} LogObject<membersAreaCoverImageSizeParams>
 */
export function membersAreaCoverImageSize(params) {
  return { evid: 853, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'verticalTriggeredMaInstallInitiated' event (evid: 822)
 *
 * Event description: Sent when any vertical triggers MA install - STARTED
 *
 * @param {verticalTriggeredMaInstallInitiatedParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {GUID} originAppId - Vertical that triggered MA install
 * @return {LogObject<verticalTriggeredMaInstallInitiatedParams>} LogObject<verticalTriggeredMaInstallInitiatedParams>
 */
export function verticalTriggeredMaInstallInitiated(params) {
  return { evid: 822, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'membersAreaLoginArrows' event (evid: 862)
 *
 * Event description: sent when Users change settings under the login bar layout
 *
 * @param {membersAreaLoginArrowsParams} params - The parameters for this event
 * @property {GUID} appId - app id
 * @property {GUID} instance_id
 * @property {GUID} instanceId - instance id
 * @property {GUID} biToken - msid
 * @property {string} property - arrow_shape/notifications_bell_icon
 * @property {GUID} siteMemberId - site member id
 * @property {string} value - none/line/full/enabled/disabled
 * @return {LogObject<membersAreaLoginArrowsParams>} LogObject<membersAreaLoginArrowsParams>
 */
export function membersAreaLoginArrows(params) {
  return { evid: 862, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'memberPagesSettingsSaveConfirm' event (evid: 910)
 *
 * Event description: sent when members pages settings is saved. Also used for Modal double confirmation.
 *
 * @param {memberPagesSettingsSaveConfirmParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {string} modalName - name of the modal (if applicable)
 * @property {GUID} biToken
 * @property {string} origin - dashboard/editor
 * @property {string} selection - [list of pages enabled], null if setting is off or none are selected
 * @return {LogObject<memberPagesSettingsSaveConfirmParams>} LogObject<memberPagesSettingsSaveConfirmParams>
 */
export function memberPagesSettingsSaveConfirm(params) {
  return { evid: 910, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'membersPageVisibleToggle' event (evid: 903)
 *
 * Event description: Event triggered when user chooses to allow all users to view members page or just to members
 *
 * @param {membersPageVisibleToggleParams} params - The parameters for this event
 * @property {GUID} app_id - app_id
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_social - 0 - no, 1 - yes
 * @property {boolean} login_required - 1- login required for UoU to view members page, 0- not required
 * @property {string} member_id - member_id
 * @property {GUID} biToken - msid
 * @property {GUID} site_member_id - site_member_id
 * @property {GUID} visitor_id - visitor_id
 * @return {LogObject<membersPageVisibleToggleParams>} LogObject<membersPageVisibleToggleParams>
 */
export function membersPageVisibleToggle(params) {
  return { evid: 903, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'membersAreaProfileCardDisplayToggles' event (evid: 855)
 *
 * Event description: The toggle options for the profile card
 *
 * @param {membersAreaProfileCardDisplayTogglesParams} params - The parameters for this event
 * @property {GUID} appId - app id
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_social - 0 - no, 1 - yes
 * @property {string} layoutType - The selection of layout type in the layout tab
 * @property {GUID} biToken - msid
 * @property {GUID} siteMemberId - site member id
 * @property {string} toggleName - Show message button/Show follow button/Show following counters...
 * @property {boolean} toggleState - enabled = true / disabled = false
 * @return {LogObject<membersAreaProfileCardDisplayTogglesParams>} LogObject<membersAreaProfileCardDisplayTogglesParams>
 */
export function membersAreaProfileCardDisplayToggles(params) {
  return { evid: 855, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'cpMembersAccountFieldPermissionsSave' event (evid: 842)
 *
 * Event description: firing on actual permissions change
 *
 * @param {cpMembersAccountFieldPermissionsSaveParams} params - The parameters for this event
 * @property {string} badges - badges guids (comma separated)
 * @property {string} fieldName - field name
 * @property {string} fieldType - field type
 * @property {GUID} instance_id
 * @property {string} members - members guids (comma separated)
 * @property {GUID} biToken
 * @property {string} permissionType - all_members/selected_members
 * @property {string} plans - plans guids (comma separated)
 * @property {string} referralinfo - member list
 * @property {string} roles - roles guids (comma separated)
 * @return {LogObject<cpMembersAccountFieldPermissionsSaveParams>} LogObject<cpMembersAccountFieldPermissionsSaveParams>
 */
export function cpMembersAccountFieldPermissionsSave(params) {
  return { evid: 842, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'staffWidgetActions' event (evid: 865)
 *
 * Event description: Any actions on the staff widget on Editor
 *
 * @param {staffWidgetActionsParams} params - The parameters for this event
 * @property {string} action - click/show/hide/select
 * @property {GUID} app_id - app_id
 * @property {GUID} instance_id - instance_id
 * @property {string} member - identification of member that being edited
 * @property {GUID} biToken - msid
 * @property {string} referralInfo - identification where User came from
 * @property {string} role - role of member that he belongs to: owner, blog writer, blog editor or custom
 * @property {string} roleId - role id
 * @property {string} value - value
 * @return {LogObject<staffWidgetActionsParams>} LogObject<staffWidgetActionsParams>
 */
export function staffWidgetActions(params) {
  return { evid: 865, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'loadMembersCustomPages' event (evid: 906)
 *
 * Event description: Event for loading members page/custom page modal
 *
 * @param {loadMembersCustomPagesParams} params - The parameters for this event
 * @property {GUID} appId - originAppId whose pages are being managed
 * @property {string} context - Context of adding - Member pages or Member menu tabs.
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} pageId - ID of the viewed page (unique)
 * @property {string} pageName - opened page name
 * @return {LogObject<loadMembersCustomPagesParams>} LogObject<loadMembersCustomPagesParams>
 */
export function loadMembersCustomPages(params) {
  return { evid: 906, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'cpMembersAccountFieldPermissionsModalSelection' event (evid: 836)
 *
 * Event description: Custom Profile. Field permissions modal
 *
 * @param {cpMembersAccountFieldPermissionsModalSelectionParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} referralinfo - member list
 * @property {string} value - value that was selected
 * @return {LogObject<cpMembersAccountFieldPermissionsModalSelectionParams>} LogObject<cpMembersAccountFieldPermissionsModalSelectionParams>
 */
export function cpMembersAccountFieldPermissionsModalSelection(params) {
  return { evid: 836, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'membersAreaUnblockUou' event (evid: 860)
 *
 * @param {membersAreaUnblockUouParams} params - The parameters for this event
 * @property {string} actionName - click/confirm
 * @property {GUID} app_id - app_id
 * @property {GUID} instance_id - instance_id
 * @property {string} member_chosen - the member_id the action was performed on
 * @property {GUID} biToken - msid
 * @property {string} referralInfo
 * @property {GUID} visitor_id - visitor_id
 * @return {LogObject<membersAreaUnblockUouParams>} LogObject<membersAreaUnblockUouParams>
 */
export function membersAreaUnblockUou(params) {
  return { evid: 860, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'maMiscClick' event (evid: 832)
 *
 * Event description: Buttons/links/etc clicks at random places.
 *
 * @param {maMiscClickParams} params - The parameters for this event
 * @property {GUID} app_id - app_id
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} referralInfo - identifier of a button, link
 * @property {string} value - identifier of a button, link
 * @property {GUID} visitor_id - visitor_id
 * @return {LogObject<maMiscClickParams>} LogObject<maMiscClickParams>
 */
export function maMiscClick(params) {
  return { evid: 832, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'profileHotDogClick' event (evid: 830)
 *
 * Event description: Profile hot dog click and value selected
 *
 * @param {profileHotDogClickParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} value - values selected: click_on_menu, writer_profile, member_profile
 * @return {LogObject<profileHotDogClickParams>} LogObject<profileHotDogClickParams>
 */
export function profileHotDogClick(params) {
  return { evid: 830, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'managePagesAddMemberPagesClick' event (evid: 826)
 *
 * Event description: sent when user clicks on "ADD"  CTA in the Member Pages panel menu
 *
 * @param {managePagesAddMemberPagesClickParams} params - The parameters for this event
 * @property {string} context - Context of adding - Member pages or Member menu tabs.
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} origin - dashboard/editor
 * @property {string} referralInfo - place which referred modal open
 * @return {LogObject<managePagesAddMemberPagesClickParams>} LogObject<managePagesAddMemberPagesClickParams>
 */
export function managePagesAddMemberPagesClick(params) {
  return { evid: 826, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'menuToggle' event (evid: 904)
 *
 * Event description: Event triggered when a user changes the visibility status of a page in the members/login menu
 *
 * @param {menuToggleParams} params - The parameters for this event
 * @property {GUID} app_id - app_id
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_social - 0 - no, 1 - yes (is the site social MA site)
 * @property {GUID} biToken
 * @property {string} pageId - page_id
 * @property {string} pageName - page name
 * @property {string} toggleName - {Member Menu, Login Menu}
 * @property {string} toggle_status - {Hide,Show}
 * @return {LogObject<menuToggleParams>} LogObject<menuToggleParams>
 */
export function menuToggle(params) {
  return { evid: 904, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'settingsOpened' event (evid: 902)
 *
 * Event description: Event triggered when user opens one of the component's settings
 *
 * @param {settingsOpenedParams} params - The parameters for this event
 * @property {GUID} app_id - app_id
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_social - 0 - no, 1 - yes
 * @property {string} member_id - member_id
 * @property {GUID} biToken - msid
 * @property {string} origin - origin
 * @property {string} settings_changed - 1 - changed, 0 - no change
 * @property {GUID} site_member_id - site_member_id
 * @property {GUID} visitor_id - visitor_id
 * @return {LogObject<settingsOpenedParams>} LogObject<settingsOpenedParams>
 */
export function settingsOpened(params) {
  return { evid: 902, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'staffFlowMemberProfileOpen' event (evid: 846)
 *
 * Event description: triggers when member profile opens. In this screen you can create new member or adjust existing one
 *
 * @param {staffFlowMemberProfileOpenParams} params - The parameters for this event
 * @property {GUID} app_id - app_id
 * @property {string} formOrigin - place where this modal was opened
 * @property {GUID} instance_id
 * @property {boolean} maInstalled - Members Area installed or not: T/F
 * @property {string} member - identification of member that being edited
 * @property {GUID} biToken
 * @property {string} referralInfo - identification where User came from
 * @property {string} role - role of member that he belongs to: owner, blog writer, blog editor or custom
 * @property {string} roleId - role id
 * @return {LogObject<staffFlowMemberProfileOpenParams>} LogObject<staffFlowMemberProfileOpenParams>
 */
export function staffFlowMemberProfileOpen(params) {
  return { evid: 846, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'cpMembersAccountFieldPermissionsModalAdd' event (evid: 837)
 *
 * Event description: Custom Profile. Field permissions modal add
 *
 * @param {cpMembersAccountFieldPermissionsModalAddParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} referralInfo - member_list
 * @property {string} value - Added value: Members, Roles, Badges, Pricing Plans
 * @return {LogObject<cpMembersAccountFieldPermissionsModalAddParams>} LogObject<cpMembersAccountFieldPermissionsModalAddParams>
 */
export function cpMembersAccountFieldPermissionsModalAdd(params) {
  return { evid: 837, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'staffFlowAddMemberModalOpen' event (evid: 845)
 *
 * Event description: Fires on modal open where User can invite existing member or create managed one
 *
 * @param {staffFlowAddMemberModalOpenParams} params - The parameters for this event
 * @property {GUID} app_id - app_id
 * @property {string} formOrigin - place where this modal was opened
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} referralInfo - identification where User came from
 * @return {LogObject<staffFlowAddMemberModalOpenParams>} LogObject<staffFlowAddMemberModalOpenParams>
 */
export function staffFlowAddMemberModalOpen(params) {
  return { evid: 845, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'dummy' event (evid: 900)
 *
 * @param {dummyParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @return {LogObject<dummyParams>} LogObject<dummyParams>
 */
export function dummy(params) {
  return { evid: 900, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'membersAreaDismissReports' event (evid: 859)
 *
 * Event description: Dismiss uou reports
 *
 * @param {membersAreaDismissReportsParams} params - The parameters for this event
 * @property {string} actionName - click/confirm
 * @property {GUID} app_id - app_id
 * @property {GUID} instance_id - instance_id
 * @property {string} member_chosen - the member_id the action was performed on
 * @property {GUID} biToken - msid
 * @property {string} referralInfo - identifier of a button location
 * @property {GUID} visitor_id - visitor_id
 * @return {LogObject<membersAreaDismissReportsParams>} LogObject<membersAreaDismissReportsParams>
 */
export function membersAreaDismissReports(params) {
  return { evid: 859, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'membersAreaLayoutChange' event (evid: 820)
 *
 * Event description: sent when Users switch between layout styles  (horizontal/vertical)
 *
 * @param {membersAreaLayoutChangeParams} params - The parameters for this event
 * @property {GUID} appId - app id
 * @property {GUID} instance_id
 * @property {GUID} instanceId - instance id
 * @property {boolean} is_social - 0 - no, 1 - yes
 * @property {string} layoutType - layout style {horizontal(full_width),vertical(cards)}
 * @property {GUID} biToken
 * @property {GUID} siteMemberId - site member id
 * @return {LogObject<membersAreaLayoutChangeParams>} LogObject<membersAreaLayoutChangeParams>
 */
export function membersAreaLayoutChange(params) {
  return { evid: 820, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'maMenuTabAdded' event (evid: 913)
 *
 * Event description: Sent when a tab in MA menu was added successfully
 *
 * @param {maMenuTabAddedParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken - msid
 * @property {string} tabName - Tab name that was added
 * @return {LogObject<maMenuTabAddedParams>} LogObject<maMenuTabAddedParams>
 */
export function maMenuTabAdded(params) {
  return { evid: 913, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'maPageInstalled' event (evid: 824)
 *
 * Event description: Sent when page of MA installed successfully
 *
 * @param {maPageInstalledParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {GUID} originAppId - Vertical that triggered MA install
 * @property {string} pageName - Page name that was installed
 * @return {LogObject<maPageInstalledParams>} LogObject<maPageInstalledParams>
 */
export function maPageInstalled(params) {
  return { evid: 824, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'staffFlowInviteMemberModal' event (evid: 850)
 *
 * Event description: Triggers when invite member modal opens and for send invite
 *
 * @param {staffFlowInviteMemberModalParams} params - The parameters for this event
 * @property {string} action - action with staff member: open, sent
 * @property {GUID} app_id - app_id
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken - msid
 * @property {string} referralInfo - identification where User came from
 * @property {string} role - role of member that he belongs to: owner, blog writer, blog editor or custom
 * @property {string} roleId - role id
 * @return {LogObject<staffFlowInviteMemberModalParams>} LogObject<staffFlowInviteMemberModalParams>
 */
export function staffFlowInviteMemberModal(params) {
  return { evid: 850, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'profilePrivacySettingsOpen' event (evid: 911)
 *
 * Event description: sent when Profile Privacy settings is opened
 *
 * @param {profilePrivacySettingsOpenParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} origin - dashboard/editor
 * @property {string} referralInfo - entry point to settings page
 * @return {LogObject<profilePrivacySettingsOpenParams>} LogObject<profilePrivacySettingsOpenParams>
 */
export function profilePrivacySettingsOpen(params) {
  return { evid: 911, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'maSettingsAdjustments' event (evid: 831)
 *
 * Event description: Fires when adjustments (toggle changes and etc) being made at settings of MA
 *
 * @param {maSettingsAdjustmentsParams} params - The parameters for this event
 * @property {string} action - Action (edit, hide...)
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} property - Property name that being changed (likes, comments...)
 * @property {string} section - Settings location (bwp_about...)
 * @return {LogObject<maSettingsAdjustmentsParams>} LogObject<maSettingsAdjustmentsParams>
 */
export function maSettingsAdjustments(params) {
  return { evid: 831, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'addPageButtonClickMembersPages' event (evid: 907)
 *
 * Event description: add app page click from Manage pages modal
 *
 * @param {addPageButtonClickMembersPagesParams} params - The parameters for this event
 * @property {GUID} appId - page belongs to app id
 * @property {string} context - Context of adding - Member pages or Member menu tabs.
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} origin - more information/initial modal
 * @property {string} pageId - id of the page being managed (unique id)
 * @property {string} pageName - name of the page being added
 * @return {LogObject<addPageButtonClickMembersPagesParams>} LogObject<addPageButtonClickMembersPagesParams>
 */
export function addPageButtonClickMembersPages(params) {
  return { evid: 907, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'cpMembersAccountNewCustomFieldCreated' event (evid: 835)
 *
 * Event description: Custom Profile. Creating new-custom field at Members Account screen
 *
 * @param {cpMembersAccountNewCustomFieldCreatedParams} params - The parameters for this event
 * @property {GUID} app_id - app_id
 * @property {string} appliesTo - if null - applies to all members, if guid - specific member, if not null - specific role (like writers)
 * @property {boolean} edited - T-edited, F-created
 * @property {string} fieldName - name of the field that was added
 * @property {string} fieldType - type of the field
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} privacy - privacy
 * @property {string} referralinfo - member list,...
 * @property {string} socialNetwork - social network
 * @return {LogObject<cpMembersAccountNewCustomFieldCreatedParams>} LogObject<cpMembersAccountNewCustomFieldCreatedParams>
 */
export function cpMembersAccountNewCustomFieldCreated(params) {
  return { evid: 835, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'staffFlowStaffActions' event (evid: 849)
 *
 * Event description: Triggers when staff member being removed
 *
 * @param {staffFlowStaffActionsParams} params - The parameters for this event
 * @property {string} action - action with staff member: remove
 * @property {GUID} app_id - app_id
 * @property {GUID} instance_id - instance_id
 * @property {string} member - identification of member that being edited
 * @property {GUID} biToken - msid
 * @property {string} referralInfo - identification where User came from
 * @property {string} role - role of member that he belongs to: owner, blog writer, blog editor or custom
 * @property {string} roleId - role id
 * @return {LogObject<staffFlowStaffActionsParams>} LogObject<staffFlowStaffActionsParams>
 */
export function staffFlowStaffActions(params) {
  return { evid: 849, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'membersProfileSelection' event (evid: 829)
 *
 * Event description: Members profile setting selection:  blog writers or blog writers and members
 *
 * @param {membersProfileSelectionParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} value - selection: blog_writers or blog_writers_and_members
 * @return {LogObject<membersProfileSelectionParams>} LogObject<membersProfileSelectionParams>
 */
export function membersProfileSelection(params) {
  return { evid: 829, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'membersAreaContactListByFilters' event (evid: 857)
 *
 * Event description: Sent when Contact List or Site Members List is opened and filtered by all, pending, reported, blocked
 *
 * @param {membersAreaContactListByFiltersParams} params - The parameters for this event
 * @property {GUID} appId - app id
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_social - 0 - no, 1 - yes
 * @property {string} labelName - all/customers/contacted_me/subscribed/unsubscribed
 * @property {GUID} biToken
 * @property {string} referralInfo - identifier of list location
 * @property {GUID} siteMemberId - site member id
 * @return {LogObject<membersAreaContactListByFiltersParams>} LogObject<membersAreaContactListByFiltersParams>
 */
export function membersAreaContactListByFilters(params) {
  return { evid: 857, src: 69, endpoint: "members-app-users", params: params };
}
/**
 * A function to create a log object for the 'cpMembersAccountFieldPermissionsModalAddMembersPermissions' event (evid: 838)
 *
 * Event description: Custom Profile. Field permissions modal. Add site_members (Members)
 *
 * @param {cpMembersAccountFieldPermissionsModalAddMembersPermissionsParams} params - The parameters for this event
 * @property {number} count - selected things count
 * @property {string} ids - selected array of things
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} referralinfo - member_list
 * @property {string} type - type that being added: members, roles...
 * @return {LogObject<cpMembersAccountFieldPermissionsModalAddMembersPermissionsParams>} LogObject<cpMembersAccountFieldPermissionsModalAddMembersPermissionsParams>
 */
export function cpMembersAccountFieldPermissionsModalAddMembersPermissions(
  params
) {
  return { evid: 838, src: 69, endpoint: "members-app-users", params: params };
}
//# sourceMappingURL=index.js.map
