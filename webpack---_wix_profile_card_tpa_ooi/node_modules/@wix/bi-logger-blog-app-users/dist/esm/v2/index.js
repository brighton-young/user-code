/**
 * A function to create a log object for the 'oneAppSharePostButtonClick1316' event (evid: 1316)
 *
 * Event description: user clicked on share button in oneapp top bar
 *
 * @param {oneAppSharePostButtonClick1316Params} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} origin - post page, view post etc.
 * @property {string} post_id - post_id
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @return {LogObject<oneAppSharePostButtonClick1316Params>} LogObject<oneAppSharePostButtonClick1316Params>
 */
export function oneAppSharePostButtonClick1316(params) {
  return { evid: 1316, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppManageCategoriesButtonInThreeDotsClicked' event (evid: 1311)
 *
 * Event description: Button in categories three dots meniu clicked
 *
 * @param {oneAppManageCategoriesButtonInThreeDotsClickedParams} params - The parameters for this event
 * @property {string} button_name - button name in three dots categories menu
 * @property {string} category_id - category_id
 * @property {GUID} instance_id - instance_id
 * @property {string} language - language
 * @property {GUID} biToken - msid
 * @property {string} origin - Where tabs was opened (Manage)
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {string} translation_id - translation id
 * @return {LogObject<oneAppManageCategoriesButtonInThreeDotsClickedParams>} LogObject<oneAppManageCategoriesButtonInThreeDotsClickedParams>
 */
export function oneAppManageCategoriesButtonInThreeDotsClicked(params) {
  return { evid: 1311, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'actionInsideBlogCard' event (evid: 1344)
 *
 * Event description: When an action is clicked inside Blog card, e.g. in WP importer status card.
 *
 * @param {actionInsideBlogCardParams} params - The parameters for this event
 * @property {string} action - "view_posts_to_copy"/"contact_support"
 * @property {string} card_name - card_name
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} origin - origin
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @return {LogObject<actionInsideBlogCardParams>} LogObject<actionInsideBlogCardParams>
 */
export function actionInsideBlogCard(params) {
  return { evid: 1344, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'widgetAddClickAppBuilder' event (evid: 701)
 *
 * Event description: user clicks to add widget
 *
 * @param {widgetAddClickAppBuilderParams} params - The parameters for this event
 * @property {string} element_type - recent post, custom feed, wix code
 * @property {GUID} id - unique widget id to connect to other events
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} origin - Add Panel/6th button
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @property {string} widget_id - widget_id
 * @return {LogObject<widgetAddClickAppBuilderParams>} LogObject<widgetAddClickAppBuilderParams>
 */
export function widgetAddClickAppBuilder(params) {
  return { evid: 701, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'migrationLearnMoreClick' event (evid: 383)
 *
 * Event description: triggered when users click on Maybe Learn more click
 *
 * @param {migrationLearnMoreClickParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_first - is it the first time the user opens this tab?
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} post_stable_id
 * @property {string} referral_info - referral_info
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<migrationLearnMoreClickParams>} LogObject<migrationLearnMoreClickParams>
 */
export function migrationLearnMoreClick(params) {
  return { evid: 383, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postPageSettingsOpened' event (evid: 1362)
 *
 * Event description: When any of the settings in the new blog post page are opened, like layout, design, etc
 *
 * @param {postPageSettingsOpenedParams} params - The parameters for this event
 * @property {string} component_type - header, footer, content, global, etc.
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @property {string} settings_name - layout, presets, plugins, design, animation, settings, help. etc
 * @return {LogObject<postPageSettingsOpenedParams>} LogObject<postPageSettingsOpenedParams>
 */
export function postPageSettingsOpened(params) {
  return { evid: 1362, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'blogFeedRenamed' event (evid: 374)
 *
 * Event description: When the user renames the Main blog feed from the BM
 *
 * @param {blogFeedRenamedParams} params - The parameters for this event
 * @property {GUID} app_id - app_id (forum, blog, members)
 * @property {string} community_id - community_id (instance of members app)
 * @property {GUID} instance_id - instance_id
 * @property {string} language - language
 * @property {GUID} biToken - msid
 * @property {string} name - The new feed name
 * @property {string} old_name - The updated value
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @return {LogObject<blogFeedRenamedParams>} LogObject<blogFeedRenamedParams>
 */
export function blogFeedRenamed(params) {
  return { evid: 374, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppOpenedAllPostsAnalytics' event (evid: 1318)
 *
 * Event description: Whenever a user opens Post Analytics (all posts)
 *
 * @param {oneAppOpenedAllPostsAnalyticsParams} params - The parameters for this event
 * @property {string} filter_name - The analytics Period (1D, 7D, 28D, all time)
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {GUID} post_stable_id
 * @property {string} role - user role
 * @property {string} screen_name
 * @return {LogObject<oneAppOpenedAllPostsAnalyticsParams>} LogObject<oneAppOpenedAllPostsAnalyticsParams>
 */
export function oneAppOpenedAllPostsAnalytics(params) {
  return { evid: 1318, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'updateBlogModalShown' event (evid: 405)
 *
 * Event description: Whenver the user sees the migration option - Migration message shown
 *
 * @param {updateBlogModalShownParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {string} modal_name - "Upgrade to the new blog".; "Magic Migration Blog Out of date"; "Magic Migration Blog Out of date - update options"
 * @property {GUID} biToken
 * @property {boolean} new_blog_valid - TRUE if new Blog is installed (nice to have)
 * @property {string} origin - origin - 6th button or right after opening Editor or some other place
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @return {LogObject<updateBlogModalShownParams>} LogObject<updateBlogModalShownParams>
 */
export function updateBlogModalShown(params) {
  return { evid: 405, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppSharePostButtonTypeClick' event (evid: 442)
 *
 * Event description: user clicked on share button type (sends sms, share social, copy link etc..) in oneapp
 *
 * @param {oneAppSharePostButtonTypeClickParams} params - The parameters for this event
 * @property {string} button_name - sends via sms, share via social, copy invite link etc..
 * @property {GUID} instance_id - instance id
 * @property {GUID} biToken - biToken
 * @property {string} origin - post page, view post etc.
 * @property {string} post_id - post_id
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @return {LogObject<oneAppSharePostButtonTypeClickParams>} LogObject<oneAppSharePostButtonTypeClickParams>
 */
export function oneAppSharePostButtonTypeClick(params) {
  return { evid: 442, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'authorOfflineDeleted' event (evid: 367)
 *
 * Event description: Deleted an offline author
 *
 * @param {authorOfflineDeletedParams} params - The parameters for this event
 * @property {GUID} author_id - Author id which was created
 * @property {string} author_role - Currently "Offline", might be reused later
 * @property {boolean} has_picture - TRUE if a picture is assigned for created author (nice to have)
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @return {LogObject<authorOfflineDeletedParams>} LogObject<authorOfflineDeletedParams>
 */
export function authorOfflineDeleted(params) {
  return { evid: 367, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postSoftDelete' event (evid: 333)
 *
 * Event description: When a post is moved to trash
 *
 * @param {postSoftDeleteParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {string} language - for multilingual
 * @property {string} language_id - the post stable if of the translated post
 * @property {GUID} biToken
 * @property {string} origin - post page, post editor, drafts
 * @property {string} post_id - post id
 * @property {GUID} post_stable_id - post stable id
 * @property {string} screen_name
 * @return {LogObject<postSoftDeleteParams>} LogObject<postSoftDeleteParams>
 */
export function postSoftDelete(params) {
  return { evid: 333, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oldBlogGfppShown' event (evid: 403)
 *
 * Event description: Shown of old blog gfpp
 *
 * @param {oldBlogGfppShownParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {boolean} is_mobile - TRUE if it's mobile editor
 * @property {GUID} biToken
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @property {string} widget_app - the name of widget/app - Blog Feed Single Post Page Featured Post Posts Lists Custom Feed Ticker Posts Gallery Tag Cloud Categories Archive
 * @return {LogObject<oldBlogGfppShownParams>} LogObject<oldBlogGfppShownParams>
 */
export function oldBlogGfppShown(params) {
  return { evid: 403, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'multilingualAutoTranslateSuccess' event (evid: 1351)
 *
 * Event description: When user finishes auto translating
 *
 * @param {multilingualAutoTranslateSuccessParams} params - The parameters for this event
 * @property {number} credits_after - how many credits were available after the translation
 * @property {number} credits_before - how many credits were available before the translation
 * @property {number} credits_required - how many credits were required to translate the post
 * @property {GUID} instance_id - blog instance_id
 * @property {GUID} biToken
 * @property {string} origin - where the autotranslate happened from: post_list/post_editor
 * @property {string} original_language - the original language of post
 * @property {GUID} post_stable_id - post_stable_id
 * @property {string} screen_name
 * @property {string} selected_langauge - the selected language
 * @return {LogObject<multilingualAutoTranslateSuccessParams>} LogObject<multilingualAutoTranslateSuccessParams>
 */
export function multilingualAutoTranslateSuccess(params) {
  return { evid: 1351, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'addBlogAppTypeOfBlogModalSelection' event (evid: 330)
 *
 * Event description: Whenever the user adds the blog app to a site, the type of modal is displayed. This event records the user selection on the type of blog modal.
 *
 * @param {addBlogAppTypeOfBlogModalSelectionParams} params - The parameters for this event
 * @property {string} action - close or next
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} option - values: wix blog or members area
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @return {LogObject<addBlogAppTypeOfBlogModalSelectionParams>} LogObject<addBlogAppTypeOfBlogModalSelectionParams>
 */
export function addBlogAppTypeOfBlogModalSelection(params) {
  return { evid: 330, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'editorSettingsPostPageBlogFeedShortcuts' event (evid: 349)
 *
 * Event description: user clicks on Post Page tab inside the blog feed settings
 *
 * @param {editorSettingsPostPageBlogFeedShortcutsParams} params - The parameters for this event
 * @property {string} app_id - app_id
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken - msid
 * @property {string} origin - blog feed settings / post feed settings
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @property {string} tab_name - tab name inside post settings
 * @return {LogObject<editorSettingsPostPageBlogFeedShortcutsParams>} LogObject<editorSettingsPostPageBlogFeedShortcutsParams>
 */
export function editorSettingsPostPageBlogFeedShortcuts(params) {
  return { evid: 349, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppHappyMomentBanners' event (evid: 1315)
 *
 * Event description: User did an action with a banner in Blog Manage
 *
 * @param {oneAppHappyMomentBannersParams} params - The parameters for this event
 * @property {string} action - closed, CTA - add banner, CTA - share
 * @property {string} banner_name - banner name - add banner to mobile, share your blog
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} origin - Where tabs was opened (Manage)
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @return {LogObject<oneAppHappyMomentBannersParams>} LogObject<oneAppHappyMomentBannersParams>
 */
export function oneAppHappyMomentBanners(params) {
  return { evid: 1315, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'shareAfterPublishModalAction' event (evid: 316)
 *
 * Event description: User chose action in Share after publish modal
 *
 * @param {shareAfterPublishModalActionParams} params - The parameters for this event
 * @property {string} action - action user chose in modal (Not right now, close X, Facebook, Preview, Twitter, copy url, etc)
 * @property {boolean} dont_show_again - user marked don't show again
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} post_id - post_id
 * @property {GUID} post_stable_id
 * @property {string} role - Role of the user - writer or admin
 * @property {string} screen_name
 * @return {LogObject<shareAfterPublishModalActionParams>} LogObject<shareAfterPublishModalActionParams>
 */
export function shareAfterPublishModalAction(params) {
  return { evid: 316, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'updateBlogModalAction' event (evid: 406)
 *
 * Event description: Action on migration message (shown - evid 405)
 *
 * @param {updateBlogModalActionParams} params - The parameters for this event
 * @property {string} action - action - close, learn more, update now
 * @property {string} choice - Content update/Content and design update
 * @property {string} choise - Content update/Content and design update - if user has both blogs (NOT USED)
 * @property {GUID} instance_id
 * @property {string} modal_name - "Upgrade to the new blog".; "Magic Migration Blog Out of date"; "Magic Migration Blog Out of date - update options"
 * @property {GUID} biToken
 * @property {boolean} new_blog_valid - if the site has new blog installed
 * @property {string} origin - origin (nice to have if we get any)
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @return {LogObject<updateBlogModalActionParams>} LogObject<updateBlogModalActionParams>
 */
export function updateBlogModalAction(params) {
  return { evid: 406, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'magicMigrationStart' event (evid: 409)
 *
 * Event description: Magic Migration Failed after copied posts, error message
 *
 * @param {magicMigrationStartParams} params - The parameters for this event
 * @property {string} error_message
 * @property {GUID} instance_id
 * @property {string} migration_step - migration step error occuried
 * @property {GUID} biToken
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @return {LogObject<magicMigrationStartParams>} LogObject<magicMigrationStartParams>
 */
export function magicMigrationStart(params) {
  return { evid: 409, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'reinstallationModalShown' event (evid: 1359)
 *
 * Event description: When a Blog reinstallation modal is shown in Editor.
 *
 * @param {reinstallationModalShownParams} params - The parameters for this event
 * @property {string} entryPoint - from where the installation was triggered
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @return {LogObject<reinstallationModalShownParams>} LogObject<reinstallationModalShownParams>
 */
export function reinstallationModalShown(params) {
  return { evid: 1359, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'bm3DotsClick334' event (evid: 334)
 *
 * Event description: Triggered when the user clicks on the 3 dots menu, on the post list within the Business Manager (BM)
 *
 * @param {bm3DotsClick334Params} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {string} language - language
 * @property {GUID} biToken
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @property {string} source - post BO section name: published, overview
 * @property {string} tabName - tab name
 * @property {string} translation_id - translation id
 * @return {LogObject<bm3DotsClick334Params>} LogObject<bm3DotsClick334Params>
 */
export function bm3DotsClick334(params) {
  return { evid: 334, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'bulkActionsOptionChosen' event (evid: 346)
 *
 * Event description: User did bulk action in Blog BO
 *
 * @param {bulkActionsOptionChosenParams} params - The parameters for this event
 * @property {string} action - Restore, Delete, Add Category
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {GUID} post_stable_id
 * @property {number} postsCount - Number of posts selected
 * @property {string} screen_name
 * @property {string} tabName - Posts or Drafts
 * @return {LogObject<bulkActionsOptionChosenParams>} LogObject<bulkActionsOptionChosenParams>
 */
export function bulkActionsOptionChosen(params) {
  return { evid: 346, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppReportPostClick' event (evid: 1342)
 *
 * Event description: event for reporting a post in OneApp
 *
 * @param {oneAppReportPostClickParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} origin - where the report click happened from (currently only under three dots)
 * @property {string} post_id - post_id of the reported post
 * @property {GUID} post_stable_id - post_stable_id of the reported post
 * @property {string} role - site_member role
 * @property {string} screen_name
 * @return {LogObject<oneAppReportPostClickParams>} LogObject<oneAppReportPostClickParams>
 */
export function oneAppReportPostClick(params) {
  return { evid: 1342, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postHistoryRevisionRestoredSuccessfully' event (evid: 436)
 *
 * Event description: When the revision was successfully restored
 *
 * @param {postHistoryRevisionRestoredSuccessfullyParams} params - The parameters for this event
 * @property {GUID} instance_id - instance
 * @property {string} language - language
 * @property {GUID} biToken - msid
 * @property {string} origin - origin - examples: related_posts, paid_plans etc..
 * @property {string} post_id - post_id if applicable
 * @property {string} original_revision_id - post original revision id
 * @property {string} revisionId - post revision id
 * @property {GUID} post_stable_id - post stable id
 * @property {string} role - role
 * @property {string} screen_name
 * @property {string} translation_id - translation id
 * @return {LogObject<postHistoryRevisionRestoredSuccessfullyParams>} LogObject<postHistoryRevisionRestoredSuccessfullyParams>
 */
export function postHistoryRevisionRestoredSuccessfully(params) {
  return { evid: 436, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'migrationMigrationFailed' event (evid: 396)
 *
 * Event description: triggered when Migration fails
 *
 * @param {migrationMigrationFailedParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_first - is it the first time the user opens this tab?
 * @property {string} migration_status - First time, In progress, Done, Failed (after finishing migration)
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} post_stable_id
 * @property {string} referral_info - referral_info
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<migrationMigrationFailedParams>} LogObject<migrationMigrationFailedParams>
 */
export function migrationMigrationFailed(params) {
  return { evid: 396, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'adiBlogSettingsOpened' event (evid: 326)
 *
 * Event description: User opened blog settings in ADI
 *
 * @param {adiBlogSettingsOpenedParams} params - The parameters for this event
 * @property {boolean} adi_blog_settings_opened - 1 - ADI Blog settings opened
 * @property {GUID} instance_id - instance_id
 * @property {GUID} bi_token - MSID
 * @property {GUID} biToken
 * @property {GUID} post_stable_id
 * @property {string} role - Role of user - writer or admin
 * @property {string} screen_name
 * @return {LogObject<adiBlogSettingsOpenedParams>} LogObject<adiBlogSettingsOpenedParams>
 */
export function adiBlogSettingsOpened(params) {
  return { evid: 326, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppOpenedSinglePostAnalyticsClick' event (evid: 1317)
 *
 * Event description: whenever a user opens a post from the analytics screen
 *
 * @param {oneAppOpenedSinglePostAnalyticsClickParams} params - The parameters for this event
 * @property {string} filter_name - The analytics Period (1D, 7D, 28D, all time)
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} origin - Most Recent Post, Most Viewed Posts, All Posts
 * @property {string} post_id - post id
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @return {LogObject<oneAppOpenedSinglePostAnalyticsClickParams>} LogObject<oneAppOpenedSinglePostAnalyticsClickParams>
 */
export function oneAppOpenedSinglePostAnalyticsClick(params) {
  return { evid: 1317, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppWidgetClick' event (evid: 1340)
 *
 * Event description: Tracks what the user clicked on any widget on the app
 *
 * @param {oneAppWidgetClickParams} params - The parameters for this event
 * @property {string} click_name - the label on the object clicked
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken - msid
 * @property {string} origin - origin
 * @property {string} post_id - post id - null if the click was not on a post
 * @property {GUID} post_stable_id - post stable id - null if the click was not on a post
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {string} widget_name - widget name
 * @return {LogObject<oneAppWidgetClickParams>} LogObject<oneAppWidgetClickParams>
 */
export function oneAppWidgetClick(params) {
  return { evid: 1340, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'migrationUpdateUrlsModalOpened' event (evid: 391)
 *
 * Event description: triggered when Migration Update URLs modal actually open
 *
 * @param {migrationUpdateUrlsModalOpenedParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_first - is it the first time the user opens this tab?
 * @property {string} migration_status - First time, In progress, Done (after finishing migration)
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} post_stable_id
 * @property {string} referral_info - referral_info
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<migrationUpdateUrlsModalOpenedParams>} LogObject<migrationUpdateUrlsModalOpenedParams>
 */
export function migrationUpdateUrlsModalOpened(params) {
  return { evid: 391, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'migrationPostCopyingStatus' event (evid: 401)
 *
 * Event description: Triggered when the migration completes both successfully or failed.
 *
 * @param {migrationPostCopyingStatusParams} params - The parameters for this event
 * @property {string} error_message - error message if unsuscessfull
 * @property {GUID} instance_id
 * @property {boolean} migration_succeed - 1 - yes / 0 - no
 * @property {GUID} bi_token - msid
 * @property {GUID} biToken
 * @property {number} num_posts_total - the number of total posts to copy
 * @property {number} num_posts_unsucc - the number of posts that weren't copied
 * @property {GUID} post_stable_id
 * @property {string} posts_with_too_large_content
 * @property {string} screen_name
 * @property {number} too_large_post_count
 * @return {LogObject<migrationPostCopyingStatusParams>} LogObject<migrationPostCopyingStatusParams>
 */
export function migrationPostCopyingStatus(params) {
  return { evid: 401, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postTemplatesSelectTemplateFromListClick' event (evid: 424)
 *
 * Event description: triggered when click on a template from the list
 *
 * @param {postTemplatesSelectTemplateFromListClickParams} params - The parameters for this event
 * @property {GUID} app_id - app_id (forum, blog, members)
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_offline - if the event happened offline
 * @property {string} language - for multilingual
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {GUID} site_member_id - site_member_id
 * @property {string} templateCategory - template category
 * @property {string} template_id - the template id clicked
 * @property {string} template_name - template name
 * @return {LogObject<postTemplatesSelectTemplateFromListClickParams>} LogObject<postTemplatesSelectTemplateFromListClickParams>
 */
export function postTemplatesSelectTemplateFromListClick(params) {
  return { evid: 424, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'migrationImportPageFirstStepOpened' event (evid: 384)
 *
 * Event description: triggered when Migration Import page first step actually open
 *
 * @param {migrationImportPageFirstStepOpenedParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_first - is it the first time the user opens this tab?
 * @property {string} migration_status - First time, In progress, Done (after finishing migration)
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} post_stable_id
 * @property {string} referral_info - referral_info
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<migrationImportPageFirstStepOpenedParams>} LogObject<migrationImportPageFirstStepOpenedParams>
 */
export function migrationImportPageFirstStepOpened(params) {
  return { evid: 384, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'customizeChooseCategoriesClickWixReads' event (evid: 1329)
 *
 * Event description: When the user clicks on the Customise or Choose now links on the main screen on wix reads, that link will take the user to the "Edit Categories" screen
 *
 * @param {customizeChooseCategoriesClickWixReadsParams} params - The parameters for this event
 * @property {string} click_name - choose now, customise
 * @property {GUID} instance_id - instance
 * @property {GUID} biToken - msid
 * @property {string} origin - origin
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @return {LogObject<customizeChooseCategoriesClickWixReadsParams>} LogObject<customizeChooseCategoriesClickWixReadsParams>
 */
export function customizeChooseCategoriesClickWixReads(params) {
  return { evid: 1329, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postUnscheduled' event (evid: 337)
 *
 * Event description: When the user unschedules a post
 *
 * @param {postUnscheduledParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} post_id - post_id
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<postUnscheduledParams>} LogObject<postUnscheduledParams>
 */
export function postUnscheduled(params) {
  return { evid: 337, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'errorMessageShow' event (evid: 372)
 *
 * Event description: whenever an error message is shown (tooltip, modal)
 *
 * @param {errorMessageShowParams} params - The parameters for this event
 * @property {number} error_code - http code
 * @property {string} error_message - error message
 * @property {string} error_type - Error type
 * @property {GUID} instance_id - instance
 * @property {GUID} biToken - msid
 * @property {string} origin - origin
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @property {string} type - The way it was displayed: Tooltip, Modal, toast etc..
 * @return {LogObject<errorMessageShowParams>} LogObject<errorMessageShowParams>
 */
export function errorMessageShow(params) {
  return { evid: 372, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postEditorAddRemoveMediaElement' event (evid: 379)
 *
 * Event description: When the user clicks the "+" in the post editor (sidebar or text area)
 *
 * @param {postEditorAddRemoveMediaElementParams} params - The parameters for this event
 * @property {string} action_type - Add or Remove
 * @property {string} adding_method - Click or drag n drop
 * @property {GUID} instance_id - instance_id
 * @property {string} media_content - the added media content if applicable (links, file name, html code)
 * @property {string} mediaOrigin - upload, embed, giphy  etc..
 * @property {string} media_type - image, video etc..
 * @property {GUID} bi_token - MSID
 * @property {GUID} biToken
 * @property {string} origin - sidebar or composer
 * @property {GUID} post_stable_id
 * @property {string} role - Role of the user - writer or admin
 * @property {string} screen_name
 * @property {string} tab_name - image, video, gallery, gif, html code (maybe not necessary)
 * @return {LogObject<postEditorAddRemoveMediaElementParams>} LogObject<postEditorAddRemoveMediaElementParams>
 */
export function postEditorAddRemoveMediaElement(params) {
  return { evid: 379, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppManageSearchClicked' event (evid: 1307)
 *
 * Event description: After clicking on search in OneApp manage
 *
 * @param {oneAppManageSearchClickedParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken - msid
 * @property {string} origin - Where tabs was opened (Manage)
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @return {LogObject<oneAppManageSearchClickedParams>} LogObject<oneAppManageSearchClickedParams>
 */
export function oneAppManageSearchClicked(params) {
  return { evid: 1307, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppWixReadsScreenOpen' event (evid: 1319)
 *
 * Event description: triggered when user sees the home or the explore tabs in wix reads
 *
 * @param {oneAppWixReadsScreenOpenParams} params - The parameters for this event
 * @property {GUID} app_id - app_id (forum, blog, members)
 * @property {string} community_id - community_id (instance of members app)
 * @property {GUID} instance_id - holds the child app (forum/blog) instance_id. or the members instance_id
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} post_stable_id
 * @property {string} referral_info - external links - facebook, social networks. if from wix then null
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screenName - home, explore
 * @property {string} screen_name
 * @property {GUID} site_member_id - site member id
 * @property {GUID} visitor_id - visitor id
 * @return {LogObject<oneAppWixReadsScreenOpenParams>} LogObject<oneAppWixReadsScreenOpenParams>
 */
export function oneAppWixReadsScreenOpen(params) {
  return { evid: 1319, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postModerationButtonClick' event (evid: 446)
 *
 * Event description: When owner/guest_writer clicks one of the main buttons: review/edit/view_post in pending review tab.
 *
 * @param {postModerationButtonClickParams} params - The parameters for this event
 * @property {string} button_name - the button name
 * @property {GUID} instance_id - instance
 * @property {GUID} biToken - msid
 * @property {string} origin - post page
 * @property {string} post_id
 * @property {GUID} post_stable_id - post_stable_id
 * @property {string} role
 * @property {string} screen_name
 * @return {LogObject<postModerationButtonClickParams>} LogObject<postModerationButtonClickParams>
 */
export function postModerationButtonClick(params) {
  return { evid: 446, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'helperAction' event (evid: 364)
 *
 * Event description: Action on helper_showed (for custom feed confusion currently, can be reused later for others if needed) - close or learn more
 *
 * @param {helperActionParams} params - The parameters for this event
 * @property {string} action - action in helper (close, learn more)
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} name - name of helper
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @return {LogObject<helperActionParams>} LogObject<helperActionParams>
 */
export function helperAction(params) {
  return { evid: 364, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppWixReadsPostPublished' event (evid: 1322)
 *
 * Event description: triggered when post published in oneapp Wix Reads
 *
 * @param {oneAppWixReadsPostPublishedParams} params - The parameters for this event
 * @property {GUID} app_id - app_id (forum, blog, members)
 * @property {string} category_ids - category_ids. JSON array string
 * @property {number} character_count - The number of characters on the post
 * @property {string} galleries - will sent as array - [{ layout: 'masonry', count: 5}, { layout: 'whatever', count: 10 }]
 * @property {number} giphy_count - count of used  giphy gifs
 * @property {number} image_count - image_count in the post
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_edited - 0 - new post / 1 - edit (to know if its posted for first time)
 * @property {boolean} is_published - 0 - not published (draft) / 1 - published
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} original_msid - The msid where the post was published originally
 * @property {string} original_post_id - The original post id
 * @property {string} paid_plan_id - Array of paid plan ids
 * @property {string} post_id - post_id
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {GUID} site_member_id - site member id
 * @property {boolean} used_html - 0 - didnt used html component / 1 - used html component
 * @property {number} video_count - video_count in the post
 * @return {LogObject<oneAppWixReadsPostPublishedParams>} LogObject<oneAppWixReadsPostPublishedParams>
 */
export function oneAppWixReadsPostPublished(params) {
  return { evid: 1322, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postTemplatesDropDownClickOnCategories' event (evid: 431)
 *
 * Event description: Triggered when the user clicks on drop down 'All Categories' in PostTemplates
 *
 * @param {postTemplatesDropDownClickOnCategoriesParams} params - The parameters for this event
 * @property {GUID} instance_id - instance
 * @property {GUID} biToken - msid
 * @property {string} origin - origin
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @property {GUID} site_member_id - site_member_id
 * @return {LogObject<postTemplatesDropDownClickOnCategoriesParams>} LogObject<postTemplatesDropDownClickOnCategoriesParams>
 */
export function postTemplatesDropDownClickOnCategories(params) {
  return { evid: 431, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postTemplatesDropDownClickOnPublishPost' event (evid: 428)
 *
 * Event description: Triggered when the user clicks on drop down in BM 'Publish post'
 *
 * @param {postTemplatesDropDownClickOnPublishPostParams} params - The parameters for this event
 * @property {GUID} instance_id - instance
 * @property {GUID} biToken - msid
 * @property {string} origin - origin
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<postTemplatesDropDownClickOnPublishPostParams>} LogObject<postTemplatesDropDownClickOnPublishPostParams>
 */
export function postTemplatesDropDownClickOnPublishPost(params) {
  return { evid: 428, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppCategoryPage3DotsClick' event (evid: 1330)
 *
 * Event description: When the user clicks on the 3 dots button on the category page in OneApp
 *
 * @param {oneAppCategoryPage3DotsClickParams} params - The parameters for this event
 * @property {string} category_id - category_id
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken - msid
 * @property {string} origin - category page
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @return {LogObject<oneAppCategoryPage3DotsClickParams>} LogObject<oneAppCategoryPage3DotsClickParams>
 */
export function oneAppCategoryPage3DotsClick(params) {
  return { evid: 1330, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'userRedirectClickGenericEvent' event (evid: 427)
 *
 * Event description: Generic redirect event, where user clicks on one place (in Editor, BM, etc) and gets directed to another place (for example to increase a discoverability of some settings)
 *
 * @param {userRedirectClickGenericEventParams} params - The parameters for this event
 * @property {string} going_to - Redirection to
 * @property {string} going_from - Redirection from
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} name - Redirection name
 * @property {string} origin - origin
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<userRedirectClickGenericEventParams>} LogObject<userRedirectClickGenericEventParams>
 */
export function userRedirectClickGenericEvent(params) {
  return { evid: 427, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'shareAfterPublishModalShown' event (evid: 315)
 *
 * Event description: Share after publish modal shown for user
 *
 * @param {shareAfterPublishModalShownParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} possible_modal_actions - possible_modal_actions
 * @property {string} post_id - post_id
 * @property {GUID} post_stable_id
 * @property {string} role - Role of the user - writer or admin
 * @property {string} screen_name
 * @return {LogObject<shareAfterPublishModalShownParams>} LogObject<shareAfterPublishModalShownParams>
 */
export function shareAfterPublishModalShown(params) {
  return { evid: 315, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'newCategoryAddedToBlog' event (evid: 311)
 *
 * Event description: triggered when a new category added in the app settings
 *
 * @param {newCategoryAddedToBlogParams} params - The parameters for this event
 * @property {GUID} app_id - app_id (forum, blog, members)
 * @property {number} category_count - current amount of categories i the blog
 * @property {string} category_id - category_id
 * @property {string} community_id - community_id (instance of members app)
 * @property {boolean} image - image for category was added (OneApp only)
 * @property {GUID} instance_id - instance_id
 * @property {string} language - The category language
 * @property {string} member_id - member_id
 * @property {GUID} biToken - msid
 * @property {string} label - the category name
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor, avdanced_post_settings
 * @property {GUID} original_instance_id - in the members app events. holds the child app (forum/blog) instance_id
 * @property {GUID} post_stable_id
 * @property {string} referral_info - external links - facebook, social networks. if from wix then null
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {boolean} seo_description - category description in seo settings was added (OneApp only)
 * @property {boolean} seo_name - category name was under seo settings (OneApp only)
 * @property {string} translation_id - the Id of category that was translated
 * @return {LogObject<newCategoryAddedToBlogParams>} LogObject<newCategoryAddedToBlogParams>
 */
export function newCategoryAddedToBlog(params) {
  return { evid: 311, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postSettingsChangesSidebar' event (evid: 345)
 *
 * Event description: This event tracks all post settings changes made by the user. For each property changed one event is emitted.
 *
 * @param {postSettingsChangesSidebarParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_published - Is post published (1-published)
 * @property {string} language - the post language
 * @property {GUID} bi_token - MSID
 * @property {GUID} biToken
 * @property {string} post_id - post_id
 * @property {GUID} post_stable_id - post stable id
 * @property {string} property - The changed property (excerpt, author etc..)
 * @property {string} property_value - The value of the changed property
 * @property {string} role - Role of user - writer or admin
 * @property {string} screen_name
 * @property {string} tab_name - SEO, Settings, Categories
 * @property {string} translation_id - translation id
 * @return {LogObject<postSettingsChangesSidebarParams>} LogObject<postSettingsChangesSidebarParams>
 */
export function postSettingsChangesSidebar(params) {
  return { evid: 345, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'advancedPostSettingsTabOpen' event (evid: 324)
 *
 * Event description: Left sidebar tab opened in post editor
 *
 * @param {advancedPostSettingsTabOpenParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {string} language - language
 * @property {GUID} bi_token - MSID
 * @property {GUID} biToken
 * @property {string} platform - Where event took place - live site or business manager
 * @property {string} post_id - post id
 * @property {GUID} post_stable_id - post_stable_id
 * @property {string} role - Role of the user - writer or admin
 * @property {string} screen_name
 * @property {string} tab_name - Which tab was opened in post settings
 * @return {LogObject<advancedPostSettingsTabOpenParams>} LogObject<advancedPostSettingsTabOpenParams>
 */
export function advancedPostSettingsTabOpen(params) {
  return { evid: 324, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postPageWidthOfPostChanged' event (evid: 309)
 *
 * Event description: Width of post changed in post page
 * width field itself is not very trustful, as it's calculated the other way around if "full width" is enabled and we can't know if it's enabled
 *
 * @param {postPageWidthOfPostChangedParams} params - The parameters for this event
 * @property {string} buildertype - In which editor changed was made: mobile, desktop
 * @property {string} eventmeta - eventmeta
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} origin - editor
 * @property {GUID} post_stable_id
 * @property {string} referral_info - not working: referral_info
 * @property {string} role - role
 * @property {string} screen_name
 * @property {number} width - width of post after change (not very trustful, as there are some mismatches with enabled full width)
 * @return {LogObject<postPageWidthOfPostChangedParams>} LogObject<postPageWidthOfPostChangedParams>
 */
export function postPageWidthOfPostChanged(params) {
  return { evid: 309, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'migrationGetStartedClick' event (evid: 381)
 *
 * Event description: triggered when users click on get started
 *
 * @param {migrationGetStartedClickParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_first - is it the first time the user opens this tab?
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} post_stable_id
 * @property {string} referral_info - referral_info
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<migrationGetStartedClickParams>} LogObject<migrationGetStartedClickParams>
 */
export function migrationGetStartedClick(params) {
  return { evid: 381, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'tabInsidePostPageSettingsOpened' event (evid: 1363)
 *
 * Event description: E.g. border in design, etc.
 *
 * @param {tabInsidePostPageSettingsOpenedParams} params - The parameters for this event
 * @property {string} component_type - header, footer, content, global, etc.
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @property {string} settings_name - layout, presets, plugins, design, animation, settings, help. etc
 * @property {string} tab_name - border, shadow, corners, etc
 * @return {LogObject<tabInsidePostPageSettingsOpenedParams>} LogObject<tabInsidePostPageSettingsOpenedParams>
 */
export function tabInsidePostPageSettingsOpened(params) {
  return { evid: 1363, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postHistoryPostHistoryScreenClicks' event (evid: 435)
 *
 * @param {postHistoryPostHistoryScreenClicksParams} params - The parameters for this event
 * @property {string} click_name
 * @property {GUID} instance_id - instance
 * @property {string} language - language
 * @property {GUID} biToken - msid
 * @property {string} origin - origin - examples: related_posts, paid_plans etc..
 * @property {string} post_id - post_id if applicable
 * @property {string} revisionId - revision id
 * @property {GUID} post_stable_id
 * @property {number} revision_count - the number of revisions displayed
 * @property {string} role - role
 * @property {string} screen_name
 * @property {string} translation_id - translation id
 * @return {LogObject<postHistoryPostHistoryScreenClicksParams>} LogObject<postHistoryPostHistoryScreenClicksParams>
 */
export function postHistoryPostHistoryScreenClicks(params) {
  return { evid: 435, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppGenericButtonClick' event (evid: 1326)
 *
 * Event description: the user clicked on a button
 *
 * @param {oneAppGenericButtonClickParams} params - The parameters for this event
 * @property {string} button_name - the button name
 * @property {GUID} instance_id - instance
 * @property {GUID} biToken - msid
 * @property {string} origin - post page
 * @property {string} post_id - post_id
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @return {LogObject<oneAppGenericButtonClickParams>} LogObject<oneAppGenericButtonClickParams>
 */
export function oneAppGenericButtonClick(params) {
  return { evid: 1326, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'imageSettingsPanelInPostEditorOpened' event (evid: 362)
 *
 * Event description: image settings panel in post editor opened
 *
 * @param {imageSettingsPanelInPostEditorOpenedParams} params - The parameters for this event
 * @property {GUID} app_id - app_id (forum, blog, members)
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_published - 0 - not published (draft) / 1 - published
 * @property {string} member_id - member_id
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {string} post_id - post_id
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {GUID} site_member_id - site_member_id
 * @return {LogObject<imageSettingsPanelInPostEditorOpenedParams>} LogObject<imageSettingsPanelInPostEditorOpenedParams>
 */
export function imageSettingsPanelInPostEditorOpened(params) {
  return { evid: 362, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppSharePostCopyUrlClick' event (evid: 1314)
 *
 * Event description: user copied url to clipboard (clicked share post)
 *
 * @param {oneAppSharePostCopyUrlClickParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken - msid
 * @property {string} origin - after publish
 * @property {string} post_id - post_id
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @return {LogObject<oneAppSharePostCopyUrlClickParams>} LogObject<oneAppSharePostCopyUrlClickParams>
 */
export function oneAppSharePostCopyUrlClick(params) {
  return { evid: 1314, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oldBlogGfppClick' event (evid: 404)
 *
 * Event description: Click on old blog gfpp
 *
 * @param {oldBlogGfppClickParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {boolean} is_mobile - TRUE if it's mobile editor
 * @property {GUID} biToken
 * @property {string} name - gfpp name - Update, Manage Blog, Help
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @property {string} widget_app - the name of widget/app - Blog Feed Single Post Page Featured Post Posts Lists Custom Feed Ticker Posts Gallery Tag Cloud Categories Archive
 * @return {LogObject<oldBlogGfppClickParams>} LogObject<oldBlogGfppClickParams>
 */
export function oldBlogGfppClick(params) {
  return { evid: 404, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postHistoryViewPostHistoryClick' event (evid: 433)
 *
 * Event description: triggered when click on view post history CTA
 *
 * @param {postHistoryViewPostHistoryClickParams} params - The parameters for this event
 * @property {GUID} app_id - app_id (forum, blog, members)
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_offline - if the event happened offline
 * @property {string} language - for multilingual
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {string} post_id - post id
 * @property {GUID} post_stable_id - post stable id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {GUID} site_member_id - site_member_id
 * @property {string} translation_id - translation id
 * @return {LogObject<postHistoryViewPostHistoryClickParams>} LogObject<postHistoryViewPostHistoryClickParams>
 */
export function postHistoryViewPostHistoryClick(params) {
  return { evid: 433, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postEditor3DotsActionClick' event (evid: 1350)
 *
 * Event description: When a user clicks selects an action in 3 dots in post editor.
 *
 * @param {postEditor3DotsActionClickParams} params - The parameters for this event
 * @property {string} action - action, such as: post_history, duplicate_post etc.
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} post_id - post_id
 * @property {GUID} post_stable_id - post_stable_id
 * @property {string} post_status - draft/published
 * @property {string} screen_name
 * @return {LogObject<postEditor3DotsActionClickParams>} LogObject<postEditor3DotsActionClickParams>
 */
export function postEditor3DotsActionClick(params) {
  return { evid: 1350, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'draftSaved' event (evid: 313)
 *
 * Event description: triggered when a post draft is saved each time (Web Only)
 *
 * @param {draftSavedParams} params - The parameters for this event
 * @property {number} character_count - Character count in post
 * @property {GUID} instance_id
 * @property {boolean} is_offline - if the event happened offline
 * @property {string} language - for multilingual
 * @property {GUID} biToken
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {string} post_id - post_id
 * @property {GUID} post_stable_id - post stable id
 * @property {string} post_title - post title
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {string} translation_id - the post_stable_id of the post that was translated
 * @return {LogObject<draftSavedParams>} LogObject<draftSavedParams>
 */
export function draftSaved(params) {
  return { evid: 313, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postTemplatesFilterTemplateByCategory' event (evid: 425)
 *
 * Event description: triggered when click on a template category from the drop down list
 *
 * @param {postTemplatesFilterTemplateByCategoryParams} params - The parameters for this event
 * @property {GUID} app_id - app_id (forum, blog, members)
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_offline - if the event happened offline
 * @property {string} language - for multilingual
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {GUID} site_member_id - site_member_id
 * @property {string} templateCategory - template category
 * @return {LogObject<postTemplatesFilterTemplateByCategoryParams>} LogObject<postTemplatesFilterTemplateByCategoryParams>
 */
export function postTemplatesFilterTemplateByCategory(params) {
  return { evid: 425, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'blogSettingsEditSeoBlogTagsClick' event (evid: 371)
 *
 * Event description: triggered when the user clicks on the edit button on the Blog settings screen, under the SEO settings section.
 *
 * @param {blogSettingsEditSeoBlogTagsClickParams} params - The parameters for this event
 * @property {GUID} instance_id - instance
 * @property {GUID} biToken - msid
 * @property {string} origin - origin
 * @property {GUID} post_stable_id
 * @property {string} referrer - referrer
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<blogSettingsEditSeoBlogTagsClickParams>} LogObject<blogSettingsEditSeoBlogTagsClickParams>
 */
export function blogSettingsEditSeoBlogTagsClick(params) {
  return { evid: 371, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postTemplatesWriteNewPostFromTemplateClick' event (evid: 423)
 *
 * Event description: triggered when click on write new post from template
 *
 * @param {postTemplatesWriteNewPostFromTemplateClickParams} params - The parameters for this event
 * @property {GUID} app_id - app_id (forum, blog, members)
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_offline - if the event happened offline
 * @property {string} language - for multilingual
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {GUID} site_member_id - site_member_id
 * @return {LogObject<postTemplatesWriteNewPostFromTemplateClickParams>} LogObject<postTemplatesWriteNewPostFromTemplateClickParams>
 */
export function postTemplatesWriteNewPostFromTemplateClick(params) {
  return { evid: 423, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'blogLoadedInEditor' event (evid: 399)
 *
 * Event description: Once blog app loaded in Editor, used for AB test exposure. NOTE: When the Page post is selected and whenever the user switches the view, the event gets triggered 2 times one with Blog feed and another with Post view.
 *
 * @param {blogLoadedInEditorParams} params - The parameters for this event
 * @property {string} blog_view - Blog Feed or Post Page
 * @property {string} editor_view_mode - Computer/Mobile
 * @property {GUID} instance_id
 * @property {boolean} isPreview - Is it in Preview mode (if not, it's Editor)
 * @property {GUID} biToken
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<blogLoadedInEditorParams>} LogObject<blogLoadedInEditorParams>
 */
export function blogLoadedInEditor(params) {
  return { evid: 399, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postPagePostPageOpened' event (evid: 350)
 *
 * Event description: Post page opened in editor
 *
 * @param {postPagePostPageOpenedParams} params - The parameters for this event
 * @property {string} app_id - app_id
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken - msid
 * @property {string} origin - blog_feed, page_preview
 * @property {GUID} post_stable_id
 * @property {string} referrer - The place from which this was opened
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<postPagePostPageOpenedParams>} LogObject<postPagePostPageOpenedParams>
 */
export function postPagePostPageOpened(params) {
  return { evid: 350, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppManageCategoriesEditCategoryOpened' event (evid: 1313)
 *
 * Event description: Clicked on add new category button in OneApp
 *
 * @param {oneAppManageCategoriesEditCategoryOpenedParams} params - The parameters for this event
 * @property {string} category_id - category_id
 * @property {GUID} instance_id - instance_id
 * @property {string} language - language
 * @property {GUID} biToken - msid
 * @property {string} origin - Where tabs was opened (Manage)
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {string} translation_id - translation id
 * @return {LogObject<oneAppManageCategoriesEditCategoryOpenedParams>} LogObject<oneAppManageCategoriesEditCategoryOpenedParams>
 */
export function oneAppManageCategoriesEditCategoryOpened(params) {
  return { evid: 1313, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'ratingsCommentsSubToggleInBlogBm' event (evid: 1349)
 *
 * Event description: When a sub-toggle is chosen in Ratings / Comments settings in Blog BM.
 *
 * @param {ratingsCommentsSubToggleInBlogBmParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @property {boolean} toggle - true/false
 * @property {string} type - ratings/comments
 * @property {string} value - members_only/everyone/ratings_mandatory
 * @return {LogObject<ratingsCommentsSubToggleInBlogBmParams>} LogObject<ratingsCommentsSubToggleInBlogBmParams>
 */
export function ratingsCommentsSubToggleInBlogBm(params) {
  return { evid: 1349, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'blog6thButtonWasOpened' event (evid: 320)
 *
 * Event description: triggered when 6th button content is opened in the 6th button or the Add panel in the editor
 *
 * @param {blog6thButtonWasOpenedParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_first_time_view - 1 - onboarding view 0 -blog manager
 * @property {GUID} biToken - msid
 * @property {string} origin - 6th button or Add panel
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @return {LogObject<blog6thButtonWasOpenedParams>} LogObject<blog6thButtonWasOpenedParams>
 */
export function blog6thButtonWasOpened(params) {
  return { evid: 320, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppEditCategory' event (evid: 1333)
 *
 * Event description: User edited a category
 *
 * @param {oneAppEditCategoryParams} params - The parameters for this event
 * @property {string} category_description - category description
 * @property {string} category_id - category id
 * @property {string} category_image - category image
 * @property {string} category_name - category label
 * @property {string} categoryTitle - category title
 * @property {GUID} instance_id - instance_id
 * @property {string} language - language
 * @property {GUID} biToken - msid
 * @property {string} origin - from where did the user get to this screen
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {string} translation_id - translation_id
 * @return {LogObject<oneAppEditCategoryParams>} LogObject<oneAppEditCategoryParams>
 */
export function oneAppEditCategory(params) {
  return { evid: 1333, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'editorSettingsOpened' event (evid: 351)
 *
 * Event description: Settings opened
 *
 * @param {editorSettingsOpenedParams} params - The parameters for this event
 * @property {string} app_id - app_id
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken - msid
 * @property {string} origin - post_page, blog_feed
 * @property {GUID} post_stable_id
 * @property {string} referrer - from which place it was opened
 * @property {string} role - role
 * @property {string} screen_name
 * @property {string} view_mode - Desktop , Mobile. NOTE: Any Null values are desktop
 * @return {LogObject<editorSettingsOpenedParams>} LogObject<editorSettingsOpenedParams>
 */
export function editorSettingsOpened(params) {
  return { evid: 351, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'bm3DotsClick341' event (evid: 341)
 *
 * Event description: Triggered when the user clicks on the 3 dots menu
 *
 * @param {bm3DotsClick341Params} params - The parameters for this event
 * @property {GUID} instance_id - instance
 * @property {GUID} biToken - msid
 * @property {string} origin - origin
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @property {string} source - post BO section name: published, overview
 * @return {LogObject<bm3DotsClick341Params>} LogObject<bm3DotsClick341Params>
 */
export function bm3DotsClick341(params) {
  return { evid: 341, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'addBlogAppDisplayTypeOfBlogModal' event (evid: 329)
 *
 * Event description: Whenever the user adds the blog app to a site. This event records if the type of blog modal was displayed.
 *
 * @param {addBlogAppDisplayTypeOfBlogModalParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @return {LogObject<addBlogAppDisplayTypeOfBlogModalParams>} LogObject<addBlogAppDisplayTypeOfBlogModalParams>
 */
export function addBlogAppDisplayTypeOfBlogModal(params) {
  return { evid: 329, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'editorSettingsDesignTab' event (evid: 356)
 *
 * Event description: Actions on tab inside settings
 *
 * @param {editorSettingsDesignTabParams} params - The parameters for this event
 * @property {string} app_id - app_id
 * @property {GUID} instance_id
 * @property {GUID} biToken - msid
 * @property {string} origin - Post Page Settings, app settings (feed)
 * @property {GUID} post_stable_id
 * @property {string} property - The property changed e.g. playback speed,
 * @property {string} property_value - the setting value. eg. True,
 * @property {string} role - role
 * @property {string} screen_name
 * @property {string} section - The section where the changes occurred, i.e. Blog Menu, Posts, Buttons
 * @property {boolean} toggle - Deprecate
 * @property {string} view_mode - desktop, mobile. NOTE: any Null values belong to desktop
 * @return {LogObject<editorSettingsDesignTabParams>} LogObject<editorSettingsDesignTabParams>
 */
export function editorSettingsDesignTab(params) {
  return { evid: 356, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppPostPreview' event (evid: 1341)
 *
 * Event description: Triggered when user previews a post on the owners app
 *
 * @param {oneAppPostPreviewParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken - msid
 * @property {string} origin - where was the preview triggered: post list, post editor
 * @property {string} post_id - post id
 * @property {GUID} post_stable_id
 * @property {string} preview_type - the preview type: desktop, mobile browser, wix app
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @return {LogObject<oneAppPostPreviewParams>} LogObject<oneAppPostPreviewParams>
 */
export function oneAppPostPreview(params) {
  return { evid: 1341, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppBlogPageSettingsScreenOpened' event (evid: 1331)
 *
 * Event description: User opens the blog Page screen settings
 *
 * @param {oneAppBlogPageSettingsScreenOpenedParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken - msid
 * @property {string} origin - from where did the user get to this screen
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @return {LogObject<oneAppBlogPageSettingsScreenOpenedParams>} LogObject<oneAppBlogPageSettingsScreenOpenedParams>
 */
export function oneAppBlogPageSettingsScreenOpened(params) {
  return { evid: 1331, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postEditorAddMediaElementClick' event (evid: 378)
 *
 * Event description: When the user clicks the "+" in the post editor (sidebar or text area)
 *
 * @param {postEditorAddMediaElementClickParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {GUID} bi_token - MSID
 * @property {GUID} biToken
 * @property {string} origin - sidebar or text area
 * @property {GUID} post_stable_id
 * @property {string} role - Role of the user - writer or admin
 * @property {string} screen_name
 * @property {string} tab_name - Which tab was opened in post settings
 * @return {LogObject<postEditorAddMediaElementClickParams>} LogObject<postEditorAddMediaElementClickParams>
 */
export function postEditorAddMediaElementClick(params) {
  return { evid: 378, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'clickOnTooltip' event (evid: 414)
 *
 * Event description: Fired when the user clicks a link inside a tooltip
 *
 * @param {clickOnTooltipParams} params - The parameters for this event
 * @property {string} click_name - click name
 * @property {GUID} instance_id - instance
 * @property {GUID} biToken - msid
 * @property {string} origin - origin
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @property {string} text - the tooltip text
 * @property {string} tooltip_name - tooltip name
 * @return {LogObject<clickOnTooltipParams>} LogObject<clickOnTooltipParams>
 */
export function clickOnTooltip(params) {
  return { evid: 414, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppManageFilterPostsClick' event (evid: 1305)
 *
 * Event description: Click on filter post in OneApp (to choose your own or written by others posts)
 *
 * @param {oneAppManageFilterPostsClickParams} params - The parameters for this event
 * @property {string} filter - Which filter in Wix App is used: Analytics/posts/drafts
 * @property {GUID} instance_id
 * @property {GUID} biToken - msid
 * @property {string} origin - Where tabs was opened (Manage)
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {string} tab_name - Published/Dratfs
 * @return {LogObject<oneAppManageFilterPostsClickParams>} LogObject<oneAppManageFilterPostsClickParams>
 */
export function oneAppManageFilterPostsClick(params) {
  return { evid: 1305, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'advancedPostSettingsOpen' event (evid: 328)
 *
 * Event description: Advanced post settings opened
 *
 * @param {advancedPostSettingsOpenParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_published - Is post published (1-published)
 * @property {GUID} biToken - MSID
 * @property {string} platform - Was opened in back office/live site
 * @property {string} post_id - post_id
 * @property {GUID} post_stable_id - post stable id
 * @property {string} role - Role of the user - writer or admin
 * @property {string} screen_name
 * @return {LogObject<advancedPostSettingsOpenParams>} LogObject<advancedPostSettingsOpenParams>
 */
export function advancedPostSettingsOpen(params) {
  return { evid: 328, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppModalOptionClick' event (evid: 1321)
 *
 * Event description: Generic event to track clicks within a modal in OneApp
 *
 * @param {oneAppModalOptionClickParams} params - The parameters for this event
 * @property {string} action_name - the option the user clicked / selected on the modal
 * @property {GUID} instance_id - instance
 * @property {string} modal_name - modal name
 * @property {GUID} biToken - msid
 * @property {string} origin - origin - the previous screen/modal
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @property {GUID} visitor_id - visitor
 * @return {LogObject<oneAppModalOptionClickParams>} LogObject<oneAppModalOptionClickParams>
 */
export function oneAppModalOptionClick(params) {
  return { evid: 1321, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'helperShowed' event (evid: 363)
 *
 * Event description: Helper was showed (for custom feed confusion currently, can be reused later for others if needed)
 *
 * @param {helperShowedParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} name - name of helper
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @return {LogObject<helperShowedParams>} LogObject<helperShowedParams>
 */
export function helperShowed(params) {
  return { evid: 363, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneappBlogSearchTextEntered' event (evid: 1336)
 *
 * Event description: After text was entered in search
 *
 * @param {oneappBlogSearchTextEnteredParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken - msid
 * @property {string} origin - Where tabs was opened (Manage)
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {string} tab_name - Posts, Categories, Authors, Tags
 * @property {string} text - Text entered in a search
 * @return {LogObject<oneappBlogSearchTextEnteredParams>} LogObject<oneappBlogSearchTextEnteredParams>
 */
export function oneappBlogSearchTextEntered(params) {
  return { evid: 1336, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postScheduled' event (evid: 336)
 *
 * Event description: triggered when a post is scheduled.
 *
 * @param {postScheduledParams} params - The parameters for this event
 * @property {GUID} app_id - app_id (forum, blog, members)
 * @property {string} category_ids - category_ids. JSON array string
 * @property {number} character_count - The number of characters on the post
 * @property {string} galleries - will sent as array - [{ layout: 'masonry', count: 5}, { layout: 'whatever', count: 10 }]
 * @property {number} giphy_count - count of used  giphy gifs
 * @property {number} image_count - image_count in the post
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_edited - 0 - new post / 1 - edit (to know if its posted for first time)
 * @property {boolean} is_rescheduled - TRUE if rescheduled
 * @property {string} member_id - NOT USED: member_id
 * @property {GUID} biToken
 * @property {number} offset - the user timezone offset relative to UTC (in minutes)
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {string} post_id - post_id
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {DateTime} scheduled_date - The date when the post must be published (UTC)
 * @property {string} screen_name
 * @property {boolean} used_html - 0 - didnt used html component / 1 - used html component
 * @property {number} video_count - video_count in the post
 * @return {LogObject<postScheduledParams>} LogObject<postScheduledParams>
 */
export function postScheduled(params) {
  return { evid: 336, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'blog6thButtonOnBoardingScreenClick' event (evid: 321)
 *
 * Event description: triggered when clicking inside the blog 6th button
 *
 * @param {blog6thButtonOnBoardingScreenClickParams} params - The parameters for this event
 * @property {string} button_name - 'find out more' or 'add now'
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_first_time_view - 1 - onboarding view 0 -blog manager
 * @property {GUID} biToken - msid
 * @property {string} origin - 6th button or Add panel
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @return {LogObject<blog6thButtonOnBoardingScreenClickParams>} LogObject<blog6thButtonOnBoardingScreenClickParams>
 */
export function blog6thButtonOnBoardingScreenClick(params) {
  return { evid: 321, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'multilingualHoverTranslateGlobe' event (evid: 418)
 *
 * Event description: triggered when user hovers on the translate globe.
 *
 * @param {multilingualHoverTranslateGlobeParams} params - The parameters for this event
 * @property {GUID} app_id - app_id (forum, blog, members)
 * @property {string} community_id - community_id (instance of members app)
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {GUID} site_member_id - site_member_id
 * @property {string} tabName - tab name: published, drafts, trash,  categories
 * @return {LogObject<multilingualHoverTranslateGlobeParams>} LogObject<multilingualHoverTranslateGlobeParams>
 */
export function multilingualHoverTranslateGlobe(params) {
  return { evid: 418, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postPageMigrationModalOpened' event (evid: 354)
 *
 * Event description: triggered when Migration post page modal was opened (modal where user can click a button to migrate)
 *
 * @param {postPageMigrationModalOpenedParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken - msid
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<postPageMigrationModalOpenedParams>} LogObject<postPageMigrationModalOpenedParams>
 */
export function postPageMigrationModalOpened(params) {
  return { evid: 354, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'blogSortingAction' event (evid: 1347)
 *
 * Event description: Triggered when users sorts something
 *
 * @param {blogSortingActionParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken - msid
 * @property {string} origin - where the action took place
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @property {string} sorting_type - json with what:how sorted
 * @return {LogObject<blogSortingActionParams>} LogObject<blogSortingActionParams>
 */
export function blogSortingAction(params) {
  return { evid: 1347, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postsBm3Dots' event (evid: 331)
 *
 * Event description: Whenever a user clicks one of the options from the 3 dots menu, in the Business Manager
 *
 * @param {postsBm3DotsParams} params - The parameters for this event
 * @property {string} action - view post, duplicate post, revert to draft, turn off commenting, move to trash, preview draft, duplicate draft
 * @property {GUID} instance_id
 * @property {string} language - the language ML
 * @property {string} language_id - the post_ stable id of the original post
 * @property {GUID} biToken
 * @property {string} post_id - post id
 * @property {GUID} post_stable_id - post stable id
 * @property {string} role - role
 * @property {string} screen_name
 * @property {string} tabName - Posts or Drafts
 * @return {LogObject<postsBm3DotsParams>} LogObject<postsBm3DotsParams>
 */
export function postsBm3Dots(params) {
  return { evid: 331, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'buisinessManagerClickThatDirectsOutOfBm' event (evid: 437)
 *
 * Event description: When the user clicks on a CTA within the BM, that leads to another page outside blog scope. eg. Editor, App market etc..
 *
 * @param {buisinessManagerClickThatDirectsOutOfBmParams} params - The parameters for this event
 * @property {string} click_name - click name
 * @property {string} destination - where is the user being routed to, Editor, app market
 * @property {GUID} instance_id - instance
 * @property {string} language - Language
 * @property {GUID} biToken - msid
 * @property {string} origin - origin
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<buisinessManagerClickThatDirectsOutOfBmParams>} LogObject<buisinessManagerClickThatDirectsOutOfBmParams>
 */
export function buisinessManagerClickThatDirectsOutOfBm(params) {
  return { evid: 437, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppConnectPlanToPost' event (evid: 1325)
 *
 * Event description: triggered in OneApp when the user connects a plan to a post(s)
 *
 * @param {oneAppConnectPlanToPostParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {string} language - language
 * @property {GUID} biToken
 * @property {string} paid_plan_id - Array paid plan Ids
 * @property {string} post_ids - Array of posts
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @property {string} translation_id - translation id
 * @return {LogObject<oneAppConnectPlanToPostParams>} LogObject<oneAppConnectPlanToPostParams>
 */
export function oneAppConnectPlanToPost(params) {
  return { evid: 1325, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'multilingualPostEditorAddTranslationClick' event (evid: 1353)
 *
 * Event description: When a user clicks on add translation in post editor
 *
 * @param {multilingualPostEditorAddTranslationClickParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {string} language - language
 * @property {GUID} biToken
 * @property {GUID} post_stable_id - post_stable_id
 * @property {string} screen_name
 * @return {LogObject<multilingualPostEditorAddTranslationClickParams>} LogObject<multilingualPostEditorAddTranslationClickParams>
 */
export function multilingualPostEditorAddTranslationClick(params) {
  return { evid: 1353, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'migrationCopiedSuccessModalOpened' event (evid: 386)
 *
 * Event description: triggered when Migration Copied success modal opened actually open
 *
 * @param {migrationCopiedSuccessModalOpenedParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_first - is it the first time the user opens this tab?
 * @property {string} migration_status - First time, In progress, Done (after finishing migration)
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} post_stable_id
 * @property {string} referral_info - referral_info
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<migrationCopiedSuccessModalOpenedParams>} LogObject<migrationCopiedSuccessModalOpenedParams>
 */
export function migrationCopiedSuccessModalOpened(params) {
  return { evid: 386, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'actionChoseInBmMoreActionsMenu' event (evid: 344)
 *
 * Event description: Triggered when the user clicks action under more actions menu in blog BO. For click on More actions itself, see event 69:341
 *
 * @param {actionChoseInBmMoreActionsMenuParams} params - The parameters for this event
 * @property {string} actionName - Action name chose inside menu
 * @property {GUID} instance_id - instance
 * @property {GUID} biToken - msid
 * @property {string} origin - origin
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @property {string} source - post BO section name: published, overview
 * @return {LogObject<actionChoseInBmMoreActionsMenuParams>} LogObject<actionChoseInBmMoreActionsMenuParams>
 */
export function actionChoseInBmMoreActionsMenu(params) {
  return { evid: 344, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'writeNewPostClick' event (evid: 308)
 *
 * Event description: triggered when click on write new post CTA
 *
 * @param {writeNewPostClickParams} params - The parameters for this event
 * @property {GUID} app_id - app_id (forum, blog, members)
 * @property {string} community_id - community_id (instance of members app)
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_offline - if the event happened offline
 * @property {string} language - for multilingual
 * @property {string} member_id - member_id
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} original_instance_id - in the members app events. holds the child app (forum/blog) instance_id
 * @property {GUID} post_stable_id
 * @property {string} referral_info - external links - facebook, social networks. if from wix then null
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {GUID} site_member_id - site_member_id
 * @return {LogObject<writeNewPostClickParams>} LogObject<writeNewPostClickParams>
 */
export function writeNewPostClick(params) {
  return { evid: 308, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'blogManagerOpenedBo' event (evid: 301)
 *
 * Event description: triggered when blog manager actually open!
 *
 * @param {blogManagerOpenedBoParams} params - The parameters for this event
 * @property {GUID} app_id - app_id (forum, blog, members)
 * @property {string} community_id - community_id (instance of members app)
 * @property {string} destination - blog manager destination name
 * @property {GUID} instance_id - instance_id
 * @property {string} language - the language if ML
 * @property {string} member_id - member_id
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} original_instance_id - in the members app events. holds the child app (forum/blog) instance_id
 * @property {GUID} post_stable_id
 * @property {string} referral_info - external links - facebook, social networks. if from wix then null
 * @property {string} referrer - the place from which it was open
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {GUID} site_member_id - site_member_id
 * @property {string} version - the biz manager version (null values mean the v1)
 * @return {LogObject<blogManagerOpenedBoParams>} LogObject<blogManagerOpenedBoParams>
 */
export function blogManagerOpenedBo(params) {
  return { evid: 301, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'editorSettingsTabOpened' event (evid: 352)
 *
 * Event description: Tab inside settings opened
 *
 * @param {editorSettingsTabOpenedParams} params - The parameters for this event
 * @property {string} app_id - app_id
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken - msid
 * @property {string} origin - Place settings was changed in: blog_feed, post_page
 * @property {GUID} post_stable_id
 * @property {string} referrer - from which place it was opened
 * @property {string} role - role
 * @property {string} screen_name
 * @property {string} tab_name - tab name inside post settings
 * @property {string} view_mode - desktop, mobile. NOTE: any Null values belong to desktop
 * @return {LogObject<editorSettingsTabOpenedParams>} LogObject<editorSettingsTabOpenedParams>
 */
export function editorSettingsTabOpened(params) {
  return { evid: 352, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'editorCustomizeLayoutButtonClick' event (evid: 420)
 *
 * Event description: User clicked customize layout from the while editing the blog or post feed
 *
 * @param {editorCustomizeLayoutButtonClickParams} params - The parameters for this event
 * @property {GUID} instance_id - instance
 * @property {string} layout - the selected layout
 * @property {GUID} biToken - msid
 * @property {string} origin - post list, blog feed
 * @property {string} post_id - post_id
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @return {LogObject<editorCustomizeLayoutButtonClickParams>} LogObject<editorCustomizeLayoutButtonClickParams>
 */
export function editorCustomizeLayoutButtonClick(params) {
  return { evid: 420, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postTemplatesSeeMoreTemplatesClick' event (evid: 438)
 *
 * Event description: triggered when click on write new post from template
 *
 * @param {postTemplatesSeeMoreTemplatesClickParams} params - The parameters for this event
 * @property {GUID} app_id - app_id (forum, blog, members)
 * @property {GUID} instance_id
 * @property {boolean} is_offline - if the event happened offline
 * @property {string} language - for multilingual
 * @property {GUID} biToken - msid
 * @property {string} origin
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {GUID} site_member_id
 * @return {LogObject<postTemplatesSeeMoreTemplatesClickParams>} LogObject<postTemplatesSeeMoreTemplatesClickParams>
 */
export function postTemplatesSeeMoreTemplatesClick(params) {
  return { evid: 438, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppScrollPositionInPostForReadingTime' event (evid: 444)
 *
 * Event description: triggered when view post type clicked: space by wix or mobile web
 *
 * @param {oneAppScrollPositionInPostForReadingTimeParams} params - The parameters for this event
 * @property {string} button_name - button name clicked under view post: space by wix or mobile web
 * @property {GUID} instance_id - instance id
 * @property {boolean} is_offline - if the action happened while offline
 * @property {boolean} is_published - 0 - not published (draft) / 1 - published
 * @property {string} language - language
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - view post, more actions..
 * @property {string} post_id - post_id
 * @property {GUID} post_stable_id - stable id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {GUID} site_member_id - site_member_id
 * @property {string} translation_id - the original post stable_id
 * @return {LogObject<oneAppScrollPositionInPostForReadingTimeParams>} LogObject<oneAppScrollPositionInPostForReadingTimeParams>
 */
export function oneAppScrollPositionInPostForReadingTime(params) {
  return { evid: 444, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'adiBlogSettingsToggleClick' event (evid: 327)
 *
 * Event description: Which settings user chose on Settings panel in ADI
 *
 * @param {adiBlogSettingsToggleClickParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_enabled - 1 - enabled, 0 - disabled
 * @property {GUID} bi_token - MSID
 * @property {GUID} biToken
 * @property {GUID} post_stable_id
 * @property {string} role - Role of user - writer or admin
 * @property {string} screen_name
 * @property {string} toggle_name - Name of the toggle in blog settings
 * @return {LogObject<adiBlogSettingsToggleClickParams>} LogObject<adiBlogSettingsToggleClickParams>
 */
export function adiBlogSettingsToggleClick(params) {
  return { evid: 327, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'tagCreated' event (evid: 314)
 *
 * Event description: triggered whenever the user removes a tag from the post.
 *
 * @param {tagCreatedParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {string} language - language
 * @property {GUID} biToken
 * @property {string} origin - origin
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @property {GUID} tag_guid - tag stable id
 * @property {string} tagid - tag_id
 * @property {string} tag_name - tag label
 * @property {string} translation_id - translation_id
 * @return {LogObject<tagCreatedParams>} LogObject<tagCreatedParams>
 */
export function tagCreated(params) {
  return { evid: 314, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postPageSettingsClick' event (evid: 1364)
 *
 * Event description: When an option is chosen inside post page settings
 *
 * @param {postPageSettingsClickParams} params - The parameters for this event
 * @property {string} component_type - header, footer, content, global, etc.
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @property {string} settings_name - layout, presets, plugins, design, animation, settings, help. etc
 * @property {string} tab_name - border, shadow, corners, etc
 * @property {string} value - json field with chosen value, e.g.: categories:false, preset:1, header:false, etc.
 * @return {LogObject<postPageSettingsClickParams>} LogObject<postPageSettingsClickParams>
 */
export function postPageSettingsClick(params) {
  return { evid: 1364, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppManageFilterPostsSaveClick' event (evid: 1306)
 *
 * Event description: Click on filter post in OneApp (to choose your own or written by others posts)
 *
 * @param {oneAppManageFilterPostsSaveClickParams} params - The parameters for this event
 * @property {string} filter - Which filter in Wix App is used: Analytics/posts/drafts
 * @property {string} filter_name - "My Posts"/"Posts by Others"/"All Posts"
 * @property {GUID} instance_id
 * @property {GUID} biToken - msid
 * @property {string} origin - Where tabs was opened (Manage)
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @return {LogObject<oneAppManageFilterPostsSaveClickParams>} LogObject<oneAppManageFilterPostsSaveClickParams>
 */
export function oneAppManageFilterPostsSaveClick(params) {
  return { evid: 1306, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postTemplatesPostTemplateFirstView' event (evid: 429)
 *
 * Event description: triggered when user comes to PostTemplate
 *
 * @param {postTemplatesPostTemplateFirstViewParams} params - The parameters for this event
 * @property {GUID} app_id - app_id (forum, blog, members)
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_offline - if the event happened offline
 * @property {string} language - for multilingual
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {GUID} site_member_id - site_member_id
 * @return {LogObject<postTemplatesPostTemplateFirstViewParams>} LogObject<postTemplatesPostTemplateFirstViewParams>
 */
export function postTemplatesPostTemplateFirstView(params) {
  return { evid: 429, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppBlogPageSettingsChanged' event (evid: 1332)
 *
 * Event description: User opens the blog Page screen settings
 *
 * @param {oneAppBlogPageSettingsChangedParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken - msid
 * @property {string} origin - from where did the user get to this screen
 * @property {GUID} post_stable_id
 * @property {string} property - property
 * @property {string} property_value - property value
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {string} tab_name - Post or Category
 * @return {LogObject<oneAppBlogPageSettingsChangedParams>} LogObject<oneAppBlogPageSettingsChangedParams>
 */
export function oneAppBlogPageSettingsChanged(params) {
  return { evid: 1332, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'dotsClickPostEditor' event (evid: 339)
 *
 * Event description: Triggered when the user clicks on the 3 dots menu that sits next to the publish button, within the Post Editor
 *
 * @param {dotsClickPostEditorParams} params - The parameters for this event
 * @property {GUID} instance_id - instance
 * @property {boolean} is_published - Is post published
 * @property {GUID} biToken
 * @property {string} origin - origin
 * @property {string} post_id - post id
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<dotsClickPostEditorParams>} LogObject<dotsClickPostEditorParams>
 */
export function dotsClickPostEditor(params) {
  return { evid: 339, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postEditorOpened' event (evid: 307)
 *
 * Event description: triggered when post editor opened
 *
 * @param {postEditorOpenedParams} params - The parameters for this event
 * @property {GUID} app_id - app_id (forum, blog, members)
 * @property {number} character_count - character count in post (sends only on Web)
 * @property {string} community_id - NOT IN USE: community_id (instance of members app)
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_offline - if the event happened offline
 * @property {boolean} is_published - 0 - not published (draft) / 1 - published
 * @property {string} language - to be used in multilingual context.
 * @property {string} member_id - member_id
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} original_instance_id - NOT IN USE: in the members app events. holds the child app (forum/blog) instance_id
 * @property {string} post_id - post_id
 * @property {GUID} post_stable_id - stable id
 * @property {string} post_title - post title
 * @property {string} referral_info - NOT IN USE: external links - facebook, social networks. if from wix then null
 * @property {string} referrer - the place from which it was opened
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {GUID} site_member_id - site_member_id
 * @property {string} translatation_id - the post_stable_id of the translated post
 * @return {LogObject<postEditorOpenedParams>} LogObject<postEditorOpenedParams>
 */
export function postEditorOpened(params) {
  return { evid: 307, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppManageCategoriesThreeDotsClick' event (evid: 1310)
 *
 * Event description: Number of posts found in search in OneApp Manage
 *
 * @param {oneAppManageCategoriesThreeDotsClickParams} params - The parameters for this event
 * @property {string} category_id - category_id
 * @property {GUID} instance_id - instance_id
 * @property {string} language - language
 * @property {GUID} biToken - msid
 * @property {string} origin - Where tabs was opened (Manage)
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {string} translation_id - translation id
 * @return {LogObject<oneAppManageCategoriesThreeDotsClickParams>} LogObject<oneAppManageCategoriesThreeDotsClickParams>
 */
export function oneAppManageCategoriesThreeDotsClick(params) {
  return { evid: 1310, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'multilingualLanguagePickerOpen' event (evid: 415)
 *
 * Event description: Triggered when the user clicks and opens on the language picker
 *
 * @param {multilingualLanguagePickerOpenParams} params - The parameters for this event
 * @property {GUID} instance_id - instance id
 * @property {boolean} isFilter - is the language picker a filter?
 * @property {GUID} biToken - instance id
 * @property {string} origin - origin
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @property {string} tabName - tab name
 * @return {LogObject<multilingualLanguagePickerOpenParams>} LogObject<multilingualLanguagePickerOpenParams>
 */
export function multilingualLanguagePickerOpen(params) {
  return { evid: 415, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'migrationUpdateAndPublishConfirmationClick' event (evid: 392)
 *
 * Event description: triggered when users click on Update and publish confirmation click
 *
 * @param {migrationUpdateAndPublishConfirmationClickParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_first - is it the first time the user opens this tab?
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} post_stable_id
 * @property {string} referral_info - referral_info
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<migrationUpdateAndPublishConfirmationClickParams>} LogObject<migrationUpdateAndPublishConfirmationClickParams>
 */
export function migrationUpdateAndPublishConfirmationClick(params) {
  return { evid: 392, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'modalAction' event (evid: 348)
 *
 * Event description: Action on Modal - generic event for many different modals.
 *
 * --Draft refresh:
 * Action on modal to refresh draft (there exists another version of the draft in another tab or Wix app)
 *
 * @param {modalActionParams} params - The parameters for this event
 * @property {string} action - Action on modal (for Draft refresh - close/save this version/discard this version)
 * @property {string} additional_info - json with additional_info
 * @property {string} available_languages - an array with the available languages
 * @property {string} dataJson - if the modal has selections for the user those selections will be stored here
 * @property {string} default_language - default language
 * @property {GUID} instance_id
 * @property {string} language_selected - In multilingual context stores the language that the user chose
 * @property {string} modal_name - modal name
 * @property {GUID} biToken
 * @property {string} origin - origin
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<modalActionParams>} LogObject<modalActionParams>
 */
export function modalAction(params) {
  return { evid: 348, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'migrationKeepGoingClick' event (evid: 387)
 *
 * Event description: triggered when users click on Keep going click
 *
 * @param {migrationKeepGoingClickParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_first - is it the first time the user opens this tab?
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} post_stable_id
 * @property {string} referral_info - referral_info
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<migrationKeepGoingClickParams>} LogObject<migrationKeepGoingClickParams>
 */
export function migrationKeepGoingClick(params) {
  return { evid: 387, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'migrationDoneClick' event (evid: 394)
 *
 * Event description: triggered when users click on done click
 *
 * @param {migrationDoneClickParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_first - is it the first time the user opens this tab?
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} post_stable_id
 * @property {string} referral_info - referral_info
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<migrationDoneClickParams>} LogObject<migrationDoneClickParams>
 */
export function migrationDoneClick(params) {
  return { evid: 394, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppGenericModalShown' event (evid: 1320)
 *
 * Event description: Modal shown - generic event for many different modals.
 *
 * @param {oneAppGenericModalShownParams} params - The parameters for this event
 * @property {GUID} instance_id - instance
 * @property {string} modal_name - modal name
 * @property {GUID} biToken - msid
 * @property {string} origin - origin - the previous screen/modal
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @property {GUID} visitor_id - visitor
 * @return {LogObject<oneAppGenericModalShownParams>} LogObject<oneAppGenericModalShownParams>
 */
export function oneAppGenericModalShown(params) {
  return { evid: 1320, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'fullstorySession' event (evid: 400)
 *
 * Event description: triggered when a Fullstory session started
 *
 * @param {fullstorySessionParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken - msid
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @return {LogObject<fullstorySessionParams>} LogObject<fullstorySessionParams>
 */
export function fullstorySession(params) {
  return { evid: 400, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppBlogSearchResultClicked' event (evid: 1338)
 *
 * Event description: After clicking on search in OneApp blog home
 *
 * @param {oneAppBlogSearchResultClickedParams} params - The parameters for this event
 * @property {GUID} author_id - author id
 * @property {string} category_id - category id
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken - msid
 * @property {string} origin - Where tabs was opened (Manage)
 * @property {string} post_id - post id
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {string} tagid - tag id
 * @return {LogObject<oneAppBlogSearchResultClickedParams>} LogObject<oneAppBlogSearchResultClickedParams>
 */
export function oneAppBlogSearchResultClicked(params) {
  return { evid: 1338, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppCustomizeBlogSections' event (evid: 1327)
 *
 * Event description: When a user clicks customize from the admin menu on the blog tab. One app only!
 *
 * @param {oneAppCustomizeBlogSectionsParams} params - The parameters for this event
 * @property {string} app_id - app_id
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken - msid
 * @property {string} origin - Post Page Settings, app settings (feed)
 * @property {GUID} post_stable_id
 * @property {string} property - The setting name
 * @property {string} property_value - The setting value
 * @property {string} role - role
 * @property {string} screen_name
 * @property {string} section - which section is being edited. (header, navigation tabs, category list etc..)
 * @property {string} tab_name - tab name (member view or place card)
 * @return {LogObject<oneAppCustomizeBlogSectionsParams>} LogObject<oneAppCustomizeBlogSectionsParams>
 */
export function oneAppCustomizeBlogSections(params) {
  return { evid: 1327, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'migrationCloseModalClick' event (evid: 388)
 *
 * Event description: triggered when users click on Keep going click
 *
 * @param {migrationCloseModalClickParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_first - is it the first time the user opens this tab?
 * @property {string} modal_name - post transferred, success
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} post_stable_id
 * @property {string} referral_info - referral_info
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<migrationCloseModalClickParams>} LogObject<migrationCloseModalClickParams>
 */
export function migrationCloseModalClick(params) {
  return { evid: 388, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppTabOpenedInManage' event (evid: 1301)
 *
 * Event description: User opened tab in OneApp Manage section
 *
 * @param {oneAppTabOpenedInManageParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken - msid
 * @property {string} origin - Where tabs was opened (Manage)
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {string} tab_name - tab name opened in Manage
 * @return {LogObject<oneAppTabOpenedInManageParams>} LogObject<oneAppTabOpenedInManageParams>
 */
export function oneAppTabOpenedInManage(params) {
  return { evid: 1301, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'migrationImportPageSecondStepOpened' event (evid: 389)
 *
 * Event description: triggered when Migration Import page second step actually open
 *
 * @param {migrationImportPageSecondStepOpenedParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_first - is it the first time the user opens this tab?
 * @property {string} migration_status - First time, In progress, Done (after finishing migration)
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} post_stable_id
 * @property {string} referral_info - referral_info
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<migrationImportPageSecondStepOpenedParams>} LogObject<migrationImportPageSecondStepOpenedParams>
 */
export function migrationImportPageSecondStepOpened(params) {
  return { evid: 389, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'multilingualCategoryTranslateClick' event (evid: 417)
 *
 * Event description: triggered when click on translate CTA
 *
 * @param {multilingualCategoryTranslateClickParams} params - The parameters for this event
 * @property {GUID} app_id - app_id (forum, blog, members)
 * @property {string} category_id - category id
 * @property {string} community_id - community_id (instance of members app)
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {GUID} site_member_id - site_member_id
 * @property {string} translation_id - the category id of the translated post
 * @return {LogObject<multilingualCategoryTranslateClickParams>} LogObject<multilingualCategoryTranslateClickParams>
 */
export function multilingualCategoryTranslateClick(params) {
  return { evid: 417, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'clickOnLink' event (evid: 441)
 *
 * @param {clickOnLinkParams} params - The parameters for this event
 * @property {Url} button_link - the link of the button( particular support page)
 * @property {string} button_name - How the button is named
 * @property {GUID} instance_id
 * @property {GUID} bi_token - msis
 * @property {GUID} biToken
 * @property {string} origin - For example: ‘Blog’ , ‘RSS Widget’ , ‘Post Page’ , ‘Post List’ and so on
 * @property {string} origin_name
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @property {string} tab_name
 * @property {GUID} uuid
 * @return {LogObject<clickOnLinkParams>} LogObject<clickOnLinkParams>
 */
export function clickOnLink(params) {
  return { evid: 441, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'blogSettingsEditSeoBlogCategoriesClick' event (evid: 369)
 *
 * Event description: triggered when the user clicks on the edit button on the Blog settings screen, under the SEO settings section.
 *
 * @param {blogSettingsEditSeoBlogCategoriesClickParams} params - The parameters for this event
 * @property {GUID} instance_id - instance
 * @property {GUID} biToken - msid
 * @property {string} origin - origin
 * @property {GUID} post_stable_id
 * @property {string} referrer - referrer
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<blogSettingsEditSeoBlogCategoriesClickParams>} LogObject<blogSettingsEditSeoBlogCategoriesClickParams>
 */
export function blogSettingsEditSeoBlogCategoriesClick(params) {
  return { evid: 369, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postPublished' event (evid: 303)
 *
 * Event description: triggered when post: Created(Published), Updated, Unpublished, Moved to trash, Deleted,
 *
 * @param {postPublishedParams} params - The parameters for this event
 * @property {GUID} app_id - app_id (forum, blog, members)
 * @property {GUID} author_id - author id
 * @property {number} categories_count - NOT IN USE: categories_count that post was assigned to
 * @property {string} category_ids - category_ids. JSON array string
 * @property {number} character_count - The number of characters on the post
 * @property {string} community_id - NOT IN USE: community_id (instance of members app)
 * @property {string} galleries - will sent as array - [{ layout: 'masonry', count: 5}, { layout: 'whatever', count: 10 }]
 * @property {number} giphy_count - count of used  giphy gifs
 * @property {boolean} has_gallery - NOT IN USE: 0 - no gallery / 1 - published with gallery
 * @property {number} image_count - image_count in the post
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_edited - 0 - new post / 1 - edit (to know if its posted for first time)
 * @property {boolean} is_published - 0 - not published (draft) / 1 - published
 * @property {string} language - for multilingual
 * @property {string} member_id - member_id
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} original_instance_id - Currently being used for wix reads posts.in the members app events. holds the child app (forum/blog) instance_id
 * @property {string} original_post_id - the original post id
 * @property {string} paid_plan_id - Array of paid plan ids
 * @property {string} post_id - post_id
 * @property {GUID} post_stable_id - stable id
 * @property {string} post_title - post title
 * @property {string} referral_info - NOT IN USE: external links - facebook, social networks. if from wix then null
 * @property {string} related_post_ids - array with related post Ids
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {string} tag_ids - array of tags
 * @property {string} translation_id - the post_stable_id of the post that was translated
 * @property {string} url - the post url
 * @property {boolean} used_html - 0 - didnt used html component / 1 - used html component
 * @property {number} video_count - video_count in the post
 * @return {LogObject<postPublishedParams>} LogObject<postPublishedParams>
 */
export function postPublished(params) {
  return { evid: 303, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'wixPostImporterImportStarted' event (evid: 421)
 *
 * @param {wixPostImporterImportStartedParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken - msid
 * @property {number} num_posts_total - the number of posts to be imported
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} original_instance_id - the instance_id from which the posts were imported
 * @property {GUID} original_msid - the msid from which the posts were imported
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<wixPostImporterImportStartedParams>} LogObject<wixPostImporterImportStartedParams>
 */
export function wixPostImporterImportStarted(params) {
  return { evid: 421, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'wixPostImporterImportFinished' event (evid: 422)
 *
 * Event description: Triggered when the import wix posts process starts
 *
 * @param {wixPostImporterImportFinishedParams} params - The parameters for this event
 * @property {string} fail_reason - if the import failed what was the reason
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_successful - was the import successful
 * @property {GUID} biToken - msid
 * @property {number} num_posts_total - the number of posts to be imported
 * @property {number} num_posts_unsucc - number of posts that failed to import
 * @property {string} origin
 * @property {GUID} original_instance_id - the instance_id from which the posts were imported
 * @property {GUID} original_msid - the msid from which the posts were imported
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<wixPostImporterImportFinishedParams>} LogObject<wixPostImporterImportFinishedParams>
 */
export function wixPostImporterImportFinished(params) {
  return { evid: 422, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'monetizationTabClick' event (evid: 1356)
 *
 * Event description: All of the clicks inside of monetization tab
 *
 * @param {monetizationTabClickParams} params - The parameters for this event
 * @property {string} additional_info - json with additional info, e.g. article link
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken
 * @property {string} name - name of the click
 * @property {string} parent_name - tools/video/articles
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @return {LogObject<monetizationTabClickParams>} LogObject<monetizationTabClickParams>
 */
export function monetizationTabClick(params) {
  return { evid: 1356, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppClickInsideSwipeAction' event (evid: 1304)
 *
 * Event description: User chose action after swipe
 *
 * @param {oneAppClickInsideSwipeActionParams} params - The parameters for this event
 * @property {string} action - Settings/Edit
 * @property {GUID} instance_id
 * @property {boolean} is_published - 0 - not published (draft) / 1 - published
 * @property {GUID} biToken - msid
 * @property {string} origin - OneApp Manage
 * @property {string} post_id - post_id
 * @property {GUID} post_stable_id - stable id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @return {LogObject<oneAppClickInsideSwipeActionParams>} LogObject<oneAppClickInsideSwipeActionParams>
 */
export function oneAppClickInsideSwipeAction(params) {
  return { evid: 1304, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postHistoryPostHistoryScreenShown' event (evid: 434)
 *
 * Event description: When the user sees the post history screen
 *
 * @param {postHistoryPostHistoryScreenShownParams} params - The parameters for this event
 * @property {GUID} instance_id - instance
 * @property {string} language - language
 * @property {GUID} biToken - msid
 * @property {string} origin - origin - examples: related_posts, paid_plans etc..
 * @property {string} post_id - post_id if applicable
 * @property {GUID} post_stable_id - post stable id
 * @property {number} revision_count - the number of revisions displayed
 * @property {string} role - role
 * @property {string} screen_name
 * @property {string} translation_id - translation id
 * @return {LogObject<postHistoryPostHistoryScreenShownParams>} LogObject<postHistoryPostHistoryScreenShownParams>
 */
export function postHistoryPostHistoryScreenShown(params) {
  return { evid: 434, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppPreviousNextPostArrowClick' event (evid: 1339)
 *
 * Event description: the user clicked on the previous or next post within the post page
 *
 * @param {oneAppPreviousNextPostArrowClickParams} params - The parameters for this event
 * @property {string} action - previous or next post
 * @property {GUID} instance_id - instance
 * @property {GUID} biToken - msid
 * @property {string} origin - post page
 * @property {string} post_id - post_id
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @return {LogObject<oneAppPreviousNextPostArrowClickParams>} LogObject<oneAppPreviousNextPostArrowClickParams>
 */
export function oneAppPreviousNextPostArrowClick(params) {
  return { evid: 1339, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'followUnfollowCategoryClickWixReads' event (evid: 1328)
 *
 * Event description: When the user clicks to follow or unfollow
 *
 * @param {followUnfollowCategoryClickWixReadsParams} params - The parameters for this event
 * @property {string} category_id - category id
 * @property {string} category_name - category name
 * @property {GUID} instance_id - instance
 * @property {boolean} is_followed - 1- followed, 0 - unfollowed
 * @property {GUID} biToken - msid
 * @property {string} origin - origin
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @return {LogObject<followUnfollowCategoryClickWixReadsParams>} LogObject<followUnfollowCategoryClickWixReadsParams>
 */
export function followUnfollowCategoryClickWixReads(params) {
  return { evid: 1328, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'migrationLearnHowToSwitchDeleteOldBlog' event (evid: 398)
 *
 * Event description: Whenever the user clicks on the learn how link from the old blog 6th button - learn how to delete, learn how to switch
 *
 * @param {migrationLearnHowToSwitchDeleteOldBlogParams} params - The parameters for this event
 * @property {string} action - switch, delete
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} origin - old blog 6th button
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<migrationLearnHowToSwitchDeleteOldBlogParams>} LogObject<migrationLearnHowToSwitchDeleteOldBlogParams>
 */
export function migrationLearnHowToSwitchDeleteOldBlog(params) {
  return { evid: 398, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppReportSelectedClick' event (evid: 443)
 *
 * Event description: user selected any report under analytics page
 *
 * @param {oneAppReportSelectedClickParams} params - The parameters for this event
 * @property {string} analytics_report_id - id of the report
 * @property {string} analytics_report_name - name of the report
 * @property {GUID} instance_id - instance id
 * @property {GUID} biToken - msisd
 * @property {string} origin - analytics page
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @return {LogObject<oneAppReportSelectedClickParams>} LogObject<oneAppReportSelectedClickParams>
 */
export function oneAppReportSelectedClick(params) {
  return { evid: 443, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'blogSettingsEditSeoBlogPostsClick' event (evid: 368)
 *
 * Event description: triggered when the user clicks on the edit button on the Blog settings screen, under the SEO settings section.
 *
 * @param {blogSettingsEditSeoBlogPostsClickParams} params - The parameters for this event
 * @property {string} click_name - which cta the user clicked: Posts, Categories or Tags
 * @property {GUID} instance_id - instance
 * @property {GUID} biToken - msid
 * @property {string} origin - origin
 * @property {GUID} post_stable_id
 * @property {string} referrer - referrer
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<blogSettingsEditSeoBlogPostsClickParams>} LogObject<blogSettingsEditSeoBlogPostsClickParams>
 */
export function blogSettingsEditSeoBlogPostsClick(params) {
  return { evid: 368, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneappManageSearchTextEntered' event (evid: 1308)
 *
 * Event description: After text was entered in search
 *
 * @param {oneappManageSearchTextEnteredParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken - msid
 * @property {string} origin - Where tabs was opened (Manage)
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {string} text - Text entered in a search
 * @return {LogObject<oneappManageSearchTextEnteredParams>} LogObject<oneappManageSearchTextEnteredParams>
 */
export function oneappManageSearchTextEntered(params) {
  return { evid: 1308, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'blogNotificationButtonClick' event (evid: 1358)
 *
 * Event description: When a button is clicked in the blog notification
 *
 * @param {blogNotificationButtonClickParams} params - The parameters for this event
 * @property {string} button_name - button_name
 * @property {string} content - what is written in the notification
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} origin - where the notification was shown
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @return {LogObject<blogNotificationButtonClickParams>} LogObject<blogNotificationButtonClickParams>
 */
export function blogNotificationButtonClick(params) {
  return { evid: 1358, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'blogTabInBmOpened' event (evid: 325)
 *
 * Event description: Tab in Blog Manager opened
 *
 * @param {blogTabInBmOpenedParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {string} language - the language that was rendered
 * @property {GUID} bi_token - msid
 * @property {GUID} biToken
 * @property {string} name - Opened Tab name in Blog Back Office
 * @property {string} place - Place where tab was opened (sidebar / blog posts list)
 * @property {GUID} post_stable_id
 * @property {string} referrer - from which place it was opened
 * @property {string} role - Role of user - writer or admin
 * @property {string} screen_name
 * @property {GUID} site_member_id - site_member_id
 * @property {string} tab_name - Opened Tab in Blog Back Office
 * @return {LogObject<blogTabInBmOpenedParams>} LogObject<blogTabInBmOpenedParams>
 */
export function blogTabInBmOpened(params) {
  return { evid: 325, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postSelectorAction' event (evid: 359)
 *
 * Event description: triggered when the user closes the post selector. Stores the
 *
 * @param {postSelectorActionParams} params - The parameters for this event
 * @property {string} action - The button that the user clicked, Cancel, Done, 'X'
 * @property {GUID} instance_id - instance
 * @property {GUID} biToken - msid
 * @property {string} origin - origin
 * @property {string} post_id - post_id if applicable
 * @property {string} post_ids - array of post_id
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<postSelectorActionParams>} LogObject<postSelectorActionParams>
 */
export function postSelectorAction(params) {
  return { evid: 359, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'blogWidgetElementRemoved' event (evid: 358)
 *
 * Event description: Triggered when the user clicks on a CTA that requires selecting multiple posts.
 *
 * @param {blogWidgetElementRemovedParams} params - The parameters for this event
 * @property {GUID} instance_id - instance
 * @property {GUID} biToken - msid
 * @property {string} origin - origin - examples: related_posts, paid_plans etc..
 * @property {string} post_id - post_id if applicable
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<blogWidgetElementRemovedParams>} LogObject<blogWidgetElementRemovedParams>
 */
export function blogWidgetElementRemoved(params) {
  return { evid: 358, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'ratingsCommentsToggleInBlogBm' event (evid: 1348)
 *
 * Event description: When Ratings or Comments are toggled on/off in Blog BM settings.
 *
 * @param {ratingsCommentsToggleInBlogBmParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @property {boolean} toggle - true/false
 * @property {string} type - comments/ratings
 * @return {LogObject<ratingsCommentsToggleInBlogBmParams>} LogObject<ratingsCommentsToggleInBlogBmParams>
 */
export function ratingsCommentsToggleInBlogBm(params) {
  return { evid: 1348, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'migrationCopyPostsClick' event (evid: 385)
 *
 * Event description: triggered when users click on Copy posts
 *
 * @param {migrationCopyPostsClickParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_first - is it the first time the user opens this tab?
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} post_stable_id
 * @property {string} referral_info - referral_info
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<migrationCopyPostsClickParams>} LogObject<migrationCopyPostsClickParams>
 */
export function migrationCopyPostsClick(params) {
  return { evid: 385, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppBlogSearchClicked' event (evid: 1335)
 *
 * Event description: After clicking on search in OneApp blog home
 *
 * @param {oneAppBlogSearchClickedParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken - msid
 * @property {string} origin - Where tabs was opened (Manage)
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @return {LogObject<oneAppBlogSearchClickedParams>} LogObject<oneAppBlogSearchClickedParams>
 */
export function oneAppBlogSearchClicked(params) {
  return { evid: 1335, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'tagManagerThreeDotsClicked' event (evid: 1346)
 *
 * Event description: When three dots are clicked in the tag manager
 *
 * @param {tagManagerThreeDotsClickedParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken - msid
 * @property {string} origin - where the action took place
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @property {string} tagid - tag id
 * @return {LogObject<tagManagerThreeDotsClickedParams>} LogObject<tagManagerThreeDotsClickedParams>
 */
export function tagManagerThreeDotsClicked(params) {
  return { evid: 1346, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'blogCardShown' event (evid: 1343)
 *
 * Event description: When a specific card is shown in Blog, e.g. regarding WP import status
 *
 * @param {blogCardShownParams} params - The parameters for this event
 * @property {string} card_name - name of the card, e.g.: "post_importer"
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} origin - origin
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @property {string} values_json - what is shown in the card
 * @return {LogObject<blogCardShownParams>} LogObject<blogCardShownParams>
 */
export function blogCardShown(params) {
  return { evid: 1343, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'blog6thButtonBlogElementAdded' event (evid: 322)
 *
 * Event description: triggered when adding blog element from the blog 6th button
 *
 * @param {blog6thButtonBlogElementAddedParams} params - The parameters for this event
 * @property {string} editor_working_mode - dummy
 * @property {string} element_type - recent post, custom feed
 * @property {GUID} esi - dummy
 * @property {GUID} id - unique id of a widget to connect to other events
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_first_time_view - dummy
 * @property {string} layout - layout of the element that was added
 * @property {GUID} biToken - msid
 * @property {string} origin - 6th button or Add panel
 * @property {string} pageType - the page the widget was added on. Home, Post, other
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @property {number} ts - dummy
 * @property {string} viewmode - dummy
 * @property {string} widget_id - widget_id
 * @return {LogObject<blog6thButtonBlogElementAddedParams>} LogObject<blog6thButtonBlogElementAddedParams>
 */
export function blog6thButtonBlogElementAdded(params) {
  return { evid: 322, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'migrationUpdateAndPublishClick' event (evid: 390)
 *
 * Event description: triggered when users click on Update and publish click
 *
 * @param {migrationUpdateAndPublishClickParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_first - is it the first time the user opens this tab?
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} post_stable_id
 * @property {string} referral_info - referral_info
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<migrationUpdateAndPublishClickParams>} LogObject<migrationUpdateAndPublishClickParams>
 */
export function migrationUpdateAndPublishClick(params) {
  return { evid: 390, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppGenericActionSheetShown' event (evid: 1324)
 *
 * Event description: Action sheet showed - a generic event for many different action sheets.
 *
 * @param {oneAppGenericActionSheetShownParams} params - The parameters for this event
 * @property {string} action_sheet_name - action sheet name
 * @property {GUID} instance_id - instance
 * @property {GUID} biToken - msid
 * @property {string} origin - origin - the previous screen/modal
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @property {GUID} visitor_id - visitor
 * @return {LogObject<oneAppGenericActionSheetShownParams>} LogObject<oneAppGenericActionSheetShownParams>
 */
export function oneAppGenericActionSheetShown(params) {
  return { evid: 1324, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'authorEdited' event (evid: 366)
 *
 * @param {authorEditedParams} params - The parameters for this event
 * @property {GUID} author_id - Author id = site member id
 * @property {string} author_role - Currently just "Offline/Owner" - might be reused later
 * @property {boolean} cover_changed - cover has changed
 * @property {boolean} has_cover - does have a cover image
 * @property {boolean} has_picture - TRUE if author already has a picture (nice to have)
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} new_author_name - new name after edit
 * @property {string} new_author_title - new title after edit
 * @property {string} origin - origin
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @property {boolean} was_name_changed
 * @property {boolean} was_picture_changed - if picture was changed on editing author
 * @return {LogObject<authorEditedParams>} LogObject<authorEditedParams>
 */
export function authorEdited(params) {
  return { evid: 366, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'blogSettingsOpenedInBm' event (evid: 360)
 *
 * Event description: Blog settings opened (in BM)
 *
 * @param {blogSettingsOpenedInBmParams} params - The parameters for this event
 * @property {string} app_id - app_id
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} origin - BM_posts
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<blogSettingsOpenedInBmParams>} LogObject<blogSettingsOpenedInBmParams>
 */
export function blogSettingsOpenedInBm(params) {
  return { evid: 360, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postPageMigrationSuccess' event (evid: 355)
 *
 * Event description: triggered when users successfully migrated
 *
 * @param {postPageMigrationSuccessParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken - msid
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<postPageMigrationSuccessParams>} LogObject<postPageMigrationSuccessParams>
 */
export function postPageMigrationSuccess(params) {
  return { evid: 355, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'errorMessageShowCtaClick' event (evid: 373)
 *
 * Event description: whenever an error msg cta is clicked (customer care, cancel etc..)
 *
 * @param {errorMessageShowCtaClickParams} params - The parameters for this event
 * @property {string} action - the cta clicked - customer care, cancel ... others
 * @property {number} error_code - http error code
 * @property {string} error_message - error message
 * @property {string} error_type - error type
 * @property {GUID} instance_id - instance
 * @property {GUID} biToken - msid
 * @property {string} origin - origin
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @property {string} type - The way it was displayed: Tooltip, Modal, toast etc..
 * @return {LogObject<errorMessageShowCtaClickParams>} LogObject<errorMessageShowCtaClickParams>
 */
export function errorMessageShowCtaClick(params) {
  return { evid: 373, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'modalShown' event (evid: 347)
 *
 * Event description: Modal shown - generic event for many different modals.
 *
 * --Draft refresh:
 * Modal to refresh draft shown (there exists another version of the draft in another tab or Wix app)
 *
 * @param {modalShownParams} params - The parameters for this event
 * @property {string} additional_info - json with additional info
 * @property {GUID} instance_id
 * @property {string} modal_name - modal name
 * @property {GUID} biToken
 * @property {string} origin - origin
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<modalShownParams>} LogObject<modalShownParams>
 */
export function modalShown(params) {
  return { evid: 347, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postPagePostPageSettingsDisplayTab' event (evid: 353)
 *
 * Event description: Tab inside post page opened
 *
 * @param {postPagePostPageSettingsDisplayTabParams} params - The parameters for this event
 * @property {string} app_id - app_id
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken - msid
 * @property {string} origin - Post Page Settings, app settings (feed)
 * @property {GUID} post_stable_id
 * @property {string} property - the property that was changed
 * @property {string} property_value - the value of the property
 * @property {string} role - role
 * @property {string} screen_name
 * @property {string} section - setting name, i.e. author name and picture, date and reading time, login from blog menu,  etc.
 * @property {boolean} toggle - toggle, 1 if checked, 0 if unchecked
 * @property {string} view_mode - desktop, mobile. NOTE: any Null values belong to desktop
 * @return {LogObject<postPagePostPageSettingsDisplayTabParams>} LogObject<postPagePostPageSettingsDisplayTabParams>
 */
export function postPagePostPageSettingsDisplayTab(params) {
  return { evid: 353, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'categoriesTabGenericAction' event (evid: 1365)
 *
 * Event description: Clicks inside categories tab
 *
 * @param {categoriesTabGenericActionParams} params - The parameters for this event
 * @property {string} action - action
 * @property {string} category_id - category_id
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @return {LogObject<categoriesTabGenericActionParams>} LogObject<categoriesTabGenericActionParams>
 */
export function categoriesTabGenericAction(params) {
  return { evid: 1365, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postFeedFilterSettingsCategoryAndTags' event (evid: 318)
 *
 * Event description: Whenever a user selects a filter for the post list from the settings button.
 *
 * @param {postFeedFilterSettingsCategoryAndTagsParams} params - The parameters for this event
 * @property {string} category_id - category Id
 * @property {string} category_name - category name
 * @property {GUID} category_stable_id - category stable id
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @property {GUID} tag_guid - tag stable id
 * @property {string} tagid - tag_id, null if user selected all posts
 * @property {string} tag_name - tag label
 * @return {LogObject<postFeedFilterSettingsCategoryAndTagsParams>} LogObject<postFeedFilterSettingsCategoryAndTagsParams>
 */
export function postFeedFilterSettingsCategoryAndTags(params) {
  return { evid: 318, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'errorEvent' event (evid: 338)
 *
 * Event description: whenever the user sees an error message in post editor. Not sent if internet is gone for user, but user sees modal
 *
 * @param {errorEventParams} params - The parameters for this event
 * @property {string} action - which action triggered the error ( e.g. scheduling a post, publishing a post etc)
 * @property {string} applicationCode - applicationCode
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} post_id - post id
 * @property {GUID} post_stable_id
 * @property {string} request_id - request_id (optional)
 * @property {string} screen_name
 * @return {LogObject<errorEventParams>} LogObject<errorEventParams>
 */
export function errorEvent(params) {
  return { evid: 338, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'multilingualError' event (evid: 1352)
 *
 * Event description: When a user encounters a multilingual related error
 *
 * @param {multilingualErrorParams} params - The parameters for this event
 * @property {string} errorMessage - the message which is displayed in the error
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken
 * @property {GUID} post_stable_id - post_stable_id
 * @property {string} screen_name
 * @return {LogObject<multilingualErrorParams>} LogObject<multilingualErrorParams>
 */
export function multilingualError(params) {
  return { evid: 1352, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppBlogOnboardingStepsButtonClick' event (evid: 1334)
 *
 * Event description: The user clicked a button on the onboarding
 *
 * @param {oneAppBlogOnboardingStepsButtonClickParams} params - The parameters for this event
 * @property {string} button_name - add post, skip, undo etc...
 * @property {GUID} instance_id - instance
 * @property {GUID} biToken - msid
 * @property {string} origin - manage blog
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {string} step_name - add your first post, invite members etc..
 * @return {LogObject<oneAppBlogOnboardingStepsButtonClickParams>} LogObject<oneAppBlogOnboardingStepsButtonClickParams>
 */
export function oneAppBlogOnboardingStepsButtonClick(params) {
  return { evid: 1334, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'categoriesTabBulkAction' event (evid: 1366)
 *
 * Event description: Categories tab bulk action
 *
 * @param {categoriesTabBulkActionParams} params - The parameters for this event
 * @property {string} action - what action was done
 * @property {string} category_ids - json with selected categories
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @return {LogObject<categoriesTabBulkActionParams>} LogObject<categoriesTabBulkActionParams>
 */
export function categoriesTabBulkAction(params) {
  return { evid: 1366, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'forumsSettingsChooseYourForumStructure' event (evid: 302)
 *
 * Event description: triggered when forum structure options switched
 *
 * @param {forumsSettingsChooseYourForumStructureParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @property {string} type - 'List of Categoire' or 'List of all posts'
 * @property {GUID} uuid - app_id (forum, blog, members)
 * @return {LogObject<forumsSettingsChooseYourForumStructureParams>} LogObject<forumsSettingsChooseYourForumStructureParams>
 */
export function forumsSettingsChooseYourForumStructure(params) {
  return { evid: 302, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppManageCategoriesAddNewCategoryClick' event (evid: 1312)
 *
 * Event description: Clicked on add new category button in OneApp
 *
 * @param {oneAppManageCategoriesAddNewCategoryClickParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {string} language - for multilingual
 * @property {GUID} biToken - msid
 * @property {string} origin - Where tabs was opened (Manage)
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @return {LogObject<oneAppManageCategoriesAddNewCategoryClickParams>} LogObject<oneAppManageCategoriesAddNewCategoryClickParams>
 */
export function oneAppManageCategoriesAddNewCategoryClick(params) {
  return { evid: 1312, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'emailMarketingSelectPost' event (evid: 335)
 *
 * Event description: Whenever the user selects a post from the Email marketing post selection modal.
 *
 * @param {emailMarketingSelectPostParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} post_id - post id
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<emailMarketingSelectPostParams>} LogObject<emailMarketingSelectPostParams>
 */
export function emailMarketingSelectPost(params) {
  return { evid: 335, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'blogSettingsBackToBlogSettingsToastClick' event (evid: 370)
 *
 * Event description: triggered when the user clicks on the back to blog settings toast on the SEO patterns screens
 *
 * @param {blogSettingsBackToBlogSettingsToastClickParams} params - The parameters for this event
 * @property {GUID} instance_id - instance
 * @property {GUID} biToken - msid
 * @property {string} origin - origin
 * @property {GUID} post_stable_id
 * @property {string} referrer - referrer
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<blogSettingsBackToBlogSettingsToastClickParams>} LogObject<blogSettingsBackToBlogSettingsToastClickParams>
 */
export function blogSettingsBackToBlogSettingsToastClick(params) {
  return { evid: 370, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postEditorHoverOnUpgrade' event (evid: 342)
 *
 * Event description: User hover on a button in post editor
 *
 * @param {postEditorHoverOnUpgradeParams} params - The parameters for this event
 * @property {string} button_name - button name which was hovered on
 * @property {GUID} instance_id - instance
 * @property {boolean} is_edited - is_edited
 * @property {boolean} is_published - Is post published
 * @property {string} language - Multilingual language
 * @property {GUID} biToken
 * @property {string} origin - origin
 * @property {string} post_id - post id
 * @property {GUID} post_stable_id - post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @property {boolean} title_ok - is title set
 * @property {string} translation_id - translation_id
 * @return {LogObject<postEditorHoverOnUpgradeParams>} LogObject<postEditorHoverOnUpgradeParams>
 */
export function postEditorHoverOnUpgrade(params) {
  return { evid: 342, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'advancedPostSettingsDoneClick' event (evid: 323)
 *
 * Event description: Clicking Done in advance post settings
 *
 * @param {advancedPostSettingsDoneClickParams} params - The parameters for this event
 * @property {string} button_name - Save, Save and Publish
 * @property {number} categories_chosen - How many categories was chosen
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_author_changed - User changed author
 * @property {boolean} is_category_changed - if the user added or removed categories from the post
 * @property {boolean} is_changed_excerpt - If excerpt was changed
 * @property {boolean} is_changed_search_engine_title - Changed search engine title
 * @property {boolean} is_changed_url - Changed URL
 * @property {boolean} is_cover_image_changed - Changed cover image
 * @property {boolean} is_display_cover_toggle_changed - If toggle was changed
 * @property {boolean} is_excerpt_written - 1 - added text, 0 - didn't
 * @property {boolean} is_feature_post_toggle_changed - If toggle was changed
 * @property {boolean} is_main_category_changed - if user changed the main category
 * @property {boolean} is_on_feature_post_toggle - 1 - on, 0 - off
 * @property {boolean} is_publish_date_edited - Post publish date edited
 * @property {boolean} is_published - Is post published (1-published)
 * @property {boolean} is_written_description - Written a description
 * @property {string} language_id - language
 * @property {GUID} bi_token - MSID
 * @property {GUID} biToken
 * @property {string} platform - Was opened in back office/live site
 * @property {string} post_id
 * @property {GUID} post_stable_id
 * @property {string} role - Role of user - writer or admin
 * @property {string} screen_name
 * @property {boolean} is_on_display_cover_toggle - 1 - on, 0 - off
 * @property {string} translation_id - translation
 * @return {LogObject<advancedPostSettingsDoneClickParams>} LogObject<advancedPostSettingsDoneClickParams>
 */
export function advancedPostSettingsDoneClick(params) {
  return { evid: 323, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'tagDeleted' event (evid: 319)
 *
 * Event description: Taga was removed from post
 *
 * @param {tagDeletedParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {string} language - language
 * @property {GUID} biToken
 * @property {string} origin - where did he deleted
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @property {GUID} tag_guid - tag stable id
 * @property {string} tagid - tag id
 * @property {string} tag_name - tag name
 * @property {string} translation_id - translation id
 * @return {LogObject<tagDeletedParams>} LogObject<tagDeletedParams>
 */
export function tagDeleted(params) {
  return { evid: 319, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postModerationStatus' event (evid: 447)
 *
 * Event description: Tracks post's status: sent_for_approval/approved/rejected_and_reverted/reverted/updated/deleted/translated/
 *
 * @param {postModerationStatusParams} params - The parameters for this event
 * @property {GUID} app_id
 * @property {GUID} author_id - author id
 * @property {number} categories_count
 * @property {string} category_ids - category_ids. JSON array string
 * @property {number} character_count
 * @property {string} community_id - NOT IN USE: community_id (instance of members app)
 * @property {string} galleries - will sent as array - [{ layout: 'masonry', count: 5}, { layout: 'whatever', count: 10 }]
 * @property {number} giphy_count
 * @property {boolean} has_gallery - NOT IN USE: 0 - no gallery / 1 - published with gallery
 * @property {number} image_count - image_count in the post
 * @property {GUID} instance_id
 * @property {boolean} is_edited - 0 - new post / 1 - edit (to know if its posted for first time)
 * @property {boolean} is_published
 * @property {string} language - for multilingual
 * @property {GUID} biToken
 * @property {string} new_post_status - current post status: sent_for_approval/approved/rejected_and_reverted/reverted/updated/deleted/translated/
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} original_instance_id - Currently being used for wix reads posts.in the members app events. holds the child app (forum/blog) instance_id
 * @property {string} original_post_id - the original post id
 * @property {string} paid_plan_id
 * @property {string} post_id - post_id
 * @property {GUID} post_stable_id - stable id
 * @property {string} post_title
 * @property {string} previous_post_status
 * @property {string} referral_info - NOT IN USE: external links - facebook, social networks. if from wix then null
 * @property {string} related_post_ids
 * @property {string} role - DONT USE! member role (owner, writer, member) (use 'roles')
 * @property {string} screen_name
 * @property {string} tag_ids
 * @property {string} translation_id - the post_stable_id of the post that was translated
 * @property {string} url
 * @property {boolean} used_html - 0 - didnt used html component / 1 - used html component
 * @property {number} video_count
 * @return {LogObject<postModerationStatusParams>} LogObject<postModerationStatusParams>
 */
export function postModerationStatus(params) {
  return { evid: 447, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'currentlyNotActiveGoToLiveSiteClick' event (evid: 310)
 *
 * Event description: triggered when click on "go to live site" CTA inside the blog manager
 *
 * @param {currentlyNotActiveGoToLiveSiteClickParams} params - The parameters for this event
 * @property {GUID} app_id - app_id (forum, blog, members)
 * @property {string} community_id - community_id (instance of members app)
 * @property {GUID} instance_id - instance_id
 * @property {string} member_id - member_id
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} original_instance_id - in the members app events. holds the child app (forum/blog) instance_id
 * @property {GUID} post_stable_id
 * @property {string} referral_info - external links - facebook, social networks. if from wix then null
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @return {LogObject<currentlyNotActiveGoToLiveSiteClickParams>} LogObject<currentlyNotActiveGoToLiveSiteClickParams>
 */
export function currentlyNotActiveGoToLiveSiteClick(params) {
  return { evid: 310, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'dotsPostEditorOptionClicked' event (evid: 340)
 *
 * Event description: Whenever a user clicks one of the options from the 3 dots menu, in the Post Editor
 *
 * @param {dotsPostEditorOptionClickedParams} params - The parameters for this event
 * @property {string} action - Preview Post, Post Settings, Choose Category, Save as Draft, Schedule Post
 * @property {GUID} instance_id - instance
 * @property {boolean} is_edited - is_edited
 * @property {boolean} is_published - Is post published
 * @property {string} language - Language
 * @property {GUID} biToken
 * @property {string} origin - origin
 * @property {string} post_id - post id
 * @property {GUID} post_stable_id - post. stable id
 * @property {string} role - role
 * @property {string} screen_name
 * @property {boolean} title_ok - is title set
 * @property {string} translation_id - translation_id
 * @return {LogObject<dotsPostEditorOptionClickedParams>} LogObject<dotsPostEditorOptionClickedParams>
 */
export function dotsPostEditorOptionClicked(params) {
  return { evid: 340, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneappManageSearchResults' event (evid: 1309)
 *
 * Event description: Number of posts found in search in OneApp Manage
 *
 * @param {oneappManageSearchResultsParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken - msid
 * @property {number} num_posts_found - Number of posts found in search
 * @property {string} origin - Where tabs was opened (Manage)
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {string} text - Text entered in a search
 * @return {LogObject<oneappManageSearchResultsParams>} LogObject<oneappManageSearchResultsParams>
 */
export function oneappManageSearchResults(params) {
  return { evid: 1309, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'categoryDeleted' event (evid: 376)
 *
 * Event description: When a category is deleted
 *
 * @param {categoryDeletedParams} params - The parameters for this event
 * @property {string} category_id - category id
 * @property {GUID} instance_id - instance
 * @property {string} language - category language
 * @property {GUID} biToken - msid
 * @property {string} origin - post page, post editor, drafts
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @property {string} translation_id - the id of the translated category
 * @return {LogObject<categoryDeletedParams>} LogObject<categoryDeletedParams>
 */
export function categoryDeleted(params) {
  return { evid: 376, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'blogNotificationShown' event (evid: 1357)
 *
 * Event description: When a notification in Blog is being shown
 *
 * @param {blogNotificationShownParams} params - The parameters for this event
 * @property {string} content - what is written in the notification
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} origin - where a notification is being shown
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @return {LogObject<blogNotificationShownParams>} LogObject<blogNotificationShownParams>
 */
export function blogNotificationShown(params) {
  return { evid: 1357, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'multilingualLanguagePickerLanguageClick' event (evid: 416)
 *
 * Event description: Triggered when the user chooses a language from the language picker
 *
 * @param {multilingualLanguagePickerLanguageClickParams} params - The parameters for this event
 * @property {GUID} instance_id - instance id
 * @property {boolean} isFilter - is the language picker a filter?
 * @property {string} language_selected - language selected
 * @property {GUID} biToken - instance id
 * @property {string} origin - origin
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @property {string} tabName - tab name
 * @return {LogObject<multilingualLanguagePickerLanguageClickParams>} LogObject<multilingualLanguagePickerLanguageClickParams>
 */
export function multilingualLanguagePickerLanguageClick(params) {
  return { evid: 416, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postDraftCreated' event (evid: 305)
 *
 * Event description: triggered when a post draft is created (first save)
 *
 * @param {postDraftCreatedParams} params - The parameters for this event
 * @property {GUID} app_id - app_id (forum, blog, members)
 * @property {string} community_id - NOT IN USE: community_id (instance of members app)
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_offline - if the event happened offline
 * @property {boolean} is_published - 0 - not published (draft) / 1 - published
 * @property {string} language - for multilingual
 * @property {string} member_id - member_id
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} original_instance_id - NOT IN USE: in the members app events. holds the child app (forum/blog) instance_id
 * @property {string} post_id - post_id
 * @property {GUID} post_stable_id - stable id
 * @property {string} referral_info - NOT IN USE: external links - facebook, social networks. if from wix then null
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {string} template_id - post template id
 * @property {string} translation_id - the post_stable_id of the translated post
 * @return {LogObject<postDraftCreatedParams>} LogObject<postDraftCreatedParams>
 */
export function postDraftCreated(params) {
  return { evid: 305, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'hoverOnTooltip' event (evid: 413)
 *
 * Event description: Fired when the user hovers a tooltip
 *
 * @param {hoverOnTooltipParams} params - The parameters for this event
 * @property {GUID} instance_id - instance
 * @property {GUID} biToken - msid
 * @property {string} origin - origin
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @property {string} text - the tooltip text
 * @property {string} tooltip_name - tooltip name
 * @return {LogObject<hoverOnTooltipParams>} LogObject<hoverOnTooltipParams>
 */
export function hoverOnTooltip(params) {
  return { evid: 413, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppActionSheetOptionClick' event (evid: 1323)
 *
 * Event description: Generic event to track clicks within an action sheet in OneApp
 *
 * @param {oneAppActionSheetOptionClickParams} params - The parameters for this event
 * @property {string} action_name - the option the user clicked / selected on the modal
 * @property {string} action_sheet_name - action name
 * @property {GUID} instance_id - instance
 * @property {GUID} biToken - msid
 * @property {string} origin - what triggered this action
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @property {GUID} visitor_id - visitor
 * @return {LogObject<oneAppActionSheetOptionClickParams>} LogObject<oneAppActionSheetOptionClickParams>
 */
export function oneAppActionSheetOptionClick(params) {
  return { evid: 1323, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'threeDotsClickInTagTab' event (evid: 1354)
 *
 * Event description: When a user clicks three dots in a tag tab in blog manager
 *
 * @param {threeDotsClickInTagTabParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @property {GUID} tag_guid - the stable id for tags
 * @property {string} tagid - tag_id
 * @property {string} tag_name - tag name
 * @return {LogObject<threeDotsClickInTagTabParams>} LogObject<threeDotsClickInTagTabParams>
 */
export function threeDotsClickInTagTab(params) {
  return { evid: 1354, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'migrationGiveFeedbackClick' event (evid: 395)
 *
 * Event description: triggered when users click on Give feedback
 *
 * @param {migrationGiveFeedbackClickParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_first - is it the first time the user opens this tab?
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} post_stable_id
 * @property {string} referral_info - referral_info
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<migrationGiveFeedbackClickParams>} LogObject<migrationGiveFeedbackClickParams>
 */
export function migrationGiveFeedbackClick(params) {
  return { evid: 395, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'actionInsideThreeDotsClickInTagTab' event (evid: 1355)
 *
 * Event description: When a user clicks three dots in a tag tab in blog manager
 *
 * @param {actionInsideThreeDotsClickInTagTabParams} params - The parameters for this event
 * @property {string} action - action
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @property {GUID} tag_guid - the stable id for tags
 * @property {string} tagid - tag_id
 * @property {string} tag_name - tag name
 * @return {LogObject<actionInsideThreeDotsClickInTagTabParams>} LogObject<actionInsideThreeDotsClickInTagTabParams>
 */
export function actionInsideThreeDotsClickInTagTab(params) {
  return { evid: 1355, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'appInstallAutopilot' event (evid: 402)
 *
 * Event description: sends if app was installed, used for autopilot for post page migration
 *
 * @param {appInstallAutopilotParams} params - The parameters for this event
 * @property {string} uuid
 * @property {string} app_id - installed app id
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @return {LogObject<appInstallAutopilotParams>} LogObject<appInstallAutopilotParams>
 */
export function appInstallAutopilot(params) {
  return { evid: 402, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'clickingOnPost' event (evid: 440)
 *
 * Event description: Sending an event when clicking on Post from Owner App, Comments section
 *
 * @param {clickingOnPostParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken - msid
 * @property {string} origin - Where the post was clicked from ( in this case Comments)
 * @property {string} post_id - The post that was clicked
 * @property {GUID} post_stable_id - post_stable_id
 * @property {string} role - member role
 * @property {string} screen_name
 * @return {LogObject<clickingOnPostParams>} LogObject<clickingOnPostParams>
 */
export function clickingOnPost(params) {
  return { evid: 440, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'migrationUpdateSuccessModalOpened' event (evid: 393)
 *
 * Event description: triggered when Migration Update URLs modal actually open
 *
 * @param {migrationUpdateSuccessModalOpenedParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_first - is it the first time the user opens this tab?
 * @property {string} migration_status - First time, In progress, Done (after finishing migration)
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} post_stable_id
 * @property {string} referral_info - referral_info
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<migrationUpdateSuccessModalOpenedParams>} LogObject<migrationUpdateSuccessModalOpenedParams>
 */
export function migrationUpdateSuccessModalOpened(params) {
  return { evid: 393, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'migrationQuickMigrationAd' event (evid: 397)
 *
 * Event description: Whenever the user clicks one option from the switch to new blog ad. The ad appears within the editor, on the new and old blog 6th button and on the old blog manager.
 *
 * @param {migrationQuickMigrationAdParams} params - The parameters for this event
 * @property {string} action - switch, find out more, later, close
 * @property {boolean} do_not_show_again - do not show again flag
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} origin - new blog 6th button, old blog 6th button, old blog manager, add panel
 * @property {string} post_id - post id
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @return {LogObject<migrationQuickMigrationAdParams>} LogObject<migrationQuickMigrationAdParams>
 */
export function migrationQuickMigrationAd(params) {
  return { evid: 397, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'authorOfflineCreated' event (evid: 365)
 *
 * Event description: Created an offline author
 *
 * @param {authorOfflineCreatedParams} params - The parameters for this event
 * @property {GUID} author_id - Author id which was created
 * @property {string} author_name - Author name
 * @property {string} author_role - Currently "Offline", might be reused later
 * @property {string} author_title - author title
 * @property {boolean} has_picture - TRUE if a picture is assigned for created author
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @return {LogObject<authorOfflineCreatedParams>} LogObject<authorOfflineCreatedParams>
 */
export function authorOfflineCreated(params) {
  return { evid: 365, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneappBlogSearchResults' event (evid: 1337)
 *
 * Event description: Number of posts found in search in OneApp Manage
 *
 * @param {oneappBlogSearchResultsParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken - msid
 * @property {number} num_of_items - Number of items found
 * @property {string} origin - Where tabs was opened (Manage)
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {string} tab_name - Posts, categories, Authors, Tags
 * @property {string} text - Text entered in a search
 * @return {LogObject<oneappBlogSearchResultsParams>} LogObject<oneappBlogSearchResultsParams>
 */
export function oneappBlogSearchResults(params) {
  return { evid: 1337, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'blogCategoryInfoChanged' event (evid: 312)
 *
 * Event description: triggered when an exiting category edited in the app settings - title or description
 *
 * @param {blogCategoryInfoChangedParams} params - The parameters for this event
 * @property {GUID} app_id - app_id (forum, blog, members)
 * @property {number} category_count - current amount of categories i the blog
 * @property {string} category_id - category_id
 * @property {boolean} category_label - category label was changed
 * @property {string} community_id - community_id (instance of members app)
 * @property {boolean} image - image was edited (OneApp only)
 * @property {GUID} instance_id - instance_id
 * @property {string} language - language
 * @property {string} member_id - member_id
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} original_instance_id - in the members app events. holds the child app (forum/blog) instance_id
 * @property {GUID} post_stable_id
 * @property {string} referral_info - external links - facebook, social networks. if from wix then null
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {boolean} seo_description - seo_description was edited (OneApp only)
 * @property {boolean} seo_name - seo_name was changed
 * @property {string} translation_id - the id of the the translated category
 * @return {LogObject<blogCategoryInfoChangedParams>} LogObject<blogCategoryInfoChangedParams>
 */
export function blogCategoryInfoChanged(params) {
  return { evid: 312, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'searchInBlogBo' event (evid: 343)
 *
 * Event description: Search in Blog BO
 *
 * @param {searchInBlogBoParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {number} num_posts_found - Number of posts found in search
 * @property {number} num_tags_found - number of tags found in search (if used in tag manager)
 * @property {string} origin - Search origin
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {string} text - Text entered in a search
 * @return {LogObject<searchInBlogBoParams>} LogObject<searchInBlogBoParams>
 */
export function searchInBlogBo(params) {
  return { evid: 343, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'fileUploaded' event (evid: 317)
 *
 * Event description: Event triggered when a person tries to upload a file to a Blog post
 *
 * @param {fileUploadedParams} params - The parameters for this event
 * @property {string} file_ext - File extension
 * @property {string} file_id - The file identifier (null if not successful)
 * @property {number} file_size - The size of the file being uploaded (in bytes)
 * @property {GUID} instance_id
 * @property {string} mime_type - File type
 * @property {GUID} biToken - metasite id
 * @property {string} origin - post (for now just post)
 * @property {string} post_id - post_id
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @property {boolean} success - 0 - upload failed / 1 - upload successful
 * @return {LogObject<fileUploadedParams>} LogObject<fileUploadedParams>
 */
export function fileUploaded(params) {
  return { evid: 317, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'blogSettingsSavedInBm' event (evid: 361)
 *
 * Event description: Blog settings saved (in BM)
 *
 * @param {blogSettingsSavedInBmParams} params - The parameters for this event
 * @property {number} amp_changed - 1 - changed, 0 - didn't
 * @property {number} amp_enabled - 1 - enabled, 0 - didn't
 * @property {string} app_id - app_id
 * @property {number} emailmembers_changed - 1 - changed, 0 - didn't
 * @property {number} emailmembers_enabled - 1 - enabled, 0 - didn't
 * @property {number} emailsubscribers_changed - 1 - changed, 0 - didn't
 * @property {number} emailsubscribers_enabled - 1 - enabled, 0 - didn't
 * @property {GUID} instance_id
 * @property {number} logo_changed - 1 - added/changed, 0 - didn't
 * @property {GUID} biToken
 * @property {string} origin - BM_posts
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {number} schema_changed - 1 - changed, 0 - didn't
 * @property {number} schema_enabled - 1 - enabled, 0 - didn't
 * @property {string} screen_name
 * @property {string} settings - json string with values 0 - disabled, 1 - enabled, e.g. {AMP: 1, Schema: 0, logo : 0 }
 * @return {LogObject<blogSettingsSavedInBmParams>} LogObject<blogSettingsSavedInBmParams>
 */
export function blogSettingsSavedInBm(params) {
  return { evid: 361, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postDeleted' event (evid: 306)
 *
 * Event description: triggered when post deleted
 *
 * @param {postDeletedParams} params - The parameters for this event
 * @property {GUID} app_id - app_id (forum, blog, members)
 * @property {string} category_ids - category_ids. JSON array string
 * @property {string} community_id - community_id (instance of members app)
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_published - 0 - not published (draft) / 1 - published
 * @property {string} language - for multilingual
 * @property {string} member_id - member_id
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} original_instance_id - in the members app events. holds the child app (forum/blog) instance_id
 * @property {string} post_id - post_id
 * @property {GUID} post_stable_id - stable id
 * @property {string} referral_info - external links - facebook, social networks. if from wix then null
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {GUID} site_member_id - site_member_id
 * @property {string} translation_id - translation id
 * @return {LogObject<postDeletedParams>} LogObject<postDeletedParams>
 */
export function postDeleted(params) {
  return { evid: 306, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'unpublishPost' event (evid: 332)
 *
 * Event description: When a post is unpublished.
 *
 * @param {unpublishPostParams} params - The parameters for this event
 * @property {string} action - revert to draft, move trash
 * @property {GUID} instance_id
 * @property {string} language - for multilingual
 * @property {GUID} biToken
 * @property {string} origin - post page, post editor
 * @property {string} post_id - post id
 * @property {GUID} post_stable_id - post stable id
 * @property {string} screen_name
 * @property {string} translation_id - posts stable id of the original translated post
 * @return {LogObject<unpublishPostParams>} LogObject<unpublishPostParams>
 */
export function unpublishPost(params) {
  return { evid: 332, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppActiveScreenTimeInPostForReadingTime' event (evid: 445)
 *
 * Event description: owner/guest_writer clicks in pending review tab: review/view_post/edit
 *
 * @param {oneAppActiveScreenTimeInPostForReadingTimeParams} params - The parameters for this event
 * @property {string} button_name
 * @property {GUID} instance_id - instance
 * @property {GUID} biToken - msid
 * @property {string} origin - post page
 * @property {string} post_id - post_id
 * @property {GUID} post_stable_id - post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @return {LogObject<oneAppActiveScreenTimeInPostForReadingTimeParams>} LogObject<oneAppActiveScreenTimeInPostForReadingTimeParams>
 */
export function oneAppActiveScreenTimeInPostForReadingTime(params) {
  return { evid: 445, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'noteClick' event (evid: 439)
 *
 * Event description: BI event firing when clicking on Note in Post Editor
 *
 * @param {noteClickParams} params - The parameters for this event
 * @property {string} app_id - app_id
 * @property {GUID} instance_id
 * @property {GUID} bi_token - site id - msid
 * @property {GUID} biToken
 * @property {string} parent_resource_id - notes' parent entity GUID ( e.g. post, group, event, post etc)
 * @property {GUID} post_stable_id
 * @property {string} role - can be : owner , writer, editor
 * @property {string} screen_name
 * @property {GUID} site_member_id - member ID after logging to Wix site
 * @property {GUID} visitor_id - visitor ID
 * @return {LogObject<noteClickParams>} LogObject<noteClickParams>
 */
export function noteClick(params) {
  return { evid: 439, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postTemplatesStartFromABlankTemplateClick' event (evid: 430)
 *
 * Event description: triggered when click on use this template CTA
 *
 * @param {postTemplatesStartFromABlankTemplateClickParams} params - The parameters for this event
 * @property {GUID} app_id - app_id (forum, blog, members)
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_offline - if the event happened offline
 * @property {string} language - for multilingual
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {GUID} site_member_id - site_member_id
 * @property {string} templateCategory - template category
 * @property {string} template_id - template id
 * @property {string} template_name - template name
 * @return {LogObject<postTemplatesStartFromABlankTemplateClickParams>} LogObject<postTemplatesStartFromABlankTemplateClickParams>
 */
export function postTemplatesStartFromABlankTemplateClick(params) {
  return { evid: 430, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppSharePostButtonClick304' event (evid: 304)
 *
 * Event description: User clicked on share post button (to copy url)
 *
 * @param {oneAppSharePostButtonClick304Params} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken - msid
 * @property {string} origin - Instant after publish or later while reading (from banner)
 * @property {GUID} post_id - post_id
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @return {LogObject<oneAppSharePostButtonClick304Params>} LogObject<oneAppSharePostButtonClick304Params>
 */
export function oneAppSharePostButtonClick304(params) {
  return { evid: 304, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'blogManagerOpenClickBo' event (evid: 300)
 *
 * Event description: triggered when click on Manage posts CTA
 *
 * @param {blogManagerOpenClickBoParams} params - The parameters for this event
 * @property {string} app_id - app_id (forum, blog, members)
 * @property {string} community_id - community_id (instance of members app)
 * @property {GUID} instance_id - instance_id
 * @property {string} member_id - member_id
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} original_instance_id - in the members app events. holds the child app (forum/blog) instance_id
 * @property {GUID} post_stable_id
 * @property {string} referral_info - external links - facebook, social networks. if from wix then null
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @return {LogObject<blogManagerOpenClickBoParams>} LogObject<blogManagerOpenClickBoParams>
 */
export function blogManagerOpenClickBo(params) {
  return { evid: 300, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postEditorHelpPanelClick' event (evid: 432)
 *
 * Event description: Whenever a user clicks on any link on the help panel.
 *
 * @param {postEditorHelpPanelClickParams} params - The parameters for this event
 * @property {string} click_name - click name
 * @property {GUID} instance_id
 * @property {string} language - Language
 * @property {GUID} biToken - msid
 * @property {string} origin
 * @property {string} post_id - post id
 * @property {GUID} post_stable_id - post. stable id
 * @property {string} role - role
 * @property {string} screen_name
 * @property {string} translation_id - translation_id
 * @return {LogObject<postEditorHelpPanelClickParams>} LogObject<postEditorHelpPanelClickParams>
 */
export function postEditorHelpPanelClick(params) {
  return { evid: 432, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'migrationHomePageOpened' event (evid: 380)
 *
 * Event description: triggered when Migration home page opened actually open
 *
 * @param {migrationHomePageOpenedParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_first - is it the first time the user opens this tab?
 * @property {boolean} is_full_width - is_full_width (with left nav or not)
 * @property {string} migration_status - First time, In progress, Done (after finishing migration)
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} post_stable_id
 * @property {string} referral_info - referral_info
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<migrationHomePageOpenedParams>} LogObject<migrationHomePageOpenedParams>
 */
export function migrationHomePageOpened(params) {
  return { evid: 380, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'editorSettingsLayoutTab' event (evid: 357)
 *
 * Event description: Layout settings changed in editor. For custom feed all settings are returned in value field, for blog app it's spread to value, value_pagination_type, value_pagination_size. Use "settings" field to distinguish what was changed, origin - to identify blog app (main feed) and custom feed
 *
 * @param {editorSettingsLayoutTabParams} params - The parameters for this event
 * @property {string} app_id - app_id
 * @property {string} editor_layout - Computer/Mobile
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} origin - Post Page Settings, app settings (feed)
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @property {string} settings - setting name, i.e. layout, post load, posts per page
 * @property {string} tab_name - All poss feed/Category Page
 * @property {string} value - setting chosen, i.e. Tiled (for layout), On scroll down (for post load), 7 (for posts per page)
 * @property {number} value_pagination_size - number of posts per page/per load
 * @property {string} value_pagination_type - With page numbers, on scroll....
 * @property {string} view_mode - desktop, mobile. NOTE: any Null values belong to desktop
 * @property {string} widget_name - Feed, Custom Feed
 * @return {LogObject<editorSettingsLayoutTabParams>} LogObject<editorSettingsLayoutTabParams>
 */
export function editorSettingsLayoutTab(params) {
  return { evid: 357, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'oneAppPostSwipeAction' event (evid: 1303)
 *
 * Event description: User did a swipe action in OneApp
 *
 * @param {oneAppPostSwipeActionParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {boolean} is_published - is_published
 * @property {string} language - language
 * @property {GUID} biToken - msid
 * @property {string} origin - Manage
 * @property {string} post_id - post_id
 * @property {GUID} post_stable_id - stable id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {string} tab_name - tab name in Manage (Published/Drafts)
 * @property {string} translation_id - translation_id
 * @return {LogObject<oneAppPostSwipeActionParams>} LogObject<oneAppPostSwipeActionParams>
 */
export function oneAppPostSwipeAction(params) {
  return { evid: 1303, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'toggleInsidePostComposerSettings' event (evid: 1361)
 *
 * Event description: When a toggle is clicked inside Blog post settings tab
 *
 * @param {toggleInsidePostComposerSettingsParams} params - The parameters for this event
 * @property {GUID} instance_id - blog instance_id
 * @property {GUID} biToken
 * @property {string} name - toggle name (feature_post,pin_post)
 * @property {GUID} post_stable_id - post_stable_id
 * @property {string} screen_name
 * @property {boolean} toggle - true/false
 * @return {LogObject<toggleInsidePostComposerSettingsParams>} LogObject<toggleInsidePostComposerSettingsParams>
 */
export function toggleInsidePostComposerSettings(params) {
  return { evid: 1361, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'reinstallationModalAction' event (evid: 1360)
 *
 * Event description: When a user clicks on the reinstallation modal in Editor.
 *
 * @param {reinstallationModalActionParams} params - The parameters for this event
 * @property {string} action - what was chosen in the modal
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {GUID} post_stable_id
 * @property {string} screen_name
 * @return {LogObject<reinstallationModalActionParams>} LogObject<reinstallationModalActionParams>
 */
export function reinstallationModalAction(params) {
  return { evid: 1360, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'postTemplatesUseThisTemplateClick' event (evid: 426)
 *
 * Event description: triggered when click on use this template CTA
 *
 * @param {postTemplatesUseThisTemplateClickParams} params - The parameters for this event
 * @property {GUID} app_id - app_id (forum, blog, members)
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_offline - if the event happened offline
 * @property {string} language - for multilingual
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {GUID} site_member_id - site_member_id
 * @property {string} templateCategory - template category
 * @property {string} template_id - template id
 * @property {string} template_name - template name
 * @return {LogObject<postTemplatesUseThisTemplateClickParams>} LogObject<postTemplatesUseThisTemplateClickParams>
 */
export function postTemplatesUseThisTemplateClick(params) {
  return { evid: 426, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'newCategoryClick' event (evid: 375)
 *
 * Event description: triggered when click on "new category" CTA
 *
 * @param {newCategoryClickParams} params - The parameters for this event
 * @property {GUID} app_id - app_id (forum, blog, members)
 * @property {string} community_id - community_id (instance of members app)
 * @property {GUID} instance_id - instance_id
 * @property {string} language - for multilingual
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} post_stable_id
 * @property {string} role - member role (owner, writer, member)
 * @property {string} screen_name
 * @property {GUID} site_member_id - site_member_id
 * @return {LogObject<newCategoryClickParams>} LogObject<newCategoryClickParams>
 */
export function newCategoryClick(params) {
  return { evid: 375, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'paidPostInsidePostEditorSidebar' event (evid: 377)
 *
 * Event description: Option chosen inside Paid Post in post editor sidebar
 *
 * @param {paidPostInsidePostEditorSidebarParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} option - Get Started/Learn More
 * @property {GUID} post_stable_id
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<paidPostInsidePostEditorSidebarParams>} LogObject<paidPostInsidePostEditorSidebarParams>
 */
export function paidPostInsidePostEditorSidebar(params) {
  return { evid: 377, src: 69, endpoint: "blog-app-users", params: params };
}
/**
 * A function to create a log object for the 'migrationMaybeLaterClick' event (evid: 382)
 *
 * Event description: triggered when users click on Maybe later click
 *
 * @param {migrationMaybeLaterClickParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_first - is it the first time the user opens this tab?
 * @property {GUID} biToken - msid
 * @property {string} origin - which page the action took place in - home_page, category_page, post_page, members_page, recent_posts, mega_menu, post_editor
 * @property {GUID} post_stable_id
 * @property {string} referral_info - referral_info
 * @property {string} role - role
 * @property {string} screen_name
 * @return {LogObject<migrationMaybeLaterClickParams>} LogObject<migrationMaybeLaterClickParams>
 */
export function migrationMaybeLaterClick(params) {
  return { evid: 382, src: 69, endpoint: "blog-app-users", params: params };
}
//# sourceMappingURL=index.js.map
