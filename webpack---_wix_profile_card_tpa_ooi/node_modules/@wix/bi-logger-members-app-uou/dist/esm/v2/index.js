/**
 * A function to create a log object for the 'actionButtonClicked' event (evid: 811)
 *
 * Event description: Event triggered when clicking on action button
 *
 * @param {actionButtonClickedParams} params - The parameters for this event
 * @property {string} action_type - share, report, delete, block, moderator
 * @property {GUID} app_id - app_id
 * @property {string} formOrigin - where it was opened
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_social - 0 - no, 1 - yes
 * @property {string} member_chosen - the member_id the action was performed on
 * @property {string} member_id - member_id
 * @property {GUID} biToken - msid
 * @property {string} referralInfo - referral_info
 * @property {string} role - member role (owner, writer, member)
 * @property {string} scope - who did the action
 * @property {GUID} site_member_id - site_member_id
 * @property {GUID} visitor_id - visitor_id
 * @return {LogObject<actionButtonClickedParams>} LogObject<actionButtonClickedParams>
 */
export function actionButtonClicked(params) {
  return { evid: 811, src: 69, endpoint: "members-app-uou", params: params };
}
/**
 * A function to create a log object for the 'followButtonClickedUou' event (evid: 810)
 *
 * Event description: Event triggered when clicking on follow button
 *
 * @param {followButtonClickedUouParams} params - The parameters for this event
 * @property {GUID} app_id - app_id
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_followed - 1 - follow, 0 - not follow
 * @property {boolean} is_social - 0 - no, 1 - yes
 * @property {string} member_followed - the member_id that was followed
 * @property {string} member_id - member_id
 * @property {GUID} biToken - msid
 * @property {string} origin - origin
 * @property {string} role - member being followed role (owner, writer, member)
 * @property {GUID} site_member_id - site_member_id
 * @property {GUID} visitor_id - visitor_id
 * @return {LogObject<followButtonClickedUouParams>} LogObject<followButtonClickedUouParams>
 */
export function followButtonClickedUou(params) {
  return { evid: 810, src: 69, endpoint: "members-app-uou", params: params };
}
/**
 * A function to create a log object for the 'maChatOpened' event (evid: 817)
 *
 * Event description: Ma chat opened.
 *
 * @param {maChatOpenedParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} messaged_member_id - site_member_id of messaged member
 * @property {GUID} biToken
 * @property {string} origin - Origin from where chat was opened
 * @property {GUID} visitor_id
 * @return {LogObject<maChatOpenedParams>} LogObject<maChatOpenedParams>
 */
export function maChatOpened(params) {
  return { evid: 817, src: 69, endpoint: "members-app-uou", params: params };
}
/**
 * A function to create a log object for the 'memberSharedAProfileInactive' event (evid: 807)
 *
 * Event description: Event triggered when member shared his profile on social networks
 *
 * @param {memberSharedAProfileInactiveParams} params - The parameters for this event
 * @property {GUID} app_id - app_id
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_social - 0 - no, 1 - yes
 * @property {string} member_chosen - the member_id whose profile was shared
 * @property {string} member_id - member_id
 * @property {GUID} biToken - msid
 * @property {string} role - member role (owner, writer, member)
 * @property {GUID} site_member_id - site_member_id
 * @property {GUID} visitor_id - visitor_id
 * @return {LogObject<memberSharedAProfileInactiveParams>} LogObject<memberSharedAProfileInactiveParams>
 */
export function memberSharedAProfileInactive(params) {
  return { evid: 807, src: 69, endpoint: "members-app-uou", params: params };
}
/**
 * A function to create a log object for the 'blockedMembersListOpen' event (evid: 843)
 *
 * Event description: Event triggered when blocked members list opens
 *
 * @param {blockedMembersListOpenParams} params - The parameters for this event
 * @property {GUID} instance_id - instance_id
 * @property {number} membersCount - count of blocked members
 * @property {GUID} biToken - msid
 * @property {string} referralinfo - where User came from
 * @property {GUID} visitor_id - visitor_id
 * @return {LogObject<blockedMembersListOpenParams>} LogObject<blockedMembersListOpenParams>
 */
export function blockedMembersListOpen(params) {
  return { evid: 843, src: 69, endpoint: "members-app-uou", params: params };
}
/**
 * A function to create a log object for the 'memberLeftCommunityAttempt' event (evid: 802)
 *
 * Event description: Event triggered when member clicked on the leave community button
 *
 * @param {memberLeftCommunityAttemptParams} params - The parameters for this event
 * @property {GUID} app_id - app_id
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_social - 0 - no, 1 - yes
 * @property {string} member_id - member_id
 * @property {GUID} biToken - msid
 * @property {string} referralInfo - changes location
 * @property {string} role - member role (owner, writer, member)
 * @property {GUID} site_member_id - site_member_id
 * @property {GUID} visitor_id - visitor_id
 * @return {LogObject<memberLeftCommunityAttemptParams>} LogObject<memberLeftCommunityAttemptParams>
 */
export function memberLeftCommunityAttempt(params) {
  return { evid: 802, src: 69, endpoint: "members-app-uou", params: params };
}
/**
 * A function to create a log object for the 'memberLeftCommunityLeftAfterPopup' event (evid: 803)
 *
 * Event description: Event triggered when member clicked on the leave community button in the 'sure you want to leave' popup
 *
 * @param {memberLeftCommunityLeftAfterPopupParams} params - The parameters for this event
 * @property {GUID} app_id - app_id
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_social - 0 - no, 1 - yes
 * @property {string} member_id - member_id
 * @property {GUID} biToken - msid
 * @property {string} referralInfo - changes location
 * @property {string} role - member role (owner, writer, member)
 * @property {GUID} site_member_id - site_member_id
 * @property {GUID} visitor_id - visitor_id
 * @return {LogObject<memberLeftCommunityLeftAfterPopupParams>} LogObject<memberLeftCommunityLeftAfterPopupParams>
 */
export function memberLeftCommunityLeftAfterPopup(params) {
  return { evid: 803, src: 69, endpoint: "members-app-uou", params: params };
}
/**
 * A function to create a log object for the 'aboutSectionReadMoreClick' event (evid: 819)
 *
 * Event description: read more click to expand About description
 *
 * @param {aboutSectionReadMoreClickParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {GUID} viewedMemberId - viewed site member id
 * @property {GUID} visitor_id
 * @return {LogObject<aboutSectionReadMoreClickParams>} LogObject<aboutSectionReadMoreClickParams>
 */
export function aboutSectionReadMoreClick(params) {
  return { evid: 819, src: 69, endpoint: "members-app-uou", params: params };
}
/**
 * A function to create a log object for the 'aboutSectionPublished' event (evid: 806)
 *
 * Event description: Event triggered when member published his About section
 *
 * @param {aboutSectionPublishedParams} params - The parameters for this event
 * @property {GUID} app_id - app_id
 * @property {boolean} dividerUsed - 1 if divider used 0 if not
 * @property {boolean} emojiUsed - 1 if emoji used 0 if not
 * @property {boolean} first_publish - 1 if first time user published 0 if not
 * @property {boolean} gifUsed - 1 if gif used 0 if not
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_social - 0 - no, 1 - yes
 * @property {string} member_id - member_id
 * @property {GUID} biToken - msid
 * @property {string} origin - where the edit was done - 'profile','me tab'
 * @property {boolean} photoAttached - 1 if photo attached 0 if not
 * @property {string} role - member role (owner, writer, member)
 * @property {GUID} site_member_id - site_member_id
 * @property {boolean} videoAttached - 1 if video attached 0 if not
 * @property {GUID} visitor_id - visitor_id
 * @return {LogObject<aboutSectionPublishedParams>} LogObject<aboutSectionPublishedParams>
 */
export function aboutSectionPublished(params) {
  return { evid: 806, src: 69, endpoint: "members-app-uou", params: params };
}
/**
 * A function to create a log object for the 'membersPageSearch' event (evid: 813)
 *
 * Event description: Event triggered when members page view was searched
 *
 * @param {membersPageSearchParams} params - The parameters for this event
 * @property {GUID} app_id - app_id
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_social - 0 - no, 1 - yes
 * @property {string} member_id - member_id
 * @property {GUID} biToken - msid
 * @property {number} result_count_members - result count
 * @property {string} role - member role (owner, writer, member)
 * @property {string} search_term - the term the user typed
 * @property {GUID} site_member_id - site_member_id
 * @property {GUID} visitor_id - visitor_id
 * @return {LogObject<membersPageSearchParams>} LogObject<membersPageSearchParams>
 */
export function membersPageSearch(params) {
  return { evid: 813, src: 69, endpoint: "members-app-uou", params: params };
}
/**
 * A function to create a log object for the 'profileWidgetEdited' event (evid: 815)
 *
 * Event description: Event triggered when UoU edited his Profile Widget
 *
 * @param {profileWidgetEditedParams} params - The parameters for this event
 * @property {GUID} app_id - app_id
 * @property {string} contactsFieldsChanges
 * @property {boolean} cover_photo_change - flag if cover photo was changed
 * @property {string} customFieldsChanged
 * @property {boolean} default_color_change - Flag if default color changed
 * @property {boolean} default_picture_change - flag if default picture changed
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_social - 0 - no, 1 - yes
 * @property {string} member_id - member_id
 * @property {GUID} biToken - msid
 * @property {boolean} nameChanged - 1 if UoU changed his name, 0 didn't
 * @property {boolean} name_changed - 1 if UoU changed his name, 0 didn't
 * @property {boolean} photo_changed - 1 if UoU changed his photo, 0 didn't
 * @property {string} privacyAllMembers - list fields that privacy was changed to all members
 * @property {boolean} privacyChanged - flag if privacy setting was changed
 * @property {string} privacyOnlyMe - list fields that privacy was changed to only me
 * @property {string} role - member role (owner, writer, member)
 * @property {string} saveOrigin
 * @property {GUID} site_member_id - site_member_id
 * @property {string} socialFieldsChanged - list of fields changed
 * @property {string} systemFieldsChanged
 * @property {boolean} titleChanged - 1 if UoU changed his name, 0 didn't
 * @property {boolean} urlChanged - 1 if UoU changed url slug, 0 didn't
 * @property {GUID} visitor_id - visitor_id
 * @return {LogObject<profileWidgetEditedParams>} LogObject<profileWidgetEditedParams>
 */
export function profileWidgetEdited(params) {
  return { evid: 815, src: 69, endpoint: "members-app-uou", params: params };
}
/**
 * A function to create a log object for the 'membersPageFilter' event (evid: 816)
 *
 * Event description: Event triggered when members page view is filtered
 *
 * @param {membersPageFilterParams} params - The parameters for this event
 * @property {GUID} app_id - app_id
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_social - 0 - no, 1 - yes
 * @property {string} member_id - member_id
 * @property {GUID} biToken - msid
 * @property {string} role - member role (owner, writer, member)
 * @property {GUID} site_member_id - site_member_id
 * @property {string} sort_by - role, num of posts, etc'
 * @property {GUID} visitor_id - visitor_id
 * @return {LogObject<membersPageFilterParams>} LogObject<membersPageFilterParams>
 */
export function membersPageFilter(params) {
  return { evid: 816, src: 69, endpoint: "members-app-uou", params: params };
}
/**
 * A function to create a log object for the 'myAccountPrivacySettingsChanged' event (evid: 840)
 *
 * Event description: Triggered when "My Account" Custom/Standard/Social field privacy changes
 *
 * @param {myAccountPrivacySettingsChangedParams} params - The parameters for this event
 * @property {string} fieldName - name o the field that privacy setting was changed
 * @property {string} fieldType - field type: standard, custom, social
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} value - value that was changed to: only_me, all_members
 * @property {GUID} visitor_id
 * @return {LogObject<myAccountPrivacySettingsChangedParams>} LogObject<myAccountPrivacySettingsChangedParams>
 */
export function myAccountPrivacySettingsChanged(params) {
  return { evid: 840, src: 69, endpoint: "members-app-uou", params: params };
}
/**
 * A function to create a log object for the 'maMiscClickUou' event (evid: 841)
 *
 * Event description: Buttons/links/etc clicks at random places.
 *
 * @param {maMiscClickUouParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {string} referralInfo - identifier of a button, link
 * @property {GUID} visitor_id
 * @return {LogObject<maMiscClickUouParams>} LogObject<maMiscClickUouParams>
 */
export function maMiscClickUou(params) {
  return { evid: 841, src: 69, endpoint: "members-app-uou", params: params };
}
/**
 * A function to create a log object for the 'reportMemberSubmitted' event (evid: 863)
 *
 * Event description: Report member flow: "Submit Report" clicked
 *
 * @param {reportMemberSubmittedParams} params - The parameters for this event
 * @property {string} details - "Share more details" input
 * @property {GUID} instance_id - instance_id
 * @property {string} member_chosen - Site member ID of member getting reported
 * @property {GUID} biToken
 * @property {string} reason - Spam/Impersonation/Harassment or hate Speech/Other
 * @property {GUID} siteMemberId - Site member ID of member reporting
 * @property {GUID} visitor_id - visitor_id
 * @return {LogObject<reportMemberSubmittedParams>} LogObject<reportMemberSubmittedParams>
 */
export function reportMemberSubmitted(params) {
  return { evid: 863, src: 69, endpoint: "members-app-uou", params: params };
}
/**
 * A function to create a log object for the 'membersPageSort' event (evid: 812)
 *
 * Event description: Event triggered when members page view is sorted
 *
 * @param {membersPageSortParams} params - The parameters for this event
 * @property {GUID} app_id - app_id
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_social - 0 - no, 1 - yes
 * @property {string} member_id - member_id
 * @property {GUID} biToken - msid
 * @property {string} role - member role (owner, writer, member)
 * @property {GUID} site_member_id - site_member_id
 * @property {string} sort_by - role, num of posts, etc'
 * @property {GUID} visitor_id - visitor_id
 * @return {LogObject<membersPageSortParams>} LogObject<membersPageSortParams>
 */
export function membersPageSort(params) {
  return { evid: 812, src: 69, endpoint: "members-app-uou", params: params };
}
/**
 * A function to create a log object for the 'membersTpaLoadedUou' event (evid: 814)
 *
 * Event description: Event triggered when a member TPA was successfully  loaded
 *
 * @param {membersTpaLoadedUouParams} params - The parameters for this event
 * @property {GUID} app_id - app_id
 * @property {GUID} currentPageId - widget guid that triggered profile widget open
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_social - 0 - no, 1-yes
 * @property {string} member_id - member_id
 * @property {GUID} biToken - msid
 * @property {string} origin - members_page, profile_widget,
 * @property {string} page_name - followers, following
 * @property {string} role - member role (owner, writer, member)
 * @property {GUID} site_member_id - site_member_id
 * @property {GUID} visitor_id - visitor_id
 * @property {string} widget_id - widget_id
 * @property {string} widget_name - widget_name
 * @return {LogObject<membersTpaLoadedUouParams>} LogObject<membersTpaLoadedUouParams>
 */
export function membersTpaLoadedUou(params) {
  return { evid: 814, src: 69, endpoint: "members-app-uou", params: params };
}
/**
 * A function to create a log object for the 'membersAreaMembersListLayoutChange' event (evid: 867)
 *
 * Event description: layout change in All Members list
 *
 * @param {membersAreaMembersListLayoutChangeParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {string} layoutType - grid (0), list (1)
 * @property {GUID} biToken
 * @property {GUID} visitor_id
 * @return {LogObject<membersAreaMembersListLayoutChangeParams>} LogObject<membersAreaMembersListLayoutChangeParams>
 */
export function membersAreaMembersListLayoutChange(params) {
  return { evid: 867, src: 69, endpoint: "members-app-uou", params: params };
}
/**
 * A function to create a log object for the 'membersAreaNavigation' event (evid: 866)
 *
 * Event description: Sent when UoU used any of MA navigation : Login bar/menu, Members Area menu, etc.
 *
 * @param {membersAreaNavigationParams} params - The parameters for this event
 * @property {string} action - hover/menu_click/item
 * @property {string} component - login-bar, ma-navigation, etc
 * @property {GUID} instance_id - instance_id
 * @property {GUID} biToken - msid
 * @property {GUID} originAppId - app id of the menu item
 * @property {string} pageName - Standardized name of the page that links p
 * @property {GUID} visitor_id
 * @return {LogObject<membersAreaNavigationParams>} LogObject<membersAreaNavigationParams>
 */
export function membersAreaNavigation(params) {
  return { evid: 866, src: 69, endpoint: "members-app-uou", params: params };
}
/**
 * A function to create a log object for the 'memberJoinedCommunityJoinedAfterPopUpUou' event (evid: 805)
 *
 * Event description: Event triggered when member clicked on the join community button in the 'sure you want to join' popup
 *
 * @param {memberJoinedCommunityJoinedAfterPopUpUouParams} params - The parameters for this event
 * @property {GUID} app_id - app_id
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_social - 0 - no, 1 - yes
 * @property {string} member_id - member_id
 * @property {GUID} biToken - msid
 * @property {string} referralinfo - changes location
 * @property {string} role - member role (owner, writer, member)
 * @property {GUID} site_member_id - site_member_id
 * @property {GUID} visitor_id - visitor_id
 * @return {LogObject<memberJoinedCommunityJoinedAfterPopUpUouParams>} LogObject<memberJoinedCommunityJoinedAfterPopUpUouParams>
 */
export function memberJoinedCommunityJoinedAfterPopUpUou(params) {
  return { evid: 805, src: 69, endpoint: "members-app-uou", params: params };
}
/**
 * A function to create a log object for the 'memberJoinedCommunityAttempt' event (evid: 804)
 *
 * Event description: Event triggered when member clicked on the join community button
 *
 * @param {memberJoinedCommunityAttemptParams} params - The parameters for this event
 * @property {GUID} app_id - app_id
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_social - 0 - no, 1 - yes
 * @property {string} member_id - member_id
 * @property {GUID} biToken - msid
 * @property {string} referralInfo - changes location
 * @property {string} role - member role (owner, writer, member)
 * @property {GUID} site_member_id - site_member_id
 * @property {GUID} visitor_id - visitor_id
 * @return {LogObject<memberJoinedCommunityAttemptParams>} LogObject<memberJoinedCommunityAttemptParams>
 */
export function memberJoinedCommunityAttempt(params) {
  return { evid: 804, src: 69, endpoint: "members-app-uou", params: params };
}
/**
 * A function to create a log object for the 'membersAreaMenuItemsClick' event (evid: 818)
 *
 * Event description: Sent when Tab inside MA (v2) changes
 *
 * @param {membersAreaMenuItemsClickParams} params - The parameters for this event
 * @property {GUID} instance_id
 * @property {GUID} biToken
 * @property {GUID} originAppId - app id of the menu item (verticall
 * @property {string} pageName - Standardized name of the page that links p
 * @property {GUID} visitor_id
 * @return {LogObject<membersAreaMenuItemsClickParams>} LogObject<membersAreaMenuItemsClickParams>
 */
export function membersAreaMenuItemsClick(params) {
  return { evid: 818, src: 69, endpoint: "members-app-uou", params: params };
}
/**
 * A function to create a log object for the 'memberUpdatedPersonalDetailsInactive' event (evid: 808)
 *
 * Event description: Event triggered when member updated personal details
 *
 * @param {memberUpdatedPersonalDetailsInactiveParams} params - The parameters for this event
 * @property {GUID} app_id - app_id
 * @property {GUID} instance_id - instance_id
 * @property {boolean} is_social - 0 - no, 1 - yes
 * @property {string} member_id - member_id
 * @property {GUID} biToken - msid
 * @property {string} role - member role (owner, writer, member)
 * @property {GUID} site_member_id - site_member_id
 * @property {GUID} visitor_id - visitor_id
 * @return {LogObject<memberUpdatedPersonalDetailsInactiveParams>} LogObject<memberUpdatedPersonalDetailsInactiveParams>
 */
export function memberUpdatedPersonalDetailsInactive(params) {
  return { evid: 808, src: 69, endpoint: "members-app-uou", params: params };
}
//# sourceMappingURL=index.js.map
