(function (root, factory) {
  if (typeof define === "function" && define.amd) {
    // AMD. Register as an anonymous module unless amdModuleId is set
    define([], function () {
      return (root["W"] = factory());
    });
  } else if (typeof module === "object" && module.exports) {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory();
  } else {
    root["W"] = factory();
  }
})(this, function (W) {
  /* global document */
  "use strict";

  var W = W || {};
  W.BI = W.BI || {};

  W.BI.DomEventHandler = (function () {
    var _wixBiAttributeSelector = "wix-bi",
      _wixBiArgsAttribute = "wix-bi-args",
      _initOptions = {
        // A dictionary containing event names and event args
        // The key is the event name that should match the parameter passed to the log() function.
        // The value is a parameter map: parameter name to value (value could be a parameterless delegate to be evaluated)
        // Sample:
        // { EVENT_1: { param1: 'value1', param2: W.Functions.func1, param3: 3 } }
        eventMap: {},

        // A dictionary containing error names and error args. Same structure as eventMap.
        errorMap: {},

        // error output stream
        error: function (str) {
          throw str;
        },
      };

    function _extend(dst) {
      for (var i = 1; i < arguments.length; i++) {
        var extending = arguments[i];
        if (extending) {
          for (var key in extending) {
            dst[key] = extending[key];
          }
        }
      }
      return dst;
    }

    function eventHandler(biLogger, args) {
      var _options;
      var _biLogger = biLogger;

      _options = _extend({}, _initOptions, args);

      function _safeGetEventParams(eventName, eventMap, explicitParams) {
        var params;

        // get the event params
        if (!eventMap || !eventMap[eventName]) {
          _options.error("Invalid event name");
          params = {};
        } else {
          params = eventMap[eventName];
        }

        // extend the specific params with the event params
        return _extend({}, params, explicitParams);
      }

      function _log(eventName, eventArgs, callback) {
        var eventParams = _safeGetEventParams(
          eventName,
          _options.eventMap,
          eventArgs
        );
        _biLogger.log(eventParams, callback);
      }

      function _error(errorName, errorArgs, callback) {
        var errorParams = _safeGetEventParams(
          errorName,
          _options.errorMap,
          errorArgs
        );
        _biLogger.error(errorParams, callback);
      }

      function _getAttr(element, name) {
        for (var i = 0; i < element.attributes.length; i++) {
          if (element.attributes[i].name === name) {
            return element.attributes[i].value;
          }
        }
      }

      function _handleTriggeredBiEvent(event) {
        var eventName = _getAttr(event.target, _wixBiAttributeSelector);
        if (eventName) {
          var eventArgsStr = _getAttr(event.target, _wixBiArgsAttribute);
          /* jshint -W061 */
          var eventArgs = eventArgsStr
            ? eval("eventArgs = " + eventArgsStr)
            : {};
          /* jshint +W061 */
          _log(eventName, eventArgs);
        }
      }

      function _bind() {
        document.body.addEventListener("click", _handleTriggeredBiEvent);
      }

      function _unbind() {
        document.body.removeEventListener("click", _handleTriggeredBiEvent);
      }

      return {
        bind: _bind,
        unbind: _unbind,
        log: _log,
        error: _error,
      };
    }

    return eventHandler;
  })();

  return W;
});
