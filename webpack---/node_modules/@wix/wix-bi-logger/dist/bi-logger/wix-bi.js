(function (root, factory) {
  if (typeof define === "function" && define.amd) {
    // AMD. Register as an anonymous module unless amdModuleId is set
    define(["./wix-bi-parsers"], function (a0) {
      return (root["W"] = factory(a0));
    });
  } else if (typeof module === "object" && module.exports) {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory(require("./wix-bi-parsers"));
  } else {
    root["W"] = factory(root["W"]);
  }
})(this, function (W) {
  /* global Image, setTimeout */
  "use strict";

  var W = W || {};
  W.BI = W.BI || {};

  W.BI.ErrorSeverity = {
    RECOVERABLE: 10,
    WARNING: 20,
    ERROR: 30,
    FATAL: 40,
  };

  W.BI.Categories = {
    EDITOR: 1,
    VIEWER: 2,
    TIMEOUTS: 3,
    SERVER: 4,
  };

  W.BI.initialLoadIsReported = false;

  W.BI.Logger = (function () {
    var globalApi = (function () {
      var DefaultBrand = "wix";

      var DefaultCommonConfig = {
        brand: DefaultBrand,
      };

      var DefaultConsentPolicy = {
        functional: true,
        analytics: true,
        __default: false,
      };

      var BrandToHostMap = {
        wix: "wix",
        editorx: "editorx",
      };

      function getGlobal(cb, defaultValue) {
        defaultValue = defaultValue || null;

        if (typeof self !== "undefined" && self) {
          // jshint ignore:line
          return cb(self) || defaultValue; // jshint ignore:line
        }

        return defaultValue;
      }

      function getConsentPolicyDetails() {
        return getGlobal(function (g) {
          var context = (g.Wix && g.Wix.Utils) || g.consentPolicyManager;

          return (
            context &&
            typeof context.getCurrentConsentPolicy === "function" &&
            context.getCurrentConsentPolicy()
          );
        });
      }

      function getCommonConfigApi() {
        return getGlobal(function (g) {
          return (
            (g.Wix && g.Wix.Utils && g.Wix.Utils.commonConfig) || g.commonConfig
          );
        });
      }

      function getConfigValue(key, commonConfigApi) {
        if (!commonConfigApi) {
          return;
        }

        if (typeof commonConfigApi.getAll === "function") {
          var config = commonConfigApi.getAll();

          return config && config[key];
        }

        return commonConfigApi[key];
      }

      function getConsentPolicy(consentPolicyDetails) {
        consentPolicyDetails =
          consentPolicyDetails || getConsentPolicyDetails();

        return (
          (consentPolicyDetails && consentPolicyDetails.policy) ||
          DefaultConsentPolicy
        );
      }

      function getCommonConfigValue(key, commonConfigApi) {
        commonConfigApi = commonConfigApi || getCommonConfigApi();

        var res = getConfigValue(key, commonConfigApi);

        return typeof res !== "undefined" ? res : DefaultCommonConfig[key];
      }

      function getBiUrl(brand) {
        brand = brand || DefaultBrand;
        var hostByBrand = BrandToHostMap[brand] || BrandToHostMap[DefaultBrand];

        return "//frog." + hostByBrand + ".com/";
      }

      function getBsi() {
        return getGlobal(function (g) {
          if (
            g.Wix &&
            g.__bsiManager &&
            typeof g.__bsiManager.getBsi === "function"
          ) {
            return g.__bsiManager.getBsi();
          }
        }, null);
      }

      return {
        getConsentPolicy: getConsentPolicy,
        getCommonConfigValue: getCommonConfigValue,
        getBiUrl: getBiUrl,
        getBsi: getBsi,
      };
    })();

    function now() {
      return new Date().getTime();
    }

    function cacheKiller() {
      return "" + now() + cacheKillerCounter++;
    }

    function performanceInMs() {
      var res =
        window.performance && window.performance.now
          ? window.performance.now()
          : -1;

      return Math.round(res);
    }

    var cacheKillerCounter = 0;

    var startTime = now();

    var defaultEventArgs = {
      _: cacheKiller,
      _lv: "2.0.876|L3",
      ms: performanceInMs,
    };

    var defaultErrorArgs = {
      _: cacheKiller,
      _lv: "2.0.876|L3",
      ts: function () {
        return now() - startTime;
      },
      cat: W.BI.Categories.VIEWER,
      sev: W.BI.ErrorSeverity.WARNING,
      iss: 1,
      ver: "1",
    };

    var _initOptions = {
      // The BI server's hostname
      hostName: "frog.wix.com",

      // The default event args that will be sent with each BI log call (src, time?)
      defaultEventArgs: {},

      // The default event args that will be sent with each error log (src, cat, iss, ver)
      defaultErrorArgs: {},

      // The BI server URL
      biUrl: "//frog.wix.com/",

      // Schemas validators, should look like this:
      // {match: () => true, execute: () => undefined}
      schemaValidators: [],

      // The BI adapter (maps to a path in the url)
      adapter: "",

      // error output stream
      error: function (str) {
        throw str;
      },
    };

    var EVENT_IDS = {
      ERROR: 10,
      ON_READY: 302,
      ROUTE_CHANGE: 300,
    };

    function _extend(dst) {
      for (var i = 1; i < arguments.length; i++) {
        var extending = arguments[i];
        if (extending) {
          for (var key in extending) {
            dst[key] = extending[key];
          }
        }
      }
      return dst;
    }

    function biLogger(args) {
      var _lastBiUrl = {
        url: undefined,
        assertEmpty: function () {
          if (this.url !== undefined) {
            throw "last bi is not empty!!!";
          }
        },
        resolve: function () {
          this.callback();
        },
        clear: function () {
          this.url = undefined;
        },
      };

      var _options;
      var fieldParsers = new W.BI.FieldParsers(args.injector);

      if (args.hostName) {
        args.biUrl = "//" + args.hostName + "/";
      }

      _options = _extend({}, _initOptions, args);

      function _log(eventArgs, callback) {
        var _biFieldsRestrictions = {
          src: { type: "number" },
          evid: { type: "number" },
        };

        var eventParams = _extend(
          {
            _brandId: globalApi.getCommonConfigValue("brand"),
          },
          defaultEventArgs,
          _options.defaultEventArgs,
          eventArgs
        );

        var bsi = globalApi.getBsi();
        if (bsi) {
          eventParams._bsi = bsi;
        }

        var schemaValidators = _options.schemaValidators || [];
        var validatorsResult =
          schemaValidators.length > 0
            ? schemaValidators.some(function (validator) {
                return (
                  validator.match(eventParams) &&
                  (validator.execute(eventParams) || true)
                );
              })
            : true;

        if (!validatorsResult) {
          throw new Error("No validator accepted the event");
        }

        if (
          _validateBiEventArgs(eventParams, ["evid"], _biFieldsRestrictions)
        ) {
          _sendBiEvent(eventParams, callback);
        }
      }

      function _error(errorArgs, callback) {
        var _requiredErrorFields = ["evid", "cat", "iss", "sev", "errc", "ver"];
        var _errorFieldsRestrictions = {
          src: { type: "number" },
          evid: { type: "number", values: [EVENT_IDS.ERROR] },
          cat: {
            type: "number",
            values: [
              W.BI.Categories.EDITOR,
              W.BI.Categories.VIEWER,
              W.BI.Categories.TIMEOUTS,
              W.BI.Categories.SERVER,
            ],
          },
          iss: { type: "number" },
          sev: {
            type: "number",
            values: [
              W.BI.ErrorSeverity.RECOVERABLE,
              W.BI.ErrorSeverity.WARNING,
              W.BI.ErrorSeverity.ERROR,
              W.BI.ErrorSeverity.FATAL,
            ],
          },
          errc: { type: "number" },
          httpc: { type: "number" },
          ver: { type: "string", maxLength: 16 },
          errscp: { type: "string", subStr: 64 },
          trgt: { type: "string", subStr: 64 },
          gsi: { type: "string", length: 36 },
          ts: { type: "number" },
          uid: { type: "number" },
          ut: { type: "string", maxLength: 16 },
          did: { type: "string", maxLength: 36 },
          cid: { type: "string", length: 36 },
          lng: { type: "string", maxLength: 5 },
          dsc: { type: "string", subStr: 512 },
        };

        var errorParams = _extend(
          {},
          defaultErrorArgs,
          _options.defaultErrorArgs,
          errorArgs,
          { evid: EVENT_IDS.ERROR }
        );

        if (
          _validateBiEventArgs(
            errorParams,
            _requiredErrorFields,
            _errorFieldsRestrictions
          )
        ) {
          _sendBiEvent(errorParams, callback);
        }
      }

      function _reportOnReady(viewName, eventArgs, callback) {
        var _onReadyFieldsRestrictions = {
          view: { type: "string" },
        };

        var eventParams = _extend({}, eventArgs, {
          evid: EVENT_IDS.ON_READY,
          view: viewName,
        });
        if (
          _validateBiEventArgs(
            eventParams,
            ["view"],
            _onReadyFieldsRestrictions
          )
        ) {
          _log(eventParams, callback);
        }
      }

      function _reportRouteChange(viewName, eventArgs, callback) {
        var _routeChangeFieldsRestrictions = {
          view: { type: "string" },
        };

        var eventParams = _extend({}, eventArgs, {
          evid: EVENT_IDS.ROUTE_CHANGE,
          view: viewName,
        });
        if (
          _validateBiEventArgs(
            eventParams,
            ["view"],
            _routeChangeFieldsRestrictions
          )
        ) {
          _log(eventParams, callback);
        }
      }

      function _validateBiEventArgs(eventArgs, requiredArgs, restrictions) {
        var missingRequiredArgs = requiredArgs.slice(0);
        for (var key in eventArgs) {
          // validate & parse the key
          var currentRestrictions = restrictions[key] || {};

          eventArgs[key] = fieldParsers.parse(
            eventArgs[key],
            currentRestrictions
          );
          if (!fieldParsers.valid(eventArgs[key], currentRestrictions)) {
            _options.error(
              "Bad event param (key: " +
                key +
                ", value: " +
                eventArgs[key] +
                ")"
            );
            return;
          }

          // remove the key from the required fields
          var missingIndex;
          if ((missingIndex = missingRequiredArgs.indexOf(key)) > -1) {
            missingRequiredArgs.splice(missingIndex, 1);
          }
        }

        if (missingRequiredArgs.length > 0) {
          _options.error(
            "Missing required params: " + missingRequiredArgs.join(", ")
          );
          return false;
        }

        return true;
      }

      function _addUrlParams(url, params) {
        var delimiter = url.match(/\?./) ? "&" : "?";
        return (
          url.replace(/\?$/, "") +
          delimiter +
          Object.keys(params)
            .filter(function (key) {
              return (
                !_options.removeUndefinedValues || params[key] !== undefined
              );
            })
            .map(function (key) {
              return [
                encodeURIComponent(key),
                "=",
                encodeURIComponent(params[key]),
              ].join("");
            })
            .join("&")
        );
      }

      function _sendPixel(url, image, onComplete) {
        var onFinish = function () {
          onComplete("pixel");
        };

        var biImage = image || new Image(0, 0);
        biImage.onload = onFinish;
        biImage.onerror = onFinish;
        biImage.src = url;
      }

      function _sendBeacon(url, onComplete) {
        if (!window.navigator || !window.navigator.sendBeacon) {
          return false;
        }

        return (
          window.navigator.sendBeacon(url) &&
          setTimeout(function () {
            onComplete("beacon");
          }, 0)
        );
      }

      function encodePolicyValue(policy, key) {
        if (!policy) {
          return 1;
        }

        if (typeof policy[key] === "boolean") {
          return policy[key] ? 1 : 0;
        }

        return policy[key];
      }

      function _sendBiEvent(eventArgs, callback) {
        var policy = globalApi.getConsentPolicy();

        // Don't send event if policy doesn't allow it
        if (
          policy &&
          (policy.functional === false || policy.analytics === false)
        ) {
          return;
        }

        var biUrl =
          args.hostName || args.biUrl
            ? _options.biUrl
            : globalApi.getBiUrl(globalApi.getCommonConfigValue("brand"));
        biUrl = biUrl || "//frog.wix.com/";

        // set the adapter
        var frogAdapter = eventArgs.adapter || _options.adapter;
        delete eventArgs.adapter;

        eventArgs._isca = encodePolicyValue(policy, "analytics");
        eventArgs._iscf = encodePolicyValue(policy, "functional");
        eventArgs._ispd = policy.__default ? 1 : 0;
        eventArgs._ise = 0;

        var url = _addUrlParams(biUrl + frogAdapter, eventArgs);
        var onComplete = callback || function () {};

        if (!W.BI.DryRun) {
          if (!_options.useBeacon || !_sendBeacon(url, onComplete)) {
            _sendPixel(url, _options.image, onComplete);
          }
        } else {
          setTimeout(onComplete, 0);
        }

        // for UT purpose
        _lastBiUrl.url = url;
        _lastBiUrl.callback = callback;
      }

      return {
        log: _log,
        reportOnReady: _reportOnReady,
        reportRouteChange: _reportRouteChange,
        error: _error,

        getLastBiUrl: function () {
          return _lastBiUrl; // for UT purpose
        },
      };
    }

    return biLogger;
  })();

  return W;
});
