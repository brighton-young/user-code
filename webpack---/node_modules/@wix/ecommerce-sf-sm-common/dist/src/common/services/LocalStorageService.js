"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalStorageService = void 0;
var angular = require("angular");
var LocalStorageService = /** @class */ (function () {
  /* @ngInject */
  function LocalStorageService($window, $log) {
    this.$window = $window;
    this.$log = $log;
    this.listenersMap = {};
    this.isLocalStorageAvailable = true;
    this.checkIfLocalStorageAvailable();
  }
  LocalStorageService.prototype.checkIfLocalStorageAvailable = function () {
    try {
      var testKey = "__wixstores__";
      this.setItem(testKey, testKey);
      if (this.getItem(testKey) !== testKey) {
        this.isLocalStorageAvailable = false;
      }
      this.removeItem(testKey);
    } catch (e) {
      this.isLocalStorageAvailable = false;
    }
  };
  LocalStorageService.prototype.isAvailable = function () {
    return this.isLocalStorageAvailable;
  };
  LocalStorageService.prototype.setItem = function (key, value) {
    this.storage(key, value);
  };
  LocalStorageService.prototype.getItem = function (key) {
    return this.storage(key);
  };
  LocalStorageService.prototype.removeItem = function (key) {
    try {
      this.$window.localStorage.removeItem(key);
    } catch (ex) {
      this.$log.error("Error accessing local storage.", ex);
      throw new Error("Error accessing local storage.");
    }
  };
  LocalStorageService.prototype.storage = function (key, value) {
    var res;
    if (value) {
      this.$window.localStorage.setItem(key, value);
    }
    res = this.$window.localStorage.getItem(key);
    return res;
  };
  LocalStorageService.prototype.registerOnItemChanged = function (
    key,
    callback
  ) {
    if (key === undefined || key === "") {
      return;
    }
    if (this.isListenersMapEmpty()) {
      this.bindLocalStorageListener();
    }
    this.addCallback(key, callback);
  };
  LocalStorageService.prototype.unregisterChangeOnItem = function (
    key,
    callback
  ) {
    if (key === undefined || key === "") {
      return;
    }
    this.removeCallback(key, callback);
    if (this.isListenersMapEmpty()) {
      this.unbindLocalStorageListener();
    }
  };
  LocalStorageService.prototype.bindLocalStorageListener = function () {
    var _this = this;
    angular.element(this.$window).on("storage", function (event) {
      if (!event.originalEvent) {
        return;
      }
      var key = event.originalEvent.key;
      if (_this.listenersMap[key]) {
        _this.listenersMap[key].forEach(function (callback) {
          callback(event.originalEvent);
        });
      }
    });
  };
  LocalStorageService.prototype.unbindLocalStorageListener = function () {
    angular.element(this.$window).off("storage");
  };
  LocalStorageService.prototype.isListenersMapEmpty = function () {
    return Object.keys(this.listenersMap).length === 0;
  };
  LocalStorageService.prototype.addCallback = function (key, callback) {
    this.listenersMap[key] = this.listenersMap[key] || [];
    var keyListeners = this.listenersMap[key];
    if (keyListeners.indexOf(callback) === -1) {
      this.listenersMap[key].push(callback);
    }
  };
  LocalStorageService.prototype.removeCallback = function (key, callback) {
    var callbackIndex = this.listenersMap[key]
      ? this.listenersMap[key].indexOf(callback)
      : -1;
    if (callbackIndex > -1) {
      this.listenersMap[key].splice(callbackIndex, 1);
      if (this.listenersMap[key].length === 0) {
        delete this.listenersMap[key];
      }
    }
  };
  return LocalStorageService;
})();
exports.LocalStorageService = LocalStorageService;
