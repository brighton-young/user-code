"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BulkCommandsExecutorService = exports.BulkCommandsExecutor = void 0;
var BulkCommandsExecutor = /** @class */ (function () {
  function BulkCommandsExecutor(bulkExecutionUrl, $q, HttpFacade) {
    this.bulkExecutionUrl = bulkExecutionUrl;
    this.$q = $q;
    this.HttpFacade = HttpFacade;
    this.commands = [];
  }
  BulkCommandsExecutor.prototype.addCommand = function (
    commandName,
    commandData
  ) {
    if (commandData === void 0) {
      commandData = {};
    }
    this.commands.push({
      name: commandName,
      data: commandData,
    });
  };
  BulkCommandsExecutor.prototype.executeBulk = function (showAppMessage) {
    if (showAppMessage === void 0) {
      showAppMessage = true;
    }
    var res;
    if (!this.commands || this.commands.length === 0) {
      res = this.$q.when({ success: true, errors: [] });
    } else {
      var errorInput = {
        action: "executeBulk",
        messageKey: "appMessage.GENERIC_ERROR_MESSAGE",
        isRefreshable: true,
        isRecoverable: false,
        showAppMessage: showAppMessage,
      };
      res = this.HttpFacade.doHTTPPost(
        errorInput,
        this.bulkExecutionUrl,
        null,
        { commands: this.commands }
      );
    }
    return res;
  };
  return BulkCommandsExecutor;
})();
exports.BulkCommandsExecutor = BulkCommandsExecutor;
var BulkCommandsExecutorService = /** @class */ (function () {
  /* @ngInject */
  function BulkCommandsExecutorService($q, HttpFacade) {
    this.$q = $q;
    this.HttpFacade = HttpFacade;
  }
  BulkCommandsExecutorService.prototype.startBulk = function (
    bulkExecutionUrl
  ) {
    return new BulkCommandsExecutor(bulkExecutionUrl, this.$q, this.HttpFacade);
  };
  return BulkCommandsExecutorService;
})();
exports.BulkCommandsExecutorService = BulkCommandsExecutorService;
