"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HostingServiceProvider = exports.HostingService = void 0;
var HostingService = /** @class */ (function () {
  /* @ngInject */
  function HostingService($location) {
    this.$location = $location;
  }
  HostingService.extractInstance = function () {
    var instance = HostingService.extractParam(["Authorization", "instance"]);
    return instance ? instance : "INSTANCE_NOT_FOUND";
  };
  HostingService.extractMultiLingualParam = function () {
    var langParam = HostingService.extractParam(["locale"]);
    langParam = langParam.split("-")[0];
    return langParam;
  };
  HostingService.extractParam = function (paramList) {
    var urlParams = document.location.search;
    if (urlParams.indexOf("?") === 0) {
      urlParams = urlParams.substring(1);
    }
    var returnValue = "";
    var params = urlParams.split("&");
    var _loop_1 = function (i) {
      var param = params[i];
      var nameValuePair = param.split("=");
      paramList.forEach(function (paramName) {
        if (nameValuePair[0] === paramName) {
          returnValue = nameValuePair[1];
        }
      });
      if (nameValuePair[0] === paramList) {
        returnValue = nameValuePair[1];
      }
    };
    for (var i = 0; i < params.length; i++) {
      _loop_1(i);
    }
    return returnValue;
  };
  HostingService.prototype.extractInstance = function () {
    var instance = HostingService.extractParam(["Authorization", "instance"]);
    return instance ? instance : "INSTANCE_NOT_FOUND";
  };
  HostingService.prototype.extractParam = function (paramList) {
    var urlParams = document.location.search;
    if (urlParams.indexOf("?") === 0) {
      urlParams = urlParams.substring(1);
    }
    var returnValue = "";
    var params = urlParams.split("&");
    var _loop_2 = function (i) {
      var param = params[i];
      var nameValuePair = param.split("=");
      paramList.forEach(function (paramName) {
        if (nameValuePair[0] === paramName) {
          returnValue = nameValuePair[1];
        }
      });
      if (nameValuePair[0] === paramList) {
        returnValue = nameValuePair[1];
      }
    };
    for (var i = 0; i < params.length; i++) {
      _loop_2(i);
    }
    return returnValue;
  };
  HostingService.prototype.getProtocol = function () {
    return this.$location.protocol();
  };
  return HostingService;
})();
exports.HostingService = HostingService;
var HostingServiceProvider = /** @class */ (function () {
  /* @ngInject */
  function HostingServiceProvider() {
    //
  }
  /* @ngInject */
  HostingServiceProvider.prototype.$get = function ($injector) {
    var location = $injector.get("$location");
    return $injector.instantiate(HostingService, { $location: location });
  };
  return HostingServiceProvider;
})();
exports.HostingServiceProvider = HostingServiceProvider;
