"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Utils = exports.MAX_IMAGE_DIMENSION = void 0;
var mediaTypes_1 = require("../../enums/mediaTypes");
exports.MAX_IMAGE_DIMENSION = 5000;
var Utils = /** @class */ (function () {
  /* @ngInject */
  function Utils(sdkAdapter) {
    var _this = this;
    this.sdkAdapter = sdkAdapter;
    this.media = {
      isValidMedia: function (media) {
        return (
          media !== null &&
          typeof media === "object" &&
          [mediaTypes_1.MediaType.PHOTO, mediaTypes_1.MediaType.VIDEO].indexOf(
            media.mediaType
          ) > -1 &&
          typeof media.url === "string"
        );
      },
      isValidDimension: function (dimension) {
        return dimension.width || dimension.height;
      },
      getFilenameWithoutExtension: function (filename) {
        var parts = filename.split(".");
        if (parts.length > 1) {
          parts.pop();
        }
        return parts.join(".");
      },
      getMediaUrl: function (media, requiredViewPort) {
        if (
          !_this.media.isValidMedia(media) ||
          !_this.media.isValidDimension(requiredViewPort)
        ) {
          return "";
        }
        var newHeight;
        var newWidth;
        var mediaWidth = Number(media.width);
        var mediaHeight = Number(media.height);
        var mediaRatio = mediaWidth / mediaHeight;
        var viewPortWidth =
          requiredViewPort.width || requiredViewPort.height * mediaRatio;
        var viewPortHeight =
          requiredViewPort.height || requiredViewPort.width / mediaRatio;
        var viewPortRatio = viewPortWidth / viewPortHeight;
        var minWidth = Math.min(viewPortWidth, mediaWidth);
        var minHeight = Math.min(viewPortHeight, mediaHeight);
        if (viewPortRatio === 1) {
          newWidth = newHeight = Math.round(
            Math.min(viewPortWidth, mediaWidth, mediaHeight)
          );
        }
        if (viewPortRatio > 1) {
          newWidth = minWidth;
          newHeight = newWidth / viewPortRatio;
          if (newHeight > mediaHeight) {
            newHeight = mediaHeight;
            newWidth = newHeight * viewPortRatio;
          }
        } else {
          newHeight = minHeight;
          newWidth = newHeight * viewPortRatio;
          if (newWidth > mediaWidth) {
            newWidth = mediaWidth;
            newHeight = newWidth / viewPortRatio;
          }
        }
        var divider = Math.max(
          newWidth / exports.MAX_IMAGE_DIMENSION,
          newHeight / exports.MAX_IMAGE_DIMENSION
        );
        if (divider > 1) {
          newWidth = newWidth / divider;
          newHeight = newHeight / divider;
        }
        return _this.sdkAdapter.getImageUrl(
          media.url,
          Math.round(newWidth),
          Math.round(newHeight)
        );
      },
    };
  }
  return Utils;
})();
exports.Utils = Utils;
