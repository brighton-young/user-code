"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.$TranslateEscapedInterpolation = void 0;
/**
 * @description
 * Uses angular's `$interpolate` services to interpolate strings against some values.
 * Based on pascalprecht.translate.$translatDefaultInterpolation from version ^2.0.0
 * https://github.com/angular-translate/angular-translate/blob/01fcd42040cb876f04d686f4fc7b36de1aca38ce/src/service/default-interpolation.js
 */
var $TranslateEscapedInterpolation = /** @class */ (function () {
  /* @ngInject */
  function $TranslateEscapedInterpolation($interpolate) {
    var _this = this;
    this.$interpolate = $interpolate;
    this.$identifier = "escaped";
    this.$sanitizeValueStrategy = "escaped";
    this.sanitizeValueStrategies = {
      escaped: function (params) {
        var result = {};
        for (var key in params) {
          if (Object.prototype.hasOwnProperty.call(params, key)) {
            result[key] = angular.isNumber(params[key])
              ? params[key]
              : angular.element("<div></div>").text(params[key]).html();
          }
        }
        return result;
      },
    };
    this.sanitizeParams = function (params) {
      var result;
      if (
        angular.isFunction(
          _this.sanitizeValueStrategies[_this.$sanitizeValueStrategy]
        )
      ) {
        result =
          _this.sanitizeValueStrategies[_this.$sanitizeValueStrategy](params);
      } else {
        result = params;
      }
      return result;
    };
    //
  }
  $TranslateEscapedInterpolation.prototype.setLocale = function (_locale) {
    //
  };
  $TranslateEscapedInterpolation.prototype.getInterpolationIdentifier =
    function () {
      return this.$identifier;
    };
  $TranslateEscapedInterpolation.prototype.useSanitizeValueStrategy = function (
    value
  ) {
    this.$sanitizeValueStrategy = value;
    return this;
  };
  $TranslateEscapedInterpolation.prototype.interpolate = function (
    string,
    interpolateParams
  ) {
    if (this.$sanitizeValueStrategy) {
      interpolateParams = this.sanitizeParams(interpolateParams);
    }
    return this.$interpolate(string)(interpolateParams || {});
  };
  return $TranslateEscapedInterpolation;
})();
exports.$TranslateEscapedInterpolation = $TranslateEscapedInterpolation;
angular
  .module("pascalprecht.translate")
  .factory("$translateEscapedInterpolation", [
    "$interpolate",
    function ($interpolate) {
      return new $TranslateEscapedInterpolation($interpolate);
    },
  ]);
