"use strict";
var __assign =
  (this && this.__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
    return __assign.apply(this, arguments);
  };
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpFacadeProvider = exports.HttpFacade = void 0;
var HostingService_1 = require("./HostingService");
var printer_1 = require("graphql/language/printer");
var HttpFacade = /** @class */ (function () {
  /* @ngInject */
  function HttpFacade(
    $http,
    $q,
    ApiUrlParser,
    AppMessagesService,
    wixBIAdapter,
    clientConfig,
    $window,
    hostingService,
    graphQlEndpoint,
    onInstanceUpdate,
    experimentManager
  ) {
    var _this = this;
    this.$http = $http;
    this.$q = $q;
    this.ApiUrlParser = ApiUrlParser;
    this.AppMessagesService = AppMessagesService;
    this.wixBIAdapter = wixBIAdapter;
    this.clientConfig = clientConfig;
    this.$window = $window;
    this.hostingService = hostingService;
    this.graphQlEndpoint = graphQlEndpoint;
    this.onInstanceUpdate = onInstanceUpdate;
    this.experimentManager = experimentManager;
    this.m_instance =
      this.clientConfig.instance || hostingService.extractInstance();
    this.createLinguistHeader();
    this.createCurrencyHeader();
    if (this.onInstanceUpdate) {
      this.onInstanceUpdate(function (newInstance) {
        _this.m_instance = newInstance;
      });
    }
  }
  HttpFacade.prototype.createCurrencyHeader = function () {
    this.currencyConverter_header =
      HostingService_1.HostingService.extractParam(["currentCurrency"]);
  };
  HttpFacade.prototype.createLinguistHeader = function () {
    var localeParam = HostingService_1.HostingService.extractParam([
      "dateNumberFormat",
    ]);
    var langParam = HostingService_1.HostingService.extractParam(["lang"]);
    var isPrimaryLangParam = HostingService_1.HostingService.extractParam([
      "isPrimaryLanguage",
    ]);
    var instanceId = this.decodeInstance();
    if (langParam && instanceId && localeParam && isPrimaryLangParam) {
      this.ml_header = [
        langParam,
        localeParam,
        isPrimaryLangParam,
        instanceId,
      ].join("|");
    }
  };
  HttpFacade.prototype.getBaseHeaders = function () {
    var headers = {
      Authorization: this.m_instance,
      "Content-Type": "application/json; charset=utf-8",
      "x-wix-linguist": this.ml_header,
    };
    if (this.currencyConverter_header) {
      headers["x-wix-currency"] = this.currencyConverter_header;
    }
    return headers;
  };
  HttpFacade.prototype.decodeInstance = function () {
    var encodedInstance = this.m_instance && this.m_instance.split(".")[1];
    var instanceId;
    try {
      instanceId =
        encodedInstance &&
        JSON.parse(this.$window.atob(encodedInstance)).instanceId;
    } catch (e) {} // tslint:disable-line
    return instanceId;
  };
  HttpFacade.prototype.doHTTPGet = function (
    errorInput,
    urlTemplate,
    templateParams,
    queryParams,
    headers
  ) {
    var _this = this;
    var deferred = this.$q.defer();
    var url = this.ApiUrlParser.parse(urlTemplate, templateParams, queryParams);
    this.doInnerHTTPGet(url, headers)
      .then(function (response) {
        _this.handleHTTPResponse(deferred, response);
      })
      .catch(function (response) {
        _this.handleHTTPError(
          errorInput,
          deferred,
          url,
          null,
          response.data,
          _this.doInnerHTTPGet
        );
      });
    return deferred.promise;
  };
  HttpFacade.prototype.doHTTPPost = function (
    errorInput,
    urlTemplate,
    templateParams,
    data,
    queryParams
  ) {
    var _this = this;
    var deferred = this.$q.defer();
    var url = this.ApiUrlParser.parse(urlTemplate, templateParams, queryParams);
    this.doInnerHTTPPost(url, data)
      .then(function (response) {
        _this.handleHTTPResponse(deferred, response);
      })
      .catch(function (response) {
        _this.handleHTTPError(
          errorInput,
          deferred,
          url,
          data,
          response.data,
          _this.doInnerHTTPPost.bind(_this)
        );
      });
    return deferred.promise;
  };
  HttpFacade.prototype.doHTTPQl = function (_a) {
    var _this = this;
    var query = _a.query,
      operationName = _a.operationName,
      variables = _a.variables,
      errorInput = _a.errorInput;
    var sentData = {
      // @ts-ignore
      query:
        query["kind"] === "Document"
          ? printer_1.print(query)
          : query.toString(),
      operationName: operationName,
      source: "WixStoresWebClient",
      variables: variables,
    };
    var deferred = this.$q.defer();
    this.doInnerHTTPPost(this.graphQlEndpoint, sentData, true)
      .then(
        function (_a) {
          var data = _a.data;
          if (!data || data.errors) {
            // temporary hack
            if (
              data &&
              data.errors &&
              data.errors[0].message.indexOf(
                "Cannot return null for non-nullable type"
              ) > -1
            ) {
              return deferred.resolve(data.data);
            }
            return _this.$q.reject(data && data.errors);
          }
          deferred.resolve(data.data);
        },
        function (response) {
          return _this.$q.reject(response.data);
        }
      )
      .catch(function (response) {
        if (errorInput) {
          _this.handleHTTPError(
            errorInput,
            deferred,
            _this.graphQlEndpoint,
            null,
            response,
            _this.doInnerHTTPPost.bind(_this),
            true
          );
        } else {
          deferred.reject(response);
        }
      });
    return deferred.promise;
  };
  HttpFacade.prototype.doHTTPPatch = function (
    errorInput,
    urlTemplate,
    templateParams,
    data,
    queryParams
  ) {
    var _this = this;
    var deferred = this.$q.defer();
    var url = this.ApiUrlParser.parse(urlTemplate, templateParams, queryParams);
    this.doInnerHTTPPatch(url, data)
      .then(function (response) {
        _this.handleHTTPResponse(deferred, response);
      })
      .catch(function (response) {
        _this.handleHTTPError(
          errorInput,
          deferred,
          url,
          data,
          response.data,
          _this.doInnerHTTPPatch.bind(_this)
        );
      });
    return deferred.promise;
  };
  HttpFacade.prototype.doHTTPPut = function (
    errorInput,
    urlTemplate,
    templateParams,
    data,
    queryParams
  ) {
    var _this = this;
    var deferred = this.$q.defer();
    var url = this.ApiUrlParser.parse(urlTemplate, templateParams, queryParams);
    this.doInnerHTTPPut(url, data)
      .then(function (response) {
        _this.handleHTTPResponse(deferred, response);
      })
      .catch(function (response) {
        _this.handleHTTPError(
          errorInput,
          deferred,
          url,
          data,
          response.data,
          _this.doInnerHTTPPut.bind(_this)
        );
      });
    return deferred.promise;
  };
  HttpFacade.prototype.handleHTTPResponse = function (deferred, response) {
    if (this.isResponseSupportPayload(response.data)) {
      response.data.executed
        ? deferred.resolve(response.data.payload)
        : deferred.reject(response.data.errors);
    } else {
      response.data.errors && response.data.errors.length
        ? deferred.reject(response.data.errors)
        : deferred.resolve(response.data);
    }
  };
  HttpFacade.prototype.isResponseSupportPayload = function (response) {
    return (
      response &&
      response.hasOwnProperty("payload") &&
      response.hasOwnProperty("executed") &&
      response.hasOwnProperty("errors")
    );
  };
  HttpFacade.prototype.handleHTTPError = function (
    errorInput,
    deferred,
    requestUrl,
    requestData,
    errorData,
    doInnerHTTP,
    isJson
  ) {
    var errorMessage = errorInput.mapErrorCodesToTranslationKeys
      ? errorInput.mapErrorCodesToTranslationKeys(errorData)
      : errorInput.messageKey;
    // Internal error
    if (errorInput.isRecoverable && this.AppMessagesService) {
      this.AppMessagesService.addError(errorMessage, function () {
        return doInnerHTTP(requestUrl, requestData, isJson)
          .success(function (data) {
            return deferred.resolve(data);
          })
          .error(function (error) {
            return deferred.reject(error);
          });
      });
    } else {
      if (errorInput.showAppMessage && this.AppMessagesService) {
        if (errorInput.isRefreshable) {
          this.AppMessagesService.onErrorMessage(errorMessage, undefined, true);
        } else {
          this.AppMessagesService.onErrorMessage(errorMessage);
        }
      }
      deferred.reject(errorData);
    }
  };
  HttpFacade.prototype.doInnerHTTPGet = function (url, customHeaders) {
    if (customHeaders === void 0) {
      customHeaders = {};
    }
    var headers = __assign(__assign({}, this.getBaseHeaders()), customHeaders);
    return this.$http({
      url: url,
      method: "GET",
      headers: headers,
    });
  };
  HttpFacade.prototype.doInnerHTTPPost = function (url, data, isJson) {
    var headers = __assign({}, this.getBaseHeaders());
    if (isJson) {
      headers["Accept"] = "application/json; charset=utf-8";
    }
    return this.$http({
      url: url,
      data: data,
      method: "POST",
      headers: headers,
    });
  };
  HttpFacade.prototype.doInnerHTTPPatch = function (url, data, isJson) {
    var headers = __assign({}, this.getBaseHeaders());
    if (isJson) {
      headers["Accept"] = "application/json; charset=utf-8";
    }
    return this.$http({
      url: url,
      data: data,
      method: "PATCH",
      headers: headers,
    });
  };
  HttpFacade.prototype.doInnerHTTPPut = function (url, data, isJson) {
    var headers = __assign({}, this.getBaseHeaders());
    if (isJson) {
      headers["Accept"] = "application/json; charset=utf-8";
    }
    return this.$http({
      url: url,
      data: data,
      method: "PUT",
      headers: headers,
    });
  };
  return HttpFacade;
})();
exports.HttpFacade = HttpFacade;
var HttpFacadeProvider = /** @class */ (function () {
  /* @ngInject */
  function HttpFacadeProvider() {
    this.appMessagesServiceName = null;
    this.graphQlEndpoint = null;
    this.onInstanceUpdate = null;
    //
  }
  HttpFacadeProvider.prototype.setAppMessagesService = function (service) {
    this.appMessagesServiceName = service;
  };
  HttpFacadeProvider.prototype.setGraphQlEndpoint = function (url) {
    this.graphQlEndpoint = url;
  };
  HttpFacadeProvider.prototype.setOnInstanceUpdate = function (fn) {
    this.onInstanceUpdate = fn;
  };
  /* @ngInject */
  HttpFacadeProvider.prototype.$get = function ($injector) {
    var service = this.appMessagesServiceName
      ? $injector.get(this.appMessagesServiceName)
      : null;
    return $injector.instantiate(HttpFacade, {
      AppMessagesService: service,
      graphQlEndpoint: this.graphQlEndpoint,
      onInstanceUpdate: this.onInstanceUpdate,
    });
  };
  return HttpFacadeProvider;
})();
exports.HttpFacadeProvider = HttpFacadeProvider;
