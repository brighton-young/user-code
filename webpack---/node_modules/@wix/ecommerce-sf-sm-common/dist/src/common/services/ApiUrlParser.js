"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiUrlParser = void 0;
var ApiUrlParser = /** @class */ (function () {
  function ApiUrlParser() {}
  ApiUrlParser.prototype.parse = function (url, templateParams, queryParams) {
    templateParams = this.initParams(templateParams);
    queryParams = this.initParams(queryParams);
    // replace templateParams
    url = this.replaceTemplateParams(url, templateParams);
    // add queryParams
    url = this.addQueryParams(url, queryParams);
    return url;
  };
  ApiUrlParser.prototype.replaceTemplateParams = function (
    url,
    templateParams
  ) {
    for (var param in templateParams) {
      if (
        typeof templateParams[param] === "string" ||
        typeof templateParams[param] === "number" ||
        typeof templateParams[param] === "boolean"
      ) {
        url = url.replace("{" + param + "}", templateParams[param]);
      }
    }
    return url;
  };
  ApiUrlParser.prototype.addQueryParams = function (templateUrl, queryParams) {
    if (typeof queryParams !== "object") {
      return templateUrl;
    }
    // Build parameters array
    var paramsArray = [];
    for (var key in queryParams) {
      if (queryParams.hasOwnProperty(key)) {
        paramsArray.push(key + "=" + queryParams[key]);
      }
    }
    // Replace only if there parameters
    var url = templateUrl;
    if (paramsArray.length > 0) {
      url = [
        templateUrl,
        templateUrl.indexOf("?") !== -1 ? "&" : "?",
        paramsArray.join("&"),
      ].join("");
    }
    return url;
  };
  ApiUrlParser.prototype.initParams = function (params) {
    if (params === null || typeof params === "undefined") {
      params = {};
    }
    return params;
  };
  return ApiUrlParser;
})();
exports.ApiUrlParser = ApiUrlParser;
