"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WixProvider = exports.SdkAdapterProvider = exports.SdkAdapter = void 0;
var angular = require("angular");
var SdkAdapter = /** @class */ (function () {
  /* @ngInject */
  function SdkAdapter(
    Wix,
    $q,
    $timeout,
    provider,
    appDefId,
    browserFeatures,
    experimentManager
  ) {
    var _this = this;
    this.Wix = Wix;
    this.$q = $q;
    this.$timeout = $timeout;
    this.provider = provider;
    this.appDefId = appDefId;
    this.browserFeatures = browserFeatures;
    this.experimentManager = experimentManager;
    /** Popup position options */
    this.EnumPopupPosition = {
      BOTTOM_CENTER: 0,
      BOTTOM_RIGHT: 1,
      FIXED_RIGHT: 2,
    };
    /**
     * build url of page with url customize service
     *  @param identifier - Identifier for page
     *  @param itemData - Build url with itemData like slug and etc...
     *  @param options - currently for fallback when no mapping in defined - pathPrefix
     */
    this.buildCustomizedUrl = function (identifier, itemData, options) {
      return _this.$q(function (resolve) {
        _this.Wix.Location.buildCustomizedUrl(
          identifier,
          itemData,
          options,
          resolve
        );
      });
    };
    this.getBiToken = provider.getBiToken.bind(provider);
    this.isStandaloneMode = provider.isStandaloneMode.bind(provider);
  }
  /**
   * Open modal dialog with specific url
   * @param url
   * @param width
   * @param height
   * @param onClose
   */
  SdkAdapter.prototype.openModal = function (url, width, height, onClose) {
    this.Wix.openModal(url, width, height, onClose);
  };
  SdkAdapter.prototype.openSettingsModal = function (
    url,
    width,
    height,
    title,
    onClose,
    bareUI,
    options
  ) {
    this.Wix.Settings.openModal(
      url,
      width,
      height,
      title,
      onClose,
      bareUI,
      options
    );
  };
  SdkAdapter.prototype.openDashboard = function (options) {
    var _this = this;
    return this.$q(function (resolve) {
      options.onClose = resolve;
      _this.Wix.Settings.openDashboard(options);
    });
  };
  /**
   * Open popup
   * @param url - url to open
   * @param width
   * @param height
   * @param position - position from EnumPopupPosition
   * @param onClose - callback function
   */
  SdkAdapter.prototype.openPopup = function (
    url,
    width,
    height,
    position,
    onClose,
    isPersistent
  ) {
    var _this = this;
    // Set up position
    var wixPosition = {};
    switch (position) {
      case this.EnumPopupPosition.BOTTOM_CENTER:
        wixPosition = {
          origin: this.Wix.WindowOrigin.ABSOLUTE,
          placement: this.Wix.WindowPlacement.BOTTOM_CENTER,
          x: 0,
          y: 35,
        };
        break;
      case this.EnumPopupPosition.BOTTOM_RIGHT:
        wixPosition = {
          origin: this.Wix.WindowOrigin.ABSOLUTE,
          placement: this.Wix.WindowPlacement.BOTTOM_RIGHT,
          x: 0,
          y: 0,
        };
        break;
      case this.EnumPopupPosition.FIXED_RIGHT:
        wixPosition = {
          origin: this.Wix.WindowOrigin.FIXED,
          placement: this.Wix.WindowPlacement.TOP_RIGHT,
          x: 0,
          y: 0,
        };
        break;
      default:
    }
    var openPopup = function () {
      if (!_this.isEditMode()) {
        //open popup on preview and in live site
        // Open popup with default theme
        _this.Wix.openPopup(
          url,
          width,
          height,
          wixPosition,
          onClose,
          _this.Wix.Theme.BARE
        );
      }
    };
    openPopup();
    if (isPersistent) {
      this.Wix.addEventListener(this.Wix.Events.PAGE_NAVIGATION_OUT, openPopup);
    }
  };
  SdkAdapter.prototype.openBillingPage = function (referrer) {
    (this.Wix.SuperApps || this.Wix).Settings.openBillingPage(referrer);
  };
  /**
   * Close window
   * @param data
   */
  SdkAdapter.prototype.closeWindow = function (data) {
    this.Wix.closeWindow(data);
  };
  /**
   * Set container height
   * @param height
   */
  SdkAdapter.prototype.setContainerHeight = function (height) {
    this.Wix.setHeight(height);
  };
  /**
   * Navigate to specific page
   * use arguments to pass state seperated by '/'
   */
  SdkAdapter.prototype.navigateToPage = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    this.Wix.Utils.navigateToSection(args.join("/"));
  };
  /**
   * Navigate to specific page
   * @param pageId
   */
  SdkAdapter.prototype.navigateToPageId = function (pageId) {
    this.Wix.navigateToPage(pageId.replace("#", ""));
  };
  /**
   * Navigate to specific page in multi section app
   *  @param sectionId - App page id defined in dev.wix.com
   *  @param state - new apps state to push into the editor history stack
   *  @param errorCB - this will be called if the hosting site does not include the section app, or if the caller's application does not include a section
   *  @param fallbackSectionId - if the navigation failed and fallbackSectionId is supplied then we try to navigate again with the fallback section Id
   */
  SdkAdapter.prototype.navigateToSection = function (
    sectionId,
    state,
    errorCB,
    fallbackSectionId
  ) {
    var _this = this;
    var options = { sectionId: sectionId };
    if (angular.isObject(sectionId)) {
      options = sectionId;
      this.Wix.Utils.navigateToSection(options);
      return;
    }
    if (typeof errorCB === "undefined" || errorCB === null) {
      errorCB = function (event) {
        var message = event.error.message;
        //try to navigate with fallbackSectionId
        if (fallbackSectionId && message.indexOf(options.sectionId) !== -1) {
          _this.Wix.Utils.navigateToSection(
            { sectionId: fallbackSectionId },
            state,
            function () {
              throw new Error(
                "Unable to navigate exception " +
                  fallbackSectionId +
                  (state || "")
              );
            }
          );
        }
        throw new Error(
          "Unable to navigate exception " + sectionId + (state || "")
        );
      };
    }
    this.Wix.Utils.navigateToSection(options, state, errorCB);
  };
  /**
   * Navigate to specific page
   */
  SdkAdapter.prototype.navigateTo = function (link, errorCB) {
    this.Wix.navigateTo(link, errorCB);
  };
  /**
   * Get image full path from uri
   * @param uri
   * @param width - optional with height
   * @param height - optional with width
   */
  SdkAdapter.prototype.getImageUrl = function (uri, width, height) {
    // Width and height must be number, get resized image
    if (typeof width === "number" && typeof height === "number") {
      var shouldUseWebp = this.browserFeatures.isWebpSupported;
      var url = this.Wix.Utils.Media.getResizedImageUrl(
        uri,
        Math.floor(width),
        Math.floor(height)
      );
      return shouldUseWebp ? replaceExtensionWith("webp", url, uri) : url;
    } else {
      return this.Wix.Utils.Media.getImageUrl(uri);
    }
  };
  SdkAdapter.prototype.getVideoUrl = function (uri, format) {
    if (format === "dash" || format === "hls") {
      return "https://files.wix.com" + uri;
    }
    return "https://video.wixstatic.com/" + uri;
  };
  /**
   * Get the component id
   * @returns Component id
   */
  SdkAdapter.prototype.getComponentId = function () {
    return this.Wix.Utils.getCompId();
  };
  /**
   * Get the instance id
   * @returns instance id
   */
  SdkAdapter.prototype.getInstanceId = function () {
    return this.Wix.Utils.getInstanceId();
  };
  SdkAdapter.prototype.getViewMode = function () {
    return this.Wix.Utils.getViewMode();
  };
  SdkAdapter.prototype.onEditorModeChange = function (cb) {
    this.Wix.addEventListener(
      this.Wix.Events.EDIT_MODE_CHANGE,
      function (editModeChangeData) {
        return cb(editModeChangeData.editMode);
      }
    );
  };
  SdkAdapter.prototype.onPublicDataChange = function (cb) {
    this.Wix.addEventListener(this.Wix.Events.PUBLIC_DATA_CHANGED, cb);
  };
  /**
   * If current mode is editor
   * @returns {boolean}
   */
  SdkAdapter.prototype.isEditMode = function () {
    return this.getViewMode() === "editor";
  };
  SdkAdapter.prototype.isLiveSiteMode = function () {
    return this.getViewMode() === "site";
  };
  SdkAdapter.prototype.isPreviewMode = function () {
    return this.getViewMode() === "preview";
  };
  SdkAdapter.prototype.isDashboardMode = function () {
    return this.getViewMode() === "dashboard";
  };
  /**
   * Return the Site info object
   */
  SdkAdapter.prototype.getSiteInfo = function (callback) {
    var _this = this;
    if (callback) {
      return this.$q(function (resolve) {
        _this.Wix.getSiteInfo(function (siteInfo) {
          callback(siteInfo);
          resolve(siteInfo);
        });
      });
    }
    if (this.isEditMode() || this.isPreviewMode() || this.isLiveSiteMode()) {
      return this.$q(function (resolve, reject) {
        var timeoutHandle = _this.$timeout(
          reject,
          1000,
          true,
          ".getSiteInfo() timeout error"
        );
        _this.Wix.getSiteInfo(function (siteInfo) {
          _this.$timeout.cancel(timeoutHandle);
          resolve(siteInfo);
        });
      });
    }
    return this.$q.reject(
      "cannot call .getSiteInfo() in mode different from edit, preview or live site"
    );
  };
  /**
   * @param sectionId (Object, optional) app page id defined in dev center { sectionId : 'sectionId' }
   * @param callback (Function - mandatory if sectionId is passed) a callback function that returns the section's URL
   *   callback signature: function({url: url}) {}
   * @return if no sectionId is passed returns section-url parameter value, otherwise returns null
   * @return sectionId is passed returns section public url from site {url: ur} or error object
   */
  SdkAdapter.prototype.getSectionUrl = function (sectionId, callback) {
    return this.Wix.Utils.getSectionUrl(sectionId, callback);
  };
  SdkAdapter.prototype.resizeWindow = function (width, height, callback) {
    this.Wix.resizeWindow(width, height, callback);
  };
  /**
   * Resize component or page dimensions, works only in Editor Mode
   * @param width
   * @param height
   * @returns {IPromise<T>}
   */
  SdkAdapter.prototype.resizeComponent = function (width, height) {
    var _this = this;
    return this.$q(function (resolve, reject) {
      _this.Wix.resizeComponent(
        { width: width, height: height },
        resolve,
        reject
      );
    });
  };
  /**
   * Get current page id
   * @returns {IPromise<T>}
   */
  SdkAdapter.prototype.getCurrentPageId = function () {
    var _this = this;
    return this.$q(function (resolve) {
      _this.Wix.getCurrentPageId(function (pageId) {
        resolve(pageId);
      });
    });
  };
  /**
   * Get current external Id
   * @returns {IPromise<T>}
   */
  SdkAdapter.prototype.getExternalId = function () {
    var _this = this;
    return this.$q(function (resolve) {
      _this.Wix.getExternalId(function (externalId) {
        resolve(externalId);
      });
    });
  };
  /**
   * Get current SiteTextPresets
   * @returns {IPromise<T>}
   */
  SdkAdapter.prototype.getSiteTextPresets = function () {
    var _this = this;
    return this.$q(function (resolve) {
      _this.Wix.Styles.getSiteTextPresets(function (siteTextPresets) {
        resolve(siteTextPresets);
      });
    });
  };
  /**
   * This method returns a String which represents the current device type.
   * @returns {String} The current device type. One of the following: * desktop *mobile
   */
  SdkAdapter.prototype.getDeviceType = function () {
    return this.Wix.Utils.getDeviceType();
  };
  /**
   * report the app is loaded via BI (42/643)
   */
  SdkAdapter.prototype.reportApplicationLoaded = function () {
    this.Wix.Performance.applicationLoaded();
  };
  /**
   * report load step via BI (42/644)
   */
  SdkAdapter.prototype.reportApplicationLoadingStep = function (
    stepNumber,
    stepName
  ) {
    this.Wix.Performance.applicationLoadingStep &&
      this.Wix.Performance.applicationLoadingStep(stepNumber, stepName);
  };
  /**
   * This method returns a Boolean which represents the current demo mode.
   * @returns {Boolean}
   */
  SdkAdapter.prototype.getDemoMode = function () {
    return this.Wix.Utils.getDemoMode();
  };
  /**
   * Sets metadata for the page component’s internal pages. Search engines display this metadata – the page’s title and/or description – in search results.
   * @param pageMetadata
   */
  SdkAdapter.prototype.setPageMetadata = function (pageMetadata) {
    this.Wix.setPageMetadata(pageMetadata);
  };
  /**
   *
   * @returns {angular.IPromise<builders.ISitePage[]>} pageId starts with '#',
   * in getCurrentPageId it's not!
   */
  SdkAdapter.prototype.getSiteMap = function () {
    var _this = this;
    return this.$q(function (resolve) {
      _this.Wix.getSiteMap(function (sitePages) {
        resolve(sitePages);
      });
    });
  };
  SdkAdapter.prototype.getPublicAPI = function (cb) {
    if (this.isLiveSiteMode() || this.isPreviewMode()) {
      return this.Wix.getPublicAPI({ appDefinitionId: this.appDefId }, cb);
    }
  };
  SdkAdapter.prototype.getPublicData = function (key) {
    return this.getPublicDataByScope(key, "COMPONENT");
  };
  SdkAdapter.prototype.getPublicDataForApp = function (key) {
    return this.getPublicDataByScope(key, "APP");
  };
  SdkAdapter.prototype.getPublicDataByScope = function (key, scope) {
    var _this = this;
    return this.isPublicDataSupported().then(function (supported) {
      if (!supported) {
        return "";
      }
      return _this.$q(function (resolve) {
        _this.Wix.Data.Public.get(
          key,
          { scope: scope },
          function (value) {
            return resolve(value[key]);
          },
          resolve
        );
      });
    });
  };
  SdkAdapter.prototype.getMultiPublicData = function (keysArray) {
    var _this = this;
    if (this.Wix && this.Wix.Data && this.Wix.Data.Public) {
      return this.$q.all(
        keysArray.map(function (key) {
          return _this.getPublicData(key);
        })
      );
    }
  };
  SdkAdapter.prototype.getMultiPublicDataForApp = function (keysArray) {
    var _this = this;
    if (this.Wix && this.Wix.Data && this.Wix.Data.Public) {
      return this.$q.all(
        keysArray.map(function (key) {
          return _this.getPublicDataForApp(key);
        })
      );
    }
  };
  SdkAdapter.prototype.setPublicData = function (key, value) {
    return this.setPublicDataByScope(key, value, "COMPONENT");
  };
  SdkAdapter.prototype.setPublicDataForApp = function (key, value) {
    return this.setPublicDataByScope(key, value, "APP");
  };
  SdkAdapter.prototype.setPublicDataByScope = function (key, value, scope) {
    var _this = this;
    return this.$q(function (resolve, reject) {
      if (_this.Wix && _this.Wix.Data && _this.Wix.Data.Public) {
        _this.Wix.Data.Public.set(
          key,
          value,
          { scope: scope },
          function (setValue) {
            return resolve(setValue[key]);
          },
          reject
        );
      }
    });
  };
  SdkAdapter.prototype.getWidgetPreset = function () {
    var _this = this;
    return this.isPublicDataSupported().then(function (isPublicDataSupported) {
      if (!isPublicDataSupported) {
        return "";
      }
      return _this.$q(function (resolve) {
        if (_this.Wix && _this.Wix.Data && _this.Wix.Data.Public) {
          _this.Wix.Data.Public.get(
            "presetId",
            function (value) {
              return resolve(value.presetId);
            },
            resolve
          );
        }
      });
    });
  };
  SdkAdapter.prototype.isHtml5Editor = function () {
    var _this = this;
    return this.$q(function (resolve) {
      if (
        _this.isLiveSiteMode() ||
        _this.isPreviewMode() ||
        _this.isStandaloneMode()
      ) {
        resolve(false);
      } else {
        _this.Wix.Features.isSupported(
          _this.Wix.Features.Types.PREVIEW_TO_SETTINGS,
          function (isSantaEditor) {
            resolve(isSantaEditor === false);
          }
        );
      }
    });
  };
  SdkAdapter.prototype.getEditorUrl = function (callback) {
    var _this = this;
    if (callback) {
      this.Wix.Dashboard.getEditorUrl(callback);
      return;
    }
    if (!this.isDashboardMode()) {
      return this.$q.reject(
        "cannot call .getEditorUrl() in mode other than dashboard"
      );
    }
    return this.$q(function (resolve, reject) {
      var timeoutHandle = _this.$timeout(
        reject,
        1000,
        true,
        ".getEditorUrl() timeout error"
      );
      _this.Wix.Dashboard.getEditorUrl(function (url) {
        _this.$timeout.cancel(timeoutHandle);
        resolve(url);
      });
    });
  };
  SdkAdapter.prototype.openVideoDialog = function (multiSelect) {
    var _this = this;
    return this.$q(function (resolve, reject) {
      return _this.Wix.SuperApps.Dashboard.openMediaDialog(
        _this.Wix.Settings.MediaType.VIDEO,
        multiSelect,
        function (result) {
          return resolve(Array.isArray(result) ? result : [result]);
        },
        //todo: lodash way when there is lodash
        //_.flow(_.castArray, resolve),
        reject
      );
    });
  };
  SdkAdapter.prototype.setDashboardHelpArticle = function (url) {
    if (!this.isDashboardMode()) {
      return;
    }
    this.Wix.Dashboard.setHelpArticle(url);
  };
  SdkAdapter.prototype.registerCampaignPixel = function (pixelId) {
    this.Wix.Analytics.registerCampaignPixel(
      this.Wix.Analytics.PixelType.FACEBOOK,
      pixelId
    );
  };
  SdkAdapter.prototype.reportViewContentCampaignEvent = function (data) {
    if (data === void 0) {
      data = null;
    }
    this.reportCampaignEvent(
      this.Wix.Analytics.PixelEventType.VIEW_CONTENT.eventName,
      data
    );
  };
  SdkAdapter.prototype.reportAddToCartCampaignEvent = function (data) {
    if (data === void 0) {
      data = null;
    }
    this.reportCampaignEvent(
      this.Wix.Analytics.PixelEventType.ADD_TO_CART.eventName,
      data
    );
  };
  SdkAdapter.prototype.reportPurchaseCampaignEvent = function (data) {
    if (data === void 0) {
      data = null;
    }
    this.reportCampaignEvent(
      this.Wix.Analytics.PixelEventType.PURCHASE.eventName,
      data
    );
  };
  SdkAdapter.prototype.trackEvent = function (eventName, params) {
    if (this.isLiveSiteMode()) {
      this.Wix.Analytics.trackEvent(eventName, params);
    }
  };
  /**
   * Checks if visualFocus turned on. Available in site view mode only.
   * In other modes, we treat it as false instead of throwing.
   * @returns {angular.IPromise<boolean>}
   */
  SdkAdapter.prototype.isVisualFocusEnabled = function () {
    var _this = this;
    return this.$q(function (resolve) {
      if (!_this.isLiveSiteMode()) {
        resolve(false);
      } else {
        _this.Wix.isVisualFocusEnabled(function (isEnabled) {
          resolve(isEnabled);
        });
      }
    });
  };
  SdkAdapter.prototype.reportCampaignEvent = function (eventType, data) {
    if (data === void 0) {
      data = null;
    }
    this.Wix.Analytics.reportCampaignEvent(eventType, data);
  };
  SdkAdapter.prototype.isPublicDataSupported = function () {
    var _this = this;
    return this.isHtml5Editor().then(function (isHtml5Editor) {
      return !isHtml5Editor && !_this.isStandaloneMode();
    });
  };
  SdkAdapter.prototype.isEcomSectionInstalled = function (sectionName) {
    var _this = this;
    if (this.Wix.isAppSectionInstalled) {
      return this.$q(function (resolve) {
        return _this.Wix.isAppSectionInstalled(
          sectionName,
          { appDefinitionId: _this.appDefId },
          resolve
        );
      });
    } else {
      return this.$q.resolve(true);
    }
  };
  SdkAdapter.prototype.registerApi = function (apiObject, eventsArray) {
    if (eventsArray === void 0) {
      eventsArray = [];
    }
    return this.Wix.registerApi(apiObject, eventsArray);
  };
  SdkAdapter.prototype.fireEvent = function (eventName, eventPayload) {
    return this.Wix.fireEvent(eventName, eventPayload);
  };
  return SdkAdapter;
})();
exports.SdkAdapter = SdkAdapter;
var SdkAdapterProvider = /** @class */ (function () {
  /* @ngInject */
  function SdkAdapterProvider(
    WixProvider, //tslint:disable-line no-shadowed-variable
    clientConfig
  ) {
    this.WixProvider = WixProvider;
    this.clientConfig = clientConfig;
    //
  }
  SdkAdapterProvider.prototype.isStandaloneMode = function () {
    return this.WixProvider.Wix.Utils.getViewMode() === "standalone";
  };
  SdkAdapterProvider.prototype.getBiToken = function () {
    var token;
    try {
      token = this.WixProvider.Wix.Utils.getInstanceValue("biToken");
      if (!token) {
        return this.getInstanceValue("biToken");
      }
      return token;
    } catch (e) {
      return this.getInstanceValue("biToken") || ""; //hack for BM in editor
    }
  };
  SdkAdapterProvider.prototype.getInstanceValue = function (key) {
    if (!this.clientConfig.instance) {
      return;
    }
    var encodedInstance = this.clientConfig.instance.substring(
      this.clientConfig.instance.indexOf(".") + 1
    );
    var decodedInstance = JSON.parse(atob(encodedInstance));
    return (decodedInstance && decodedInstance[key]) || null;
  };
  /* @ngInject */
  SdkAdapterProvider.prototype.$get = function ($injector) {
    return $injector.instantiate(SdkAdapter, { provider: this });
  };
  return SdkAdapterProvider;
})();
exports.SdkAdapterProvider = SdkAdapterProvider;
var WixProvider = /** @class */ (function () {
  function WixProvider() {
    if (!angular.isDefined(window.Wix)) {
      throw new Error("Wix is not defined.");
    }
    this.Wix = window.Wix;
  }
  WixProvider.prototype.$get = function () {
    return this.Wix;
  };
  return WixProvider;
})();
exports.WixProvider = WixProvider;
function replaceExtensionWith(newExtension, url, originalFileName) {
  var hasExtension = originalFileName.split(".").length > 1;
  if (hasExtension) {
    var uriParts = url.split(".");
    uriParts.pop();
    uriParts.push(newExtension);
    url = uriParts.join(".");
  }
  return url;
}
