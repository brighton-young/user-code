/**
 * A function to create a log object for the 'webVitalsReport180' event (evid: 180)
 *
 * Event description: The event will be sent 1 time for any load from the viewer / BM. the web vitals can be change over time and will be sent in a json dictionary.
 *
 * @param {webVitalsReport180Params} params - The parameters for this event
 * @property {string} clsApplicationId - Application ID of an app in which the interacted html element is rendered
 * @property {string} clsComponentType - Eclosing component type of an element that CAUSED largest layout shift
 * @property {string} clsLargestShiftTarget - The cls_largest_shift_target value
 * @property {number} clsLargestShiftTime - When the largest layout shift occured
 * @property {string} clsLargestShiftVal - The clsLargestShift value
 * @property {string} clsRating - 'good' | 'needs-improvement' | 'poor'
 * @property {string} clsVal - The cls value
 * @property {string} clsWidgetId - Enclosing widget id of an element that CAUSED largest layout shift
 * @property {number} deviceMemory - The approximate amount of device memory in gigabytes. Our only way to estimate device compute power.
 * @property {string} effectiveNetworkType - The effective type of the connection meaning one of slow-2g, 2g, 3g, or 4g. This value is determined using a combination of recently observed, round-trip time and downlink values.
 * @property {number} fcp - The fcp Value
 * @property {string} inpApplicationId - Application ID of an app in which the interacted html element is rendered
 * @property {string} inpComponentType - Eclosing component type of an element that was interacted with
 * @property {string} inpEventType - The `type` of the `event` dispatched corresponding to INP
 * @property {number} inpInputDelay - Time that passed between the interaction until the browser was able to trigger event dispatch
 * @property {number} inpInteractionId - Uniquely identifies a user interaction which triggered a series of associated events. For example a click will trigger a sequence of events - pointerdown, pointerup, and click.
 * @property {string} inpInteractionType - The type of interaction, based on the event type of the `event` entry  that corresponds to the interaction (i.e. the first `event` entry containing an `interactionId` dispatched in a given animation frame).  For "pointerdown", "pointerup", or "click" events this will be "pointer",  and for "keydown" or "keyup" events this will be "keyboard".
 * @property {boolean} inpIsDuringNavigation - Whether the INP happens during a navigation
 * @property {string} inpLoadState - The inp_load_state value
 * @property {string} inpLoafs - JSON array of INP related Long Animation Frames
 * @property {number} inpNextPaintTime - Timestamp of when the next frame was painted on a screen
 * @property {number} inpPresentationDelay - Time that passed between last event handler execution until the next frame is painted on the screen
 * @property {number} inpProcessingDuration - Time that passed between first event dispatch until the last event handler has finished its execution
 * @property {number} inpProcessingStart - The time at which event triggered by the interaction is dispatched. This is when event handlers are about to be executed.
 * @property {string} inpRating - 'good' | 'needs-improvement' | 'poor'
 * @property {number} inpStartTime - The time when the user interacted for the event corresponding to INP
 * @property {string} inpTargetSelector - The inpTargetSelector value
 * @property {string} inpUrl - inp Url
 * @property {number} inpValue - The inp value
 * @property {string} inpWidgetId - Enclosing widget id of an element that was interacted with
 * @property {boolean} isSoftNavEnabled - True is it is Soft Nav Enabled
 * @property {number} lcp - The lcp Value
 * @property {string} lcpApplicationId - Application ID of an app in which the interacted html element is rendered
 * @property {string} lcpComponentType - Eclosing component type of the LCP element
 * @property {string} lcpContentType - jpeg | png | gif | svg | webp | other
 * @property {number} lcpElementRenderDelay - The delta between when the LCP resource finishes loading until the LCP element is fully rendered
 * @property {string} lcpInitiatorType - A string representing the web platform feature that initiated the performance entry (css, fetch, body etc.)
 * @property {string} lcpLoafs - JSON array of LCP related Long Animation Frames.
 * @property {string} lcpRating - 'good' | 'needs-improvement' | 'poor'
 * @property {string} lcpResourceDeliveryType - Indicates how the resource was delivered — for example from the browser cache or from a navigational prefetch.
 * @property {number} lcpResourceLoadDelay - The delta between TTFB and when the browser starts loading the LCP resource (if there is one, otherwise 0)
 * @property {number} lcpResourceLoadDuration - The total time it takes to load the LCP resource itself (if there is one, otherwise 0)
 * @property {number} lcpResourceLoadTime - The total time it takes to load the LCP resource itself (if there is one, otherwise 0)
 * @property {number} lcpResourceRequestStart - A timestamp of the time immediately before the browser starts requesting the resource from the server, cache, or local resource
 * @property {number} lcpResourceResponseStart - A timestamp immediately after the browser receives the first byte of the response from the server, cache, or local resource.
 * @property {string} lcpResourceServerTiming - A semicolon separated list of server timings. These are set by server that is sending the LCP resource and can be used to determine cache hits/misses.
 * @property {number} lcpResourceTransferSize - Size of the fetched LCP resource in bytes.
 * @property {number} lcpSize - The intrinsic size of the element returned as the area (width * height).
 * @property {string} lcpTag - HTML Element type (span/p/img/picture etc.)
 * @property {string} lcpUrl - The URL (if applicable) of the LCP image resource
 * @property {string} lcpWidgetId - Enclosing widget id of the LCP element
 * @property {string} metadata - Stringified JSON object containing dynamic data
 * @property {string} navType - 'navigate' | 'reload' | 'back-forward' | 'back-forward-cache' | 'prerender' | 'restore' | 'soft-navigation'
 * @property {string} navigationId - The navigation Id
 * @property {string} platform - viewer / BM
 * @property {GUID} sessionId - session id
 * @property {number} ttfb - The ttfb Value
 * @property {number} ttfbConnectionDuration - The total time to create the connection to the requested domain.
 * @property {number} ttfbDnsDuration - The total time to resolve the DNS for the current request.
 * @property {number} ttfbRequestDuration - The total time from when the request was sent until the first byte of the response was received. This includes network time as well as server processing time.
 * @property {number} ttfbWaitingDuration - The total time from when the user initiates loading the page to when the DNS lookup begins. This includes redirects, service worker startup, and HTTP cache lookup times.
 * @property {Url} url - The canonical page URL
 * @property {string} webVitals - A Json dictionary of all the web vitals google is following on. example - {“Measure”:value,” Measure:value”..}
 * @return {LogObject<webVitalsReport180Params>} LogObject<webVitalsReport180Params>
 */
export function webVitalsReport180(params) {
  return { evid: 180, src: 72, endpoint: "pulse", params: params };
}
/**
 * A function to create a log object for the 'pulseUpdated' event (evid: 182)
 *
 * Event description: Sent when pulse library is updated
 *
 * @param {pulseUpdatedParams} params - The parameters for this event
 * @property {string} platform - viewer / BM
 * @property {GUID} sessionId - session id
 * @return {LogObject<pulseUpdatedParams>} LogObject<pulseUpdatedParams>
 */
export function pulseUpdated(params) {
  return { evid: 182, src: 72, endpoint: "pulse", params: params };
}
/**
 * A function to create a log object for the 'pulseInitialized' event (evid: 181)
 *
 * Event description: This event is sent when Pulse library has been initialized
 *
 * @param {pulseInitializedParams} params - The parameters for this event
 * @property {string} platform - viewer / BM
 * @property {GUID} sessionId - session id
 * @return {LogObject<pulseInitializedParams>} LogObject<pulseInitializedParams>
 */
export function pulseInitialized(params) {
  return { evid: 181, src: 72, endpoint: "pulse", params: params };
}
/**
 * A function to create a log object for the 'pulseError' event (evid: 183)
 *
 * Event description: Sent when an error happens in Pulse library
 *
 * @param {pulseErrorParams} params - The parameters for this event
 * @property {string} message - Error message
 * @property {string} platform - viewer / BM
 * @property {GUID} sessionId - session id
 * @property {string} step - Where the error happens in the code
 * @return {LogObject<pulseErrorParams>} LogObject<pulseErrorParams>
 */
export function pulseError(params) {
  return { evid: 183, src: 72, endpoint: "pulse", params: params };
}
/**
 * A function to create a log object for the 'webVitalsReport18011' event (evid: 180)
 *
 * Event description: The event will be sent 1 time for any load from the viewer / BM. the web vitals can be change over time and will be sent in a json dictionary.
 *
 * @param {webVitalsReport18011Params} params - The parameters for this event
 * @property {string} clsApplicationId
 * @property {string} clsComponentType
 * @property {string} clsLargestShiftTarget
 * @property {number} clsLargestShiftTime
 * @property {string} clsLargestShiftVal
 * @property {string} clsRating
 * @property {string} clsVal
 * @property {string} clsWidgetId
 * @property {number} deviceMemory
 * @property {string} effectiveNetworkType
 * @property {number} fcp
 * @property {string} inpApplicationId
 * @property {string} inpComponentType
 * @property {string} inpEventType
 * @property {number} inpInputDelay
 * @property {number} inpInteractionId
 * @property {string} inpInteractionType
 * @property {boolean} inpIsDuringNavigation
 * @property {string} inpLoadState
 * @property {string} inpLoafs
 * @property {number} inpNextPaintTime
 * @property {number} inpPresentationDelay
 * @property {number} inpProcessingDuration
 * @property {number} inpProcessingStart
 * @property {string} inpRating
 * @property {number} inpStartTime
 * @property {string} inpTargetSelector
 * @property {string} inpUrl
 * @property {number} inpValue
 * @property {string} inpWidgetId
 * @property {boolean} isSoftNavEnabled
 * @property {number} lcp
 * @property {string} lcpApplicationId
 * @property {string} lcpComponentType
 * @property {string} lcpContentType
 * @property {number} lcpElementRenderDelay
 * @property {string} lcpInitiatorType
 * @property {string} lcpLoafs
 * @property {string} lcpRating
 * @property {string} lcpResourceDeliveryType
 * @property {number} lcpResourceLoadDelay
 * @property {number} lcpResourceLoadDuration
 * @property {number} lcpResourceLoadTime
 * @property {number} lcpResourceRequestStart
 * @property {number} lcpResourceResponseStart
 * @property {string} lcpResourceServerTiming
 * @property {number} lcpResourceTransferSize
 * @property {number} lcpSize
 * @property {string} lcpTag
 * @property {string} lcpUrl
 * @property {string} lcpWidgetId
 * @property {string} metadata - Json dictionary of metadata
 * @property {string} navType
 * @property {string} navigationId
 * @property {string} platform - viewer / BM
 * @property {GUID} sessionId
 * @property {number} ttfb
 * @property {number} ttfbConnectionDuration
 * @property {number} ttfbDnsDuration
 * @property {number} ttfbRequestDuration
 * @property {number} ttfbWaitingDuration
 * @property {Url} url - The site url
 * @property {string} webVitals - A Json dictionary of all the web vitals google is following on. example -  {“Measure”:value,” Measure:value”..}
 * @return {LogObject<webVitalsReport18011Params>} LogObject<webVitalsReport18011Params>
 */
export function webVitalsReport18011(params) {
  return { evid: 180, src: 11, endpoint: "pulse", params: params };
}
//# sourceMappingURL=index.js.map
